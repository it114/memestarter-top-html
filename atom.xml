<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>张智进的博客</title>
  
  <subtitle>智进技术</subtitle>
  <link href="https://www.memestarter.top/atom.xml" rel="self"/>
  
  <link href="https://www.memestarter.top/"/>
  <updated>2022-03-21T01:51:49.383Z</updated>
  <id>https://www.memestarter.top/</id>
  
  <author>
    <name>zzj</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>股票-20220321</title>
    <link href="https://www.memestarter.top/2022/03/21/%E8%82%A1%E7%A5%A8-20220321/"/>
    <id>https://www.memestarter.top/2022/03/21/%E8%82%A1%E7%A5%A8-20220321/</id>
    <published>2022-03-21T00:13:13.000Z</published>
    <updated>2022-03-21T01:51:49.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题材"><a href="#题材" class="headerlink" title="题材"></a>题材</h2><h3 id="新冠口服药-中药"><a href="#新冠口服药-中药" class="headerlink" title="新冠口服药+中药"></a>新冠口服药+中药</h3><p>** 新冠口服药+中药+上游产业链，国内这几家公司最值得期待，不仅将有巨大增量、未来更有望参与全球药物生产。**<br>《风口研报》今日导读1、新冠治疗（奥翔药业、九洲药业、河化股份）：<br>①第九版新冠诊疗方案发布，新增了两种抗病毒药物和中药治疗，华安证券谭国超认为新冠小分子药物已在全球范围内广泛使用，国内真实生物、君实生物研发进度最快，产品有望年内获批，国产口服新冠药物链条值得期待；<br>②谭国超认为在疫情的催化下，口服新冠小分子药物迅速放量，为国内CDMO公司带来巨大增量，更有望迎来参与全球创新药物生产的重要契机；<br>③此前每版的《方案》都离不开中药的身影，“三药三方”已发挥了显著作用，2022年3月《中成药防治新型冠状病毒肺炎专家共识》发布，谭国超看好新版《共识》推动中药抗疫，相关防疫中药厂商未来会直接受益；④风险因素：新冠疫情发展变化风险、产品研发数据及进度不及预期风险、产品产能及销售不及预期风险。</p><p>新冠口服药+中药+上游产业链，国内这几家公司最值得期待，不仅将有巨大增量、未来更有望参与全球药物生产第九版新冠诊疗方案发布，新增了两种抗病毒药物和中药治疗，两款抗病毒药物是用于“有进展为重型或重症高风险因素的患者”，相对而言，中医药的“三方三药”主要是应用在新冠肺炎轻症和无症状感染者身上，新方案是中西治疗的全新结合。华安证券谭国超深度覆盖新冠药物产业链，看好第九版方案的发布对国内新冠防治工作起到了新的指导意义，中药、西药、上游产业链等，都迎来了新的投资机会。新冠小分子药物撑起疫情治疗半边天，国产口服新冠药物链条值得期待小分子药物方面，辉瑞Paxlovid、默沙东Molnupiravir等已经取得较为明确的疗效并在全球范围内广泛使用。</p><p>国内新冠口服药方面，目前尚无国产产品获批，但多家企业正在积极布局，其中真实生物、君实生物研发进度最快，产品有望年内获批。<br>（1）真实生物的新冠口服药为阿兹夫定，采用核苷酸类似物技术路线，同默沙东Molnupiravir类似，涉及公司主要有上游原料药和中间体供应商拓新药业、奥翔药业。<br>（2）君实生物的新冠口服药VV116，技术路线也是核苷类似物，涉及公司主要有上游原料药和中间体供应商河化股份等。新冠药物为国内CDMO公司带来巨大增量，并迎来参与全球创新药物生产的重要契机谭国超认为在疫情的催化下，口服新冠小分子药物迅速放量，对上游中间体、原料药的需求也呈现爆发式增长，新冠产业链热度空前。并且，新冠供应链是国内CDMO公司打开国际市场、参与全球创新药物生产的重要契机。目前国内头部小分子CDMO企业已经凭借强大的产能供应、成本优势和交付能力，在新冠产业链中占据重要位置。从订单上来看，目前受益最充分的是小分子CDMO头部企业凯莱英和博腾股份。从产能上来看，在持续高景气及大订单的加持下，头部企业纷纷进入产能加速建设阶段。“三药三方”已发挥了显著作用，新版《共识》推动中药抗疫此前每版的《方案》都离不开中药的身影，其中经过筛选研究的“三药三方”成为抗疫的中药名片。2022年3月《中成药防治新型冠状病毒肺炎专家共识》发布，其中关于COVID-19中成药治疗推荐，从轻型、普通型以及重型和危重型的症状进行划分，不同阶段推荐中药治疗方案也不尽相同。谭国超看好在后疫情时代，中药无论是在预防还是治疗上都能发挥重要作用，各地方防疫也都能看到中药的力量，相关防疫中药厂商未来会直接受益。近期本栏目医药&amp;医疗系列：3月17日《布局新冠重症稀缺特效药，这匹“小黑马”同时推进三款新冠免疫抑制药物、2022年有望获批上市，分析师称其产品为“救命必须”》3月13日《多种检测方法联合应用，可有效缩短检测窗口期，“疫苗+检测+治疗药”多种手段共存，共筑疫情防控城墙》3月13日《新冠抗原自测试剂即将上架！这两家公司率先布局IVD检测增量业务、线下+线上终端渠道同步打开，分析师测算最高或迎370亿元增量市场》3月11日《新冠抗体检测+鼻喷新冠疫苗+HPV，这家公司处于大品种业绩兑现窗口期，现已获WHO预认证、产品有望出口海外打开更大空间》3月10日《“新冠抗体+抗原+试剂盒”需求或超预期，这家公司掌握检测试剂、抗体、疫苗生产中不可或缺的关键原料，下游直销药企数量超1000家》3月10日《合作药企开发新冠药物+疫苗，并自研自产新冠检测试剂，公司产品已实现大规模生产，有望带来更多收入空间》</p><p>另外：河化股份：仅是为一种有些过时的“新冠药物”生产原料的河化股份，其所含“新冠防治”概念的成色，恐怕还需要打上一个大大的问号。</p><h3 id="生猪养殖"><a href="#生猪养殖" class="headerlink" title="生猪养殖"></a>生猪养殖</h3><p>生猪养殖多年难遇的“超级反转拐点”将至，上一波10倍股层出不穷，本轮周期这几家具备“产能弹性”的公司有望成为种子选手。<br>今日导读 生猪养殖（温氏股份、天康生物、新五丰）：<br>①今年1-2月份生猪养殖上市公司出栏同比加速，2月生猪销售均价环比-11%，叠加饲料成本大涨，行业亏损严重；<br>②当前能繁母猪存栏持续下降，上市猪企出栏增速或前高后低、逐步放缓，招商证券熊承慧预计最早下半年猪价有望反转；<br>③熊承慧认为本轮猪周期关注过往周期中展现出成本及头均盈利优势、且有望继续扩张的龙头，以及销售结构优、养殖成本低的区域性龙头猪企等；<br>④风险提示：行业产能去化不及预期。</p><p>近日生猪价格持续走弱，上市养殖企业2月生猪销售均价11.88元，环比-11%。当前在猪价低位、成本上涨的双重夹击下，行业亏损幅度严重，而带来更大幅度的现金流消耗，加速产能去化，本轮生猪周期价格底部或渐渐临近。</p><p>招商证券熊承慧认为，当前能繁母猪存栏持续下降，上市猪企出栏增速或前高后低、逐步放缓，预计最早下半年猪价有望反转。建议积极布局优质猪企：<br>1）过往周期中展现出成本及头均盈利优势、且有望继续扩张的自繁自养龙头猪企；<br>2）经营已现改善，头均亏损或已触底的温氏股份；<br>3）销售结构优、养殖成本低的区域性龙头猪企。</p><p>出栏加速、亏损持续，猪周期反转渐近2022年1至2月，12家生猪养殖上市公司合计出栏生猪1762万头，同比增长44%；出栏增速有明显回升。2022年1月和2月，上市猪企的肥猪销售均价分别约13.3元&#x2F;公斤、11.9元&#x2F;公斤，维持下跌趋势。同时，由于豆粕等饲料原料大涨。生猪养殖行业的现金成本仍存在压力，2022年1月和2月生猪养殖行业仍处于现金亏损状态，部分上市公司的头均亏损幅度较2021年11月和12月有所放大。上半年猪价受供给压力的影响易跌难涨，母猪产能去化仍将持续、并有望逐步加速。周期反转渐近，择优布局猪企招商证券认为，能繁母猪存栏持续下降，上市猪企出栏增速或前高后低、逐步放缓，预计最早下半年猪价有望反转。售价低迷，原料成本上升，当前生猪养殖行业仍陷于现金流亏损状况，有望带动产能加速去化。梳理上市猪企过往经营数据及盈利情况后不难发现，虽然非洲猪瘟疫情导致猪价出现了3倍左右的涨幅，但是由于扩张成本高、出栏放量期猪价已步入下行期，不少上市公司在过去一轮周期中并未实现盈利，更不提实现相对行业的超额盈利。</p><p>建议从三个角度筛选优质猪企进行布局：<br>1）过往周期中展现出成本及头均盈利优势、且有望继续扩张的自繁自养龙头猪企；2）经营已现改善，头均亏损或已触底的温氏股份；3）销售结构优、养殖成本低的区域性龙头猪企。</p><h3 id="建筑节能（东方雨虹、鲁阳节能、鸿路钢构）"><a href="#建筑节能（东方雨虹、鲁阳节能、鸿路钢构）" class="headerlink" title="建筑节能（东方雨虹、鲁阳节能、鸿路钢构）"></a>建筑节能（东方雨虹、鲁阳节能、鸿路钢构）</h3><p>①住建部发布《“十四五”建筑节能与绿色建筑发展规划》，结合将在今年4月起实施的全文强制性国标《建筑节能与可再生能源利用通用规范》，中信证券孙明新认为政府对建筑节能的重视程度明显提升，建筑节能和BIPV行业预计将受益于政策引导，需求有望长期提升；<br>②两文件提出了提高新建建筑和既有建筑节能水平总体任务的具体要求，同时建筑遮阳将是政策长期鼓励的节能措施之一，有望带动保温材料需求增加，重点公司包括东方雨虹、玉马遮阳、鲁阳节能；<br>③两文件均提出推广建筑光伏的任务或要求，质量要求提升有利于建筑光伏EPC订单向头部建筑企业集中，同时孙明新认为装配式建筑渗透率提升有利于支撑钢结构需求，重点公司包括东南网架、鸿路钢构、杭萧钢构、精工钢构、中天精装、森特股份；<br>④风险因素：政策推进不及预期、上市公司在手订单落地不及预期。</p><p>一文看懂建筑节能领域，强制性国标4月起实施，这两个环节将成为受益政策的主要方向3月11日住建部发布《“十四五”建筑节能与绿色建筑发展规划》（下称“规划”）。结合将在今年4月起实施的全文强制性国标《建筑节能与可再生能源利用通用规范》（下称“规范”），建筑节能领域的顶层设计已愈发完善。</p><p>中信证券孙明新深度覆盖建筑节能领域，在“双碳”目标下，政府对建筑节能的重视程度明显提升，建筑节能和BIPV行业预计将受益于政策引导，需求有望长期提升。两文件框架梳理：规范细化节能建设要求，规划指导节能提升方向“规范”作为强制性国标，对新建建筑和既有建筑的节能工程详细明确了设计、施工、调试、验收、运行管理的强制性指标及基本要求。</p><p>“规范”的明细要求和强制执行性为“规划”的落实提供依据和保障，孙明新将“规划”提出的重点任务提炼和归结为四个方面：<br>（1）建筑发展方向：建设高品质绿色建筑，提升建筑节能水平，推广超低能耗建筑、近零能耗建筑等；<br>（2）建筑能源应用：推动太阳能建筑应用等；<br>（3）建筑建造方式：发展装配式建筑和装配化装修等；<br>（4）建筑建材使用：促进绿色建材推广应用等。孙明新认为提升建筑节能水平、应用建筑光伏等措施成为推动绿色建筑高质量发展的重要抓手。</p><p>两文件将引导建筑保温、建筑遮阳、建筑光伏的质量和需求提升<br>（1）建筑保温：保温材料直接影响建筑外围护结构的热工性能；两文件提出了提高新建建筑和既有建筑节能水平总体任务的具体要求，有望带动保温材料需求增加。此外，两文件对保温工程的保险制度、系统化供应、各环节技术指标做出规划和要求，对保温工程的质量要求提升，有利于行业集中度提升。重点公司包括：东方雨虹、玉马遮阳、鲁阳节能。<br>（2）建筑遮阳：将是政策长期鼓励的节能措施之一；“规划”提到“因地制宜增设遮阳设施，提升遮阳设施安全性、适用性、耐久性”，“规范”要求夏热冬暖、夏热冬冷地区的甲类公共建筑南、东、西向外窗和透光幕墙应采取遮阳措施。孙明新认为这表明了温暖气候地区安装建筑遮阳的必要性，建筑遮阳将是政策长期鼓励的节能措施之一。<br>（3）建筑光伏：分布式光伏发展预计超出目标预期，订单向头部建筑企业集中；两文件均提出推广建筑光伏的任务或要求，对安装建筑光伏的合理性和安全性做出要求，质量要求提升有利于建筑光伏EPC订单向头部建筑企业集中。同时孙明新认为装配式建筑渗透率提升有利于支撑钢结构需求。重点公司包括：东南网架、鸿路钢构、杭萧钢构、精工钢构、中天精装、森特股份。 </p><h2 id="个股"><a href="#个股" class="headerlink" title="个股"></a>个股</h2><h3 id="中装建设"><a href="#中装建设" class="headerlink" title="中装建设"></a>中装建设</h3><p>这家公司传统建筑装饰公司首次单列新能源板块，业务覆盖“工程+新能源+数据中心”三大领域，旗下机柜总规模达1万个；</p><p>中装建设于3月15日接待电话调研时表示，公司主营业务为建筑装饰，近年来公司围绕主业链上下游进行延伸，包括幕墙、施工总承包、物业管理、新能源、IDC等，各业务板块之间具有协同效应，达到1+1大于2的效果。</p><p>工程板块是公司最重要的板块，也是公司发展的根基。在未来的发展当中，工程板块依然发挥中流砥柱的作用。2022年工程板块重点围绕医院、学校、地铁、机场、博物馆、保障性住房、老旧小区改造等民生保障性工程开展。</p><p>在双碳背景下，绿色能源的发展是大势所趋，新能源板块的发展空间巨大。在此背景之下，公司第一次将新能源板块单列板块，以推动公司的转型发展。2021年公司开始尝试新能源EPC项目——河南许昌50兆瓦风电项目。公司计划通过逐步持有优质的发电资产，实现新能源板块的高速发展。</p><p>目前公司科技创新板块最为重要的业务就是IDC业务，基于未来互联网行业的发展，以及5G商业化的大规模应用的背景，在佛山建设了五沙（宽原）大数据中心，总规模为1万个机柜，用来推进数据中心和云计算业务。</p><h3 id="济川药业"><a href="#济川药业" class="headerlink" title="济川药业"></a>济川药业</h3><p>这家医药小龙头业绩加速兑现，产品结构优化，全年新品种放量有望持续加速；<br>济川药业于3月11、15日接待机构调研时表示，经初步测算，预计公司2021年实现营业收入76.31亿元，较上年同期增长23.77%；利润总额18.88亿元，较上年同期增长27.28%；归属于上市公司股东的净利润16.64亿元，较上年同期增长30.31%；归属于上市公司股东的扣除非经常性损益的净利润15.60亿元，较上年同期增长26.37%。</p><p>近年来，公司产品结构得到了明显优化。蒲地蓝消炎口服液、雷贝拉唑钠肠溶胶囊占销售收入的比例明显降低，公司产品中小儿豉翘清热颗粒、蛋白琥珀酸铁口服溶液、健胃消食口服液、黄龙止咳颗粒等产品对公司销售额贡献逐步增加，具有更大的发展潜力。此外，公司2020年底国谈品种甘海胃康胶囊、川芎清脑颗粒销量也实现了快速增长。</p><p>浙商证券分析师认为，公司历史上通过蒲地蓝、小儿豉翘和雷贝拉唑钠三种药品积累了成熟的OTC销售渠道，自身销售能力得到验证，预计公司全年新品种的放量有望持续加速，依靠健胃消食口服液、黄龙止咳颗粒、蛋白琥珀酸铁口服溶液等中西医药品种搭建中长期产品梯队。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题材&quot;&gt;&lt;a href=&quot;#题材&quot; class=&quot;headerlink&quot; title=&quot;题材&quot;&gt;&lt;/a&gt;题材&lt;/h2&gt;&lt;h3 id=&quot;新冠口服药-中药&quot;&gt;&lt;a href=&quot;#新冠口服药-中药&quot; class=&quot;headerlink&quot; title=&quot;新冠口服药+中药&quot;</summary>
      
    
    
    
    <category term="投资 - 股票" scheme="https://www.memestarter.top/categories/%E6%8A%95%E8%B5%84-%E8%82%A1%E7%A5%A8/"/>
    
    
    <category term="股票" scheme="https://www.memestarter.top/tags/%E8%82%A1%E7%A5%A8/"/>
    
    <category term="投资" scheme="https://www.memestarter.top/tags/%E6%8A%95%E8%B5%84/"/>
    
  </entry>
  
  <entry>
    <title>股票-20220317</title>
    <link href="https://www.memestarter.top/2022/03/17/%E8%82%A1%E7%A5%A8-20220317/"/>
    <id>https://www.memestarter.top/2022/03/17/%E8%82%A1%E7%A5%A8-20220317/</id>
    <published>2022-03-16T23:49:18.000Z</published>
    <updated>2022-03-17T00:34:04.209Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题材"><a href="#题材" class="headerlink" title="题材"></a>题材</h2><h3 id="氢氧化锂"><a href="#氢氧化锂" class="headerlink" title="氢氧化锂"></a>氢氧化锂</h3><p>据上海钢联发布数据显示，锂电材料氢氧化锂报价今日涨5000元&#x2F;吨，报价49万&#x2F;吨，）价格较春节后（据生意社春节后价格为28.8万元&#x2F;吨）已上涨70.1%。券商观点</p><p>华创证券王保庆分析指出，短期，锂市场依旧偏紧，下游需求旺盛，带动锂价稳步上行。中期，上游锂矿开发周期较长，未来2-3年内供给短缺格局预计将难有改变，下游电动车和储能已占据锂需求60%以上，随着下游需求的高增长，锂行业料将获得高成长性。</p><pre><code>数据解读</code></pre><p>华安证券研报指出，新能源车进入加速渗透期，储能高速增长，需求井喷下锂电产业链积极扩张，锂电行业未来5年年均增速45%以上。</p><pre><code>产业链相关公司天华超净联合宁德时代等企业共同出资设立的天宜锂业，一期年产2万吨电池级氢氧化锂项目产能完全释放，全部扩产项目达产后，天宜锂业将具备电池级氢氧化锂产品的总产能16万吨/年。丰元股份全资子公司山东丰元锂能科技有限公司与玉溪市人民政府签署《投资协议》，其中提到玉溪市人民政府要支持乙方依法依规参与竞拍取得黏土锂矿等矿产资源探矿权、采矿权，依法保障公司锂电池正极材料及配套项目所需锂矿等有关资源。</code></pre><h2 id="个股"><a href="#个股" class="headerlink" title="个股"></a>个股</h2><h3 id="文山电力（600995）"><a href="#文山电力（600995）" class="headerlink" title="文山电力（600995）"></a>文山电力（600995）</h3><p>A股目前稀缺的储能运营资产即将注入这家小市值公司，多个储能项目已并网运行，2023年冲击20亿元级别净利润<br>2022-03-16 11:22 星期三<br>文山电力（600995）精要：<br>①公司拟注入南网调峰调频资产，此次重组完成后，公司业务由购售电、发电、电力设计及配售电转变为抽水蓄能、调峰水电和电网独立侧储能业务；<br>②截至2020年底我国抽水蓄能电站装机规模达到31.49GW，占中国储能市场比重接近90%，根据天风证券郭丽丽测算，2021-2026年调峰调频公司的抽水蓄能电站资产能够实现净利润复合增速达到33%；<br>③调峰调频公司于2011年建成10MW深圳宝清电池储能站，公司2021-2025年电化学储能资产预计复合增速高达371.2%；<br>④风险提示：资产重组被暂停、中止或者取消。近期成长赛道抗风险表现相对强于稳增长方向，原因为市场对于今年经济预期弱势而流动性预期相对宽松，成长赛道相对占优。</p><p>天风证券郭丽丽今日覆盖了一家成长性与稀缺性兼具的储能运营标的文山电力，公司拟通过重大资产置换计划置入南方电网的抽水蓄能、调峰水电和电网独立侧储能资产。2021年上半年调峰调频公司实现归母净利5.55亿元。郭丽丽预计拟置入资产调峰调频公司2023年业绩21.5亿元，若顺利完成资产重组，在25倍PE下对应目标价为23.64元（当前13元，具有80%空间）。装机增长+稳定收益，抽水蓄能有望开启黄金十年发展期文山电力为南网旗下电网上市公司，拟置入的南方电网持有标的调峰调频发电有限公司主营业务为抽水蓄能、调峰水电和电网侧独立储能业务（拟置入资产作价在130-160亿元之间）。2021年上半年，抽水蓄能毛利润为8.01亿元，调峰水电毛利润为4.3亿元，合计占比在90%左右。当前抽水蓄能是目前大规模调节能源首选，抽水蓄能度电成本为0.21-0.25元&#x2F;kwh，而目前度电成本最低的铅蓄电池储能技术也为0.61元&#x2F;kwh，远高于抽蓄的平均成本。循环寿命次数达到16000次，远高于磷酸铁锂电池等。公司已投运的5座抽蓄电站中，有4座位于广东省，1座位于海南省；目前在建梅州抽水蓄能电站一期、阳江抽水蓄能电站一期两座合计装机240万千瓦的抽水蓄能电站。</p><p>综合来看，天风证券预计公司2021-2026年，调峰调频公司的抽水蓄能电站资产能够带来的合计利润分别5.52&#x2F;7.66&#x2F;13.77&#x2F;15.36&#x2F;20.09和23.16亿元，复合增速达到33.2%，其中2023年同比实现约80%的同比增幅。新型储能发展前景广阔，技术储备充足调峰调频公司储能科研团队早在2009年就开始了电化学储能技术的研究，于2011年建成投运国内首个兆瓦级锂离子电池储能站——深圳宝清电池储能站。2021年7月，调峰调频公司与广东电网公司签订储能示范项目合作协议，将东莞110kv杨屋站、220kv黎贝站和广州110kv芙蓉站储能项目确定为南方电网公司2021年新兴业务领域示范项目。截至2022年2月，三批项目已经全部成功并网启动，进一步扩大公司储能装机规模。到2025年，南方电网电网新能源配套储能中侧储能装机规模有望在2025年达到5GW。</p><h3 id="先进数通"><a href="#先进数通" class="headerlink" title="先进数通"></a>先进数通</h3><p>这家银行IT小龙头完成法定数字货币支付应用解决方案研发，东数西算业务板块提供IT基础设施建设业务，客户覆盖以商业银行为主的金融机构；</p><p>先进数通于3月9日接待多家机构调研时表示，公司定位于金融信息化服务提供商，业务覆盖IT基础设施建设、软件解决方案、IT运维服务。公司积累了以国有大型商业银行、全国性股份制商业银行、区域性银行、大型互联网企业为代表的众多的高端客户。</p><p>调研过程中，公司表示，法定数字货币目前主要的应用领域是其基础支付功能。基于公司自有版权软件产品Starring，公司构建了支持法定数字货币的支付应用解决方案，目前解决方案研发已经完成，公司正在面向中小银行，推广上述解决方案，已有多个项目处于实施过程中。</p><p>此外，公司与数据中心相关的业务是向大中型金融、互联网企业提供数据中心IT基础设施建设业务，主要涉及服务器系统、存储系统、网络系统、基础软件。国家东数西算战略部署，对大中型金融、互联网企业未来数据中心布局产生长期影响，对促进以数据中心建设为代表的新基建也将起到巨大的促进作用。</p><p>A股相关上市公司中，海联金汇数字人民币业务已在线上和线下零售消费场景测试运行，公司跨境支付业务服务覆盖全球239个国家和地区。天玑科技业务主要包括数据中心IT基础设施服务、软硬件销售及自有产品销售，在2020年数据中心IT基础设施第三方服务市场排名第五，在数据中心IT基础设施IT支持与维护市场第三方中排名第三。</p><h3 id="中科创达"><a href="#中科创达" class="headerlink" title="中科创达"></a>中科创达</h3><p>这家智能操作系统提供商2021年业绩高增，定增卡位智能物联网，在自动驾驶领域与世界头部芯片厂商展开密切合作；<br>中科创达董事长等公司高管于3月8日接待多家机构电话调研，公司2021年营收为41.27亿元，同比增长57.04%，落于业绩预告区间中值。全年实现归母净利润6.47亿元，同比增长45.96%，实现扣非净利润5.76亿元，同比增长57.29%。</p><p>公司智能汽车业务整体的发展在2022年会保持持续快速增长。从客户维度来看,大客户的数量和规模明显在快速增长。大客户数量的持续增长,清晰地表明创达在头部客户的市场份额在不断增长。</p><p>在汽车业务的增长中,海外市场的增速将会超过国内业务,在汽车收入中的占比也会提升，并且会带动智能汽车业务整体毛利率的提升。从业务维度来看,创达的智能座舱业务已经确立在全球的领先地位,并继续保持整体增长。智能驾驶是汽车业务的第二增长曲线，后续占比还会持续提升。</p><p>在自动驾驶领域,2021年开始，公司和英伟达，高通,地平线等芯片厂商都展开密切的合作。创达是英伟达在中国的首家视觉领域的软件合作伙伴；和地平线将共同合作在软件平台上的开发；2021年成立的苏州畅行智驾公司,将专注研发自动驾驶域控制器软件和硬件一体化平台。从核心竞争力来看,自动驾驶从长期来看硬件会走向同质化,真正的核心焦点将集中在软件的差异化。</p><p>畅行智驾公司将基于高通芯片来研发中档的域控制器产品。目前创达是高通8540平台国内厂商中进展最快的,3月内就会有A样样品出来,并且和客户也在进行密切的合作沟通中。在样品出来后,会和客户展开测试和评估的工作。</p><p>此外，公司发布定增预案，行拟募集资金总额不超过31亿元，发行对象为不超过35名（含35名）特定投资者，投入至整车操作系统研发项目、边缘计算站研发项目、XR研发及产业化项目和分布式算力网络技术研发项目以及补充流动资金，旨在布局物联网时代，实现率先卡位。</p><p>A股相关上市公司中，宜通世纪主营业务覆盖通信网络技术服务、系统解决方案、通信设备销售业务、物联网平台及解决方案，主要为运营商和通信设备厂家提供从工程、优化到维护的一体化解决方案。伯特利主营业务是汽车制动系统和汽车智能驾驶相关产品的研发、生产和销售，主要产品分机械制动产品和智能电控产品两大类。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题材&quot;&gt;&lt;a href=&quot;#题材&quot; class=&quot;headerlink&quot; title=&quot;题材&quot;&gt;&lt;/a&gt;题材&lt;/h2&gt;&lt;h3 id=&quot;氢氧化锂&quot;&gt;&lt;a href=&quot;#氢氧化锂&quot; class=&quot;headerlink&quot; title=&quot;氢氧化锂&quot;&gt;&lt;/a&gt;氢氧化锂&lt;/h</summary>
      
    
    
    
    <category term="投资 - 股票" scheme="https://www.memestarter.top/categories/%E6%8A%95%E8%B5%84-%E8%82%A1%E7%A5%A8/"/>
    
    
    <category term="股票" scheme="https://www.memestarter.top/tags/%E8%82%A1%E7%A5%A8/"/>
    
    <category term="投资" scheme="https://www.memestarter.top/tags/%E6%8A%95%E8%B5%84/"/>
    
  </entry>
  
  <entry>
    <title>分享-20220316</title>
    <link href="https://www.memestarter.top/2022/03/16/%E5%88%86%E4%BA%AB-20220316/"/>
    <id>https://www.memestarter.top/2022/03/16/%E5%88%86%E4%BA%AB-20220316/</id>
    <published>2022-03-16T00:02:47.000Z</published>
    <updated>2022-03-16T00:28:41.178Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题材"><a href="#题材" class="headerlink" title="题材"></a>题材</h2><h3 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h3><p>“云计算+大数据”催生百亿元级别网络安全需求，分析师测算市场规模增速或将保持于35%，这些厂商未来三到五年市占率有望持续提升。数字化进程有望拉动网络安全需求，分析师测算大数据安全市场规模增速保持在35%左右，随着云计算技术的普及、渗透率的不断提升，相关基础设施与应用场景的安全防护应运而生，中小型客户需求有望加速释放，头部厂商业绩增速有望领跑行业。<br>信息安全（神思电子、飞天诚信、美亚柏科）精要：</p><p>①中国银河证券吴砚靖认为，信息安全需求随信息产业增长而增长，是值得长期关注的稳增长、高景气的计算机细分领域，未来五年我国网络安全行业需求将维持20%以上的高增长，驱动因素主要体现在技术、政策和安全事件；</p><p>②根据IDC最新预测，2021年中国网络安全市场投资规模将达到97.8亿美元，并有望在2025年增长至187.9亿美元，约人民币1220亿元，五年复合增速约为17.9%，增速持续领跑全球；</p><p>③随着云计算技术的普及、渗透率的不断提升，相关基础设施与应用场景的安全防护应运而生，根据赛迪顾问数据，大数据安全市场规模2021年预计将达到69.7亿元，增速保持在35%左右，远高于网安行业整体的20%左右增速；</p><p>④吴砚靖看好头部厂商综合服务能力强，未来三到五年市占率有望持续提升，信息安全相关标的包括神思电子、飞天诚信、美亚柏科、安博通等；</p><p>⑤风险提示：行业竞争加剧、产业发展进度不达预期等。</p><h3 id="军工，国企改革"><a href="#军工，国企改革" class="headerlink" title="军工，国企改革"></a>军工，国企改革</h3><p>1）军工上市公司有望迎资产注入高峰</p><p>国家推进国企改革，目标“提高国有资本效率、增强国有企业活力”，2022年迎“国企改革三年行动”收官之年，相关改革举措有望加速；</p><p>“十四五”国防装备大放量，军工科研院所有望加快资产注入：军工科研院所资产注入有利于提升科研成果转化率，防止产研分离，注入的优质资产可提高上市公司核心竞争力，改善资产质量；利润改善同时为科研活动提供经费支持，形成正向反馈。院所市场化、资本化是长期趋势。</p><p>2）多家军工集团下属上市公司已经进行重大资产重组，后续业务有望加速</p><p>2015年以来，军工集团下属上市公司累计已有32家进行了重大资产重组，重组公司占所有军工央企旗下A股上市公司数量的35%，累计注入评估价值超1300亿资产；</p><p>其中中航工业资产证券化率最高达80%，其次为电子信息集团59%，船舶集团53%，兵器装备集团48%；航天科工、航天科技资产证券化率最低，截至2021H1仅14%、18%。</p><p>自2017年军工集团整合注入高峰期后，2021年随着“国企三年改革行动”不断推进，企业资产注入掀起一轮新高峰，2022年及十四五期间有望持续保持高位。</p><p>从重大资产重组注入前后收入对比看，累计33家公司重组前期总收入合计2133亿，资产注入后当期总收入合计2721亿，同比增幅28%；从重大资产重组前后归母净利润对比来看，重组前归母净利润合计46亿，重组后当期净利润合计84亿，同比增速83%，归母净利润涨幅明显。</p><p>3）中电科集团、中航工业集团走在前列，航天系集团后续资本运作空间大</p><p>中电科及中航工业集团走在前列：中航工业集团资产证券化率最高，截至2021H1已达80%，旗下多个上市公司成为细分赛道龙头；</p><p>中电科集团开启了“子集团组建-上市公司激励-优质资产注入”的模式，以下属子集团为平台整合院所资产，累计对下属6家企业进行了重大资产重组，在对上市公司进行优质注入的同时实现核心院所资产有效改制，后期资产证券化率有望持续提升；</p><p>航天系集团资产证券化率较低，后期资产重组有望加速：</p><p>航天系集团早起资本运作较少，现阶段整体资产证券化率较低，截至2021分别为18%、14%；航天系优质院所及核心资产多，集团整体资本运作有望加速，资产证券化率提升空间较大。</p><p>4）军工迎“内生+外延”双轮驱动，“内需+外贸”、“军品+民品”两翼齐飞</p><p>①“百年变局”下，国防军工确定性高成长，“备战&#x2F;2027&#x2F;建设与第二大经济体相称的强大国防”是既定方向，2021年大额合同负债彰显“十四五”高景气；</p><p>②未来几年，国防军工资产证券化、核心军品重组上市预计将掀起新一轮高潮，关注中船集团、航天科技、中电科、中航工业、航天科工、兵器工业等集团重组进程；</p><p>③中国坦克&#x2F;无人机&#x2F;教练机&#x2F;战斗机等具备全球竞争力，外贸需求逐步崛起。国产大飞机&#x2F;民用航空发动机等产业链也在逐步成长。[图片]</p><p>推荐基本面抢，业绩向好的中航西飞，航发动力，洪都航空，中航沈飞，内蒙一机，紫光国微，中航光电，中航高科，航发控制，西部超导，中国海防。看好航发科技，中航机电，中国船舶，中瓷电子等</p><h3 id="华泰证券：计算机板块一季报前瞻，智能汽车、工业软件、金融IT等方向高增长值得期待"><a href="#华泰证券：计算机板块一季报前瞻，智能汽车、工业软件、金融IT等方向高增长值得期待" class="headerlink" title="华泰证券：计算机板块一季报前瞻，智能汽车、工业软件、金融IT等方向高增长值得期待"></a>华泰证券：计算机板块一季报前瞻，智能汽车、工业软件、金融IT等方向高增长值得期待</h3><p>【本文来自持牌证券机构，不代表平台观点，请独立判断和决策】</p><p>一季报来临，投资者普遍关注高增长的赛道。华泰证券研报系统的梳理了计算机板块相关细分方向的业绩预测供参考。</p><p>1）智能汽车</p><p>高景气度有望持续，汽车软件迎发展机遇。</p><p>随着汽车智能化持续推进，2021年智能汽车板块收入及业绩均实现高速增长。我们认为，汽车软件有望随着汽车智能化进程的推进加速发展。2022年，新能源车渗透率有望进一步提升，汽车电子架构的变革或将进一步深入，22Q1智能汽车板块下游需求有望维持在较高水平。</p><p>2）工业软件</p><p>21年工业软件企业收入同比增速集中在35%-45%之间，表现出下游需求的强劲。</p><p>我们认为，工业软件的下游需求有望持续，22Q1板块收入增速或将维持在30%以上，主因：1）21年中国工业生产增加值快速恢复，为工业企业IT需求奠定基础；2）疫情加快了工业企业数字化改造进度；3）我们认为，中国工业制造龙头企业对国产工业软件的采购意愿在逐步增加。</p><p>3）云计算</p><p>渗透率继续提升，IaaS拐点+SaaS高增。</p><p>我们认为，在这一轮云IaaS需求周期中，中国云基础设施需求的影响因素包括：1）互联网&#x2F;云IaaS大厂的需求，2）宏观经济增速，3）企业数字化转型的力度，4）新应用的崛起。21年互联网企业经过政策约束之后，22年有望进入业务稳定期，或将逐步迎来底层算力需求拐点。云SaaS领域，企业上云的节奏仍在逐步推进中，疫情的持续坚定企业上云的决心。</p><p>4）网络安全</p><p>收入普遍增长良好，成本端短期承压。 </p><p>网络安全板块2021年收入取得快速增长，但是由于2021年网安公司员工数量快速扩张，成本端压力上升明显，导致利润端短期承压，扣非净利润普遍下滑。我们认为随着低基数效应的消失，以及前置投入压力的边际下降，2022年相关上市公司利润率有较大的可能性实现恢复。预计22Q1网络安全板块收入端能够实现较快增长，但短期利润端仍有一定压力。</p><p>5）医疗IT</p><p>疫情下收入实现较快增长，多数公司利润同步增长。</p><p>由于2020年疫情爆发以来，下游客户的主要精力集中在抗疫方面，IT投入的招标和确认受到一些影响，医疗IT公司在拿单端普遍承压。展望2022年，如果抗疫取得阶段性成果，客户重心会重新向IT投入倾斜，带来中期加速增长的机会。预计22Q1收入端能够实现平稳增长，利润端同步增长。</p><p>6）基础软件</p><p>政策驱动下2022年国产替代进程有望加快。</p><p>2021年基础软件板块归母净利润下滑主要受板块内企业研发投入加大、实施股权激励等因素影响。展望2022年，在国家产业政策驱动下，基础软件领域的国产替代进程有望加快，预计22Q1板块收入将加速增长。</p><p>7）金融科技</p><p>行业有望继续维持景气向上态势。</p><p>1）资管&#x2F;券商IT：展望2022年，我们认为资本市场改革将继续深化，财富管理行业仍将保持快速发展，资管&#x2F;券商IT行业仍将维持景气态势。2）银行IT：展望2022年，我们认为，银行IT行业仍将维持景气态势：一是2022年金融信创试点范围将进一步扩大；二是银行数字化转型有望加速推进。</p><p>8）人工智能</p><p>如何盈利仍然是多数AI企业面临的首要问题</p><p>人工智能板块目前只有海康威视、虹软科技等少数公司具备盈利能力，多数公司尚处亏损。展望2022年，我们认为随着算法进步、企业智能化转型、AI应用规模化落地、细分领域渗透率提升，AI板块收入或将迎来高增长。</p><p>根据已披露的 AI 企业财务数据来看，目前主要有 AI+安防&amp;政企领域的海康威视(002415CH)、智能手机&amp;智能驾驶领域的虹软科技(688088 CH)具备盈利能力，其余公司大多仍处于亏损状态，陷入“融资-研发-营销-亏损-再融资”的循环是行业普遍面临的窘境。</p><p>相关个股</p><ul><li>智能汽车：四维图新，千方科技，东软集团</li><li>工业软件：中控技术，柏楚电子，宝信软件</li><li>云计算：浪潮信息，中科曙光，深信服，广联达</li><li>网络安全：绿盟科技，启明星辰，安恒信息</li><li>医疗IT：卫宁健康，创业慧康，久远银海</li><li>证券，银行IT：恒生电子，东方财富，同花顺，长亮科技</li></ul><h2 id="个股"><a href="#个股" class="headerlink" title="个股"></a>个股</h2><h3 id="国邦医药（新冠原料药），价格不高"><a href="#国邦医药（新冠原料药），价格不高" class="headerlink" title="国邦医药（新冠原料药），价格不高"></a>国邦医药（新冠原料药），价格不高</h3><p>无论是辉瑞、盐野义还是国内仿制的广生堂，其特效药都是由3CL蛋白酶抑制剂组成，SM1（环谷氨酰胺类似物）是合成多个3CL新冠口服药物分子的关键中间体，按照每1亿疗程原料需求量300吨计算SM1的质量比约1：1，侧SM1需求量为300吨。硼氢化钠是SM1合成还原的优先试剂，国内一直以国邦为主导的供应格局，国内的江苏宏梓、宁夏百斯特两个同行生产线规模都较小。公司目前液体硼氢化钠产能为60000吨，固体硼氢化钠产能为4000吨，能满足市场的充分供应。</p><h3 id="神工股份"><a href="#神工股份" class="headerlink" title="神工股份"></a>神工股份</h3><p>这家半导体级单晶硅材料龙头订单需求大幅增加，国内8英寸硅片产品供货持续紧张，公司募投项目产品已进入第二阶段送样；神工股份2月期间接待多家机构电话调研，2021年公司实现营业总收入47,401.19万元，同比增长146.76%；实现归属于母公司所有者的净利润22,023.49万元，同比增长119.63%；实现归属于母公司所有者的扣除非经常性损益的净利润21,600.44万元，同比增长140.96%。</p><p>公司是具备“从晶体生长到硅电极完成品制造”完整能力的一体化厂商，拥有全球领先的大直径单晶硅材料晶体制造技术，是海外刻蚀机原厂硅电极产品的上游材料供应商。2021年全球集成电路产业蓬勃发展，景气度持续提升，市场需求旺盛。受此影响，公司刻蚀机用大直径单晶硅材料订单需求大幅增加。</p><p>此外，公司8英寸轻掺低缺陷硅片产品对标日本信越公司生产的S2硅片。目前国内8英寸轻掺低缺陷硅片主要依赖海外进口，随着本土化需求增长，公司将迎来更多发展机遇。据悉，海外主流硅片厂商新增产能主要集中12英寸产品，8英寸产品产能保持不变甚至减少。国内主流集成电路制造厂商持续扩产8英寸制程，使得8英寸轻掺低缺陷硅片产品供货持续紧张。公司目前已经取得国内某集成电路制造厂商的积极反馈，进入第二阶段送样；同时取得国内主流IC大厂的入场券，完成了实质性的规格、技术探讨，正在准备送样阶段。</p><p>浙商证券分析师认为，公司作为国内半导体级单晶硅材料龙头，行业景气度滞后于晶圆代工厂投产进度，因此景气周期仍在前期阶段，硅材料&#x2F;硅电极业务成长确定性较强，未来随着景气度的持续改善，有业绩持续超预期的可能性。</p><p>A股相关上市公司中，宏微科技拥有研发设计市场主流IGBT和FRED芯片的能力，产品涵盖IGBT、FRED、MOSFET芯片及单管产品100余种，IGBT、FRED、MOSFET、整流二极管及晶闸管等模块产品400余种。江丰电子超高纯金属溅射靶材产品已应用于世界著名半导体厂商的先端制造工艺，在7纳米技术节点实现批量供货，应用于5纳米技术节点的部分产品评价通过并量产。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题材&quot;&gt;&lt;a href=&quot;#题材&quot; class=&quot;headerlink&quot; title=&quot;题材&quot;&gt;&lt;/a&gt;题材&lt;/h2&gt;&lt;h3 id=&quot;网络安全&quot;&gt;&lt;a href=&quot;#网络安全&quot; class=&quot;headerlink&quot; title=&quot;网络安全&quot;&gt;&lt;/a&gt;网络安全&lt;/h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>分享-20220315</title>
    <link href="https://www.memestarter.top/2022/03/15/%E5%88%86%E4%BA%AB-20220315/"/>
    <id>https://www.memestarter.top/2022/03/15/%E5%88%86%E4%BA%AB-20220315/</id>
    <published>2022-03-15T13:31:29.000Z</published>
    <updated>2022-03-15T14:43:26.372Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>20210901 三线城市也能做 SaaS 公司<br><a href="https://61.life/2021/901">https://61.life/2021/901</a></p><blockquote><p>内容没啥实质内容，但是这个现象说明一个值得思考的问题。</p></blockquote></li><li><p>关于教育行业变化的思考 - 写在创业 9 周年<br><a href="https://blog.devtang.com/2021/08/30/thinking-of-education-industry-change/">https://blog.devtang.com/2021/08/30/thinking-of-education-industry-change/</a></p></li><li><p>当你通过叙事，而预测到未来<br><a href="http://gtdstudy.com/post/narrativeeconomics/">http://gtdstudy.com/post/narrativeeconomics/</a></p><blockquote><p>原来meme就是叙事经济</p></blockquote></li><li><p>诡辩术-修辞的操纵，逻辑的谬误<br><a href="https://www.netdoge.com/archives/13.html">https://www.netdoge.com/archives/13.html</a></p><blockquote><p>有点意思</p></blockquote></li><li><p>分压器是什么，详解分压器电路基本原理<br><a href="https://www.labno3.com/2021/08/18/basic-guide-to-voltage-dividers/">https://www.labno3.com/2021/08/18/basic-guide-to-voltage-dividers/</a></p><blockquote><p>我看明白了分压器的原理和电路，但是没有太懂得里边举的例子</p></blockquote></li><li><p>Google 搜索新手指南<br><a href="https://seo.g2soft.net/">https://seo.g2soft.net/</a></p><blockquote><p>如果你是一个非常非常新的用户，一直都是作为 Google 搜索的用户来使用 Google 的，现在第一次作为站长，或者企业网站的负责人来考虑网站优化和网站推广，以及 SEO，SEM 等等，那么下面这些就是写给你看的了。</p></blockquote></li></ul><p>新手和专家的区别以及如何看待学习<br><a href="https://kaopubear.top/blog/2021-08-12-pragmatic-thinking-and-learning/">https://kaopubear.top/blog/2021-08-12-pragmatic-thinking-and-learning/</a></p><blockquote><p>事实上我们没有任何“空闲”时间。时间不仅像海绵里的水，它更像是硬盘空间，总是会很快被填满。<strong>为一件事情创造时间的说法用词不当，因为时间是无法创造和销毁，时间只能分配。</strong>主动安排你的学习，分配合适的时间，合理地使用时间。</p></blockquote><p>卡片学习法<br><a href="https://yuukoamamiya.github.io/p/zettelkasten/">https://yuukoamamiya.github.io/p/zettelkasten/</a></p><blockquote><p>卡片笔记分成三个步奏：<br>先做临时笔记。这个就是inbox，随便想到什么学到什么都能往里丢，比如说看书的时候划的重点就属于这一类。<br>做文献笔记。先理解你想要摘抄的话的内容，在理解之后自己概括自己复述。<br>做永久笔记。这里其实原文挺语焉不详的，我的理解是思考怎么把前两步做的笔记和已有的笔记用超链接给连接起来。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;20210901 三线城市也能做 SaaS 公司&lt;br&gt;&lt;a href=&quot;https://61.life/2021/901&quot;&gt;https://61.life/2021/901&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;内容没啥实质内容，但是这个现象说</summary>
      
    
    
    
    <category term="分享 - 资源搜集" scheme="https://www.memestarter.top/categories/%E5%88%86%E4%BA%AB-%E8%B5%84%E6%BA%90%E6%90%9C%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>每日股票-20220314</title>
    <link href="https://www.memestarter.top/2022/03/14/%E8%82%A1%E7%A5%A8-20220314/"/>
    <id>https://www.memestarter.top/2022/03/14/%E8%82%A1%E7%A5%A8-20220314/</id>
    <published>2022-03-14T00:40:04.000Z</published>
    <updated>2022-03-14T01:09:35.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="个股"><a href="#个股" class="headerlink" title="个股"></a>个股</h2><h3 id="亨通光电（600487）"><a href="#亨通光电（600487）" class="headerlink" title="亨通光电（600487）"></a>亨通光电（600487）</h3><p>“东数西算+智能电网+海上风电+海洋通信”，公司信息能源产品覆盖100多个国家、订单有望于今年开始释放，分析师测算目前估值仅10倍出头。<br>①国泰君安王彦龙看好公司受益“东数西算”拉动新一轮信息建设，2022年光缆市场规模有望同比增长40%以上，中国移动2021-2022年集采光缆均价同比上涨51.6%，公司占中国移动集采份额高达27%，有望更好享受价格上涨带来的红利；<br>②从海上风电建设节奏看，海缆订单有望在2022年下半年开始逐渐进行陆续释放，公司是国内少有能完整具备500kV海缆技术能力的厂商之一，并拥有多艘海上风机安装和海缆敷设船只，有望成为海洋工程利器；<br>③公司收购华为海洋后，成为跨洋通信网络解决方案的全产业链公司，海底光缆系统是全球互联互通重要载体，目前有将近40%的系统或海缆即将进行退网或者替换，有望迎来新的建设周期；<br>④王彦龙预计2021-2023年公司归母净利润预测为15.33&#x2F;24.01&#x2F;28.88亿元，同比增长44%&#x2F;57%&#x2F;20%，对应PE为21.40&#x2F;13.67&#x2F;11.36倍，给予公司2022年19倍PE估值，对应股价19元（11日收盘价13.89元）；⑤风险提示：海电缆竞争加剧、原材料成本波动。</p><h3 id="国联水产-预制菜"><a href="#国联水产-预制菜" class="headerlink" title="国联水产(预制菜)"></a>国联水产(预制菜)</h3><p>这家海洋食品企业集全球采购、精深加工、食品研发于一体，预制菜品业务已形成规模，与永辉超市、盒马鲜生、山姆会员店等建立长期合作关系；<br>国联水产于3月3日接待机构调研时表示，公司致力于成为全球最具影响力的海洋食品企业，是国内少数具备全球采购、精深加工、食品研发于一体的海洋食品企业，近年来产品结构逐步从初加工水产品为主向以预制菜品、水产品精深加工为主的餐饮食材和海洋食品转型，深度布局预制菜品市场。</p><p>公司预制菜品的发展已具备一定规模，公司预制菜品主要包括水煮、裹粉、米面、调理、火锅烧烤等系列。公司与全球知名西式快餐连锁企业、半天妖餐饮、永辉超市、大张超市、盒马鲜生、山姆会员店、叮叮懒人菜等建立了长期合作关系。</p><p>公司构建了以“龙霸”、“小霸龙”等系列品牌的产品体系，是行业内较早进入预制菜品产业领域的生产企业之一。公司持续通过C端进行公司品牌塑造，形成线上种草，线下拔草、商超联动的综合营销格局。</p><h3 id="贵州三力-中药"><a href="#贵州三力-中药" class="headerlink" title="贵州三力(中药)"></a>贵州三力(中药)</h3><p>这家贵州本地中药小龙头参与德昌祥重整快速落地，省内唯一百年老字号药企将纳入上市公司体系，产品线快速扩张；贵州三力于3月10日接待本月第二次机构调研，公司开喉剑喷雾剂在2016年以后开始布局全终端销售。截止2021年，开喉剑（儿童型）销售占比约为75%左右，开喉剑约为20%左右，其中医院端占比约为60%，其余为二、三终端。开喉剑（儿童型）目前医院端覆盖率较高，二、三终端还有较大的空间可以挖掘；而开喉剑由于是19年才纳入医保，在各终端均有较大的开发空间。</p><p>2022年2月6日公司发布公告，拟成为德昌祥的破产重整投资人，一次性出资2.32亿元取得德昌祥95%股权。德昌祥是贵州省内唯一一家百年老字号药企，是家喻户晓的贵州老字号、中国驰名商标，其深厚的历史、文化底蕴，将为上市公司带来显著的品牌效应。</p><p>华安证券分析师认为，德昌祥前身为贵阳中药厂，具有众多优质药品批文。德昌祥目前共有药品批准文号69个，其中独家品种9个，医保品种41个，其“龙凤至宝丹传统中药制作技艺”妇科再造丸和杜仲补天素丸更是省级非物质文化遗产。</p><p>贵州三力的核心品种为开喉剑喷雾剂系列，产品结构相对集中。而德昌祥的产品线丰富，涵盖妇科、男科、儿科、呼吸科等多个科室，并有大量OTC品种，有力的补充了贵州三力的产品线。同时贵州三力经过多年发展积累的全国数千家商业公司、数千家等级医院、数万家药店、诊所及基层医疗机构资源，可以快速提升德昌祥的市场占有率。</p><h2 id="新冠检测"><a href="#新冠检测" class="headerlink" title="新冠检测"></a>新冠检测</h2><p>3月12日，国家药监局网站发布的医疗器械批准证明文件(变更)待领取信息显示，由万孚生物、华大基因子公司深圳华大因源医药科技有限公司、北京金沃夫生物工程科技有限公司、南京诺唯赞医疗科技有限公司4家公司研发的4款新冠抗原检测试剂盒通过了药监局的注册信息变更。加上3月11日，国家药监局公布的北京华科泰生物的新冠抗原产品自测应用申请变更。自此，五款新冠抗原自测产品正式上市。<br>相关公司：万孚生物、华大基因，东方生物，九安医疗</p><h2 id="题材"><a href="#题材" class="headerlink" title="题材"></a>题材</h2><p>装备制造（凯美特气、华测检测、乐惠国际）<br>①“增强制造业核心竞争力”首次写入政府工作报告，并提出着力培育“专精特新”企业，与去年“保持制造业比重基本稳定”的定位相比方向更加明晰；<br>②浙商证券邱世梁认为专精特新是国家战略，其中机械设备企业是主力军，并且机械板块专精特新上市公司市值普遍较小，盈利能力优异；<br>③机械行业涉及的专精特新重点领域众多，邱世梁根据子行业的市场空间、行业增速及所在公司整体的商业模式情况，精选出工业机器人、核心零部件、工业气体、检测检验、消费升级等五大核心赛道，以及潜在优质专精特新“小巨人”企业；<br>④风险因素：基建地产投资不及预期、海内外新冠疫情超预期风险。</p><p>专精特新作为国家战略，聚焦高端制造，机械设备企业是主力军2021年7月30日的中央政治局会议首次将“发展专精特新中小企业”提升到国家战略高度，北交所的设立更进一步为专精特新中小企业迎来了资本支持新平台。根据邱世梁的统计，机械行业共有专精特新上市企业共计91家，占比高达26%，上市公司数量在各板块中排名第一，并且机械板块专精特新上市公司市值普遍较小，盈利能力优异。<br>精选机械行业“专精特新”领域五大核心赛道邱世梁根据子行业的市场空间、行业增速及所在公司整体的商业模式情况，精选出五大核心赛道。（1）工业机器人：预计到2025年中国工业机器人市场累计增量市场空间有望超1000亿元。<br>（2）核心零部件：零部件企业具有需求广阔、业务可靠性好、商业模式复制性强等特征，看好齿轮、减速器及FA零部件等领域。<br>（3）工业气体：中国工业气体近2000亿元市场，其中特种气体市场自主品牌占有率仅10%，潜力巨大。<br>（4）检测检验：检测行业空间大，需求来源广泛、稳定性强，受宏观经济影响较小，行业龙头有望通过“内生外延”的方式实现全国扩张，市占率持续提升。 <br>（5）消费升级：近年来国内及欧美消费升级趋势带动了新兴产业的大发展，企业通过产品升级和转型运营两大路径，可以打开数倍于原市场的成长空间。</p><p>精选装备制造业“专精特新”潜在优秀标的目前，已有大批高端制造代表公司已成为了专精特新小巨人企业中的“排头兵”，其大多具有以下特点。（1）劳动力成本优势+工程师红利，国产替代加速进行。<br>（2）深耕细分赛道+专注核心产品，市场份额及龙头地位不断提升。</p><p>邱世梁基于已入选名单中机械行业上市公司特点和专精特新“小巨人”培育条件两大方面，精选出机械板块潜在优质专精特新“小巨人”企业。<br>重点公司包括：宏华数科、凯美特气、乐惠国际、双环传动、中兵红箭、华测检测、春风动力、绿地谐波、华锐精密、欧科亿、弘亚数控、巨星科技、国茂股份、青鸟消防、东睦股份等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;个股&quot;&gt;&lt;a href=&quot;#个股&quot; class=&quot;headerlink&quot; title=&quot;个股&quot;&gt;&lt;/a&gt;个股&lt;/h2&gt;&lt;h3 id=&quot;亨通光电（600487）&quot;&gt;&lt;a href=&quot;#亨通光电（600487）&quot; class=&quot;headerlink&quot; title=&quot;亨</summary>
      
    
    
    
    <category term="投资 - 股票" scheme="https://www.memestarter.top/categories/%E6%8A%95%E8%B5%84-%E8%82%A1%E7%A5%A8/"/>
    
    
    <category term="股票" scheme="https://www.memestarter.top/tags/%E8%82%A1%E7%A5%A8/"/>
    
    <category term="投资" scheme="https://www.memestarter.top/tags/%E6%8A%95%E8%B5%84/"/>
    
  </entry>
  
  <entry>
    <title>每日股票-20220311</title>
    <link href="https://www.memestarter.top/2022/03/11/%E8%82%A1%E7%A5%A8-20220311/"/>
    <id>https://www.memestarter.top/2022/03/11/%E8%82%A1%E7%A5%A8-20220311/</id>
    <published>2022-03-11T00:21:49.000Z</published>
    <updated>2022-03-14T01:10:10.808Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>资料只是自己搜集，用于个人笔记记录。不作为投资建议，请谨慎使用。</p></blockquote><h2 id="个股"><a href="#个股" class="headerlink" title="个股"></a>个股</h2><h3 id="“新冠抗体-抗原-试剂盒”需求或超预期，这家公司掌握检测试剂、抗体、疫苗生产中不可或缺的关键原料，下游直销药企数量超1000家；"><a href="#“新冠抗体-抗原-试剂盒”需求或超预期，这家公司掌握检测试剂、抗体、疫苗生产中不可或缺的关键原料，下游直销药企数量超1000家；" class="headerlink" title="“新冠抗体+抗原+试剂盒”需求或超预期，这家公司掌握检测试剂、抗体、疫苗生产中不可或缺的关键原料，下游直销药企数量超1000家；"></a>“新冠抗体+抗原+试剂盒”需求或超预期，这家公司掌握检测试剂、抗体、疫苗生产中不可或缺的关键原料，下游直销药企数量超1000家；</h3><p>百普赛斯（301080）：2022-03-10收盘价格172.01 ，市值137亿<br>①东吴证券朱国广看好重组蛋白是诊断试剂研发生产过程不可或缺的关键生物试剂，随着新冠抗体药物及检测试剂产品需求爆发，重组蛋白行业迎来显著增量，根据Frost&amp;Sullivan预测，中国生物科研试剂市场规模将由2020年的159亿元增长至2024年的260亿元；<br>②公司是国内重组蛋白龙头，拥有新冠病毒抑制剂筛选、中和抗体筛选、抗体滴度检测、抗原检测等产品，公司单个产品的应用检测数据均值高达3.09（国内同业公司仅1.38或0.91），产品复购率维持高位；<br>③公司以重组蛋白为锚，打造“研发+诊断”闭环，涵盖分子互作分析检测服务与抗独特型抗体开发服务，已与全球Top20生物医药企业或机构建立了良好的合作关系；<br>④朱国广预计公司2021-2023年归母净利润分别为1.77&#x2F;2.66&#x2F;3.72亿元，同比增长52.39%&#x2F;50.56%&#x2F;39.95%，对应PE为74&#x2F;49&#x2F;35倍；<br>⑤风险提示：新产品研发不及预期、市场竞争加剧等。</p><h3 id="菲律宾重启核能计划，能源危机下如何实现能源独立之路成为最确定的投资主线之一，这家核电龙头背靠央企、2022年业绩将大幅增长。"><a href="#菲律宾重启核能计划，能源危机下如何实现能源独立之路成为最确定的投资主线之一，这家核电龙头背靠央企、2022年业绩将大幅增长。" class="headerlink" title="菲律宾重启核能计划，能源危机下如何实现能源独立之路成为最确定的投资主线之一，这家核电龙头背靠央企、2022年业绩将大幅增长。"></a>菲律宾重启核能计划，能源危机下如何实现能源独立之路成为最确定的投资主线之一，这家核电龙头背靠央企、2022年业绩将大幅增长。</h3><p>中国核电（601985）：2022-03-10收盘：7.8 市值1550亿<br>①俄乌冲突的不断升级，对全球能源稳定供应带来了巨大冲击，东北证券首席经济学家付鹏最新观点认为，“这次俄乌后未来世界十年，一个最确定的投资主线就是‘全球能源安全下的如何实现能源独立之路’ ”；<br>②菲律宾总统杜特尔特日前签署一项行政命令，宣布政府将核能纳入菲律宾能源结构的立场；<br>③国信证券黄秀杰看好公司在2022年业绩将大幅增长，远期具有持续成长性，“双碳”助力核电量价齐升，公司为中核集团旗下唯一核电及新能源上市运营商；<br>④黄秀杰预计公司2021-23年每股收益0.44&#x2F;0.68&#x2F;0.74元（前值0.45&#x2F;0.56&#x2F;0.63元），利润增速分别为34%&#x2F;54%&#x2F;9%，对应PE分别为17&#x2F;11&#x2F;10倍，给予合理估值区间10.83-11.38元，当前股价仅8.24元；<br>⑤风险提示：新能源、核电装机增速不达预期，电价上涨不及预期，利用率下滑。</p><h3 id="头部券商抱团调研这家风机小龙头，公司2021年产品销量逆势增长，新增订单创历史新高，跻身国内风机厂商第一梯队；"><a href="#头部券商抱团调研这家风机小龙头，公司2021年产品销量逆势增长，新增订单创历史新高，跻身国内风机厂商第一梯队；" class="headerlink" title="头部券商抱团调研这家风机小龙头，公司2021年产品销量逆势增长，新增订单创历史新高，跻身国内风机厂商第一梯队；"></a>头部券商抱团调研这家风机小龙头，公司2021年产品销量逆势增长，新增订单创历史新高，跻身国内风机厂商第一梯队；</h3><p>运达股份于3月8日接待中金公司、国泰君安等多家券商电话调研，公司对于海上风电非常重视，将基于浙江本省的地域优势，加快发展海上风电。公司于2021年9月底发布”海风”系列9MW海鹞平台WD225-9000抗台型海上机组，该平台机型已取得权威机构的认证，2022已年具备批量化交付能力。</p><p>新能源电站投资运营业务是公司未来发展的重要板块。2021年公司取得列入省级能源部门风光开发指标166万千瓦，为公司后续新能源电站业务的快速成长奠定了坚实基础。2022年公司将加大加快新能源电站的投资进程，未来作为公司盈利能力的支撑。</p><p>2022年3月7日公司发布2021年年报，全年实现营业收入160.41亿元，同比增长39.75%，归母净利润4.90亿元，同比增长183.13%。根据国家能源局统计，2021年国内陆上风电新增装机仅为30.7GW，同比下滑超过50%，公司风机销量则逆势增长51%至5.46GW。</p><p>公司2021年新增订单12.8GW，创历史新高，累计在手订单12.9GW，是2021年出货量的2.36倍。根据此前中国风电新闻网整理公开市场招标数据，运达股份2021年中标量位居行业第4位，市场份额约12.6%，仅次于传统三巨头（金风、远景、明阳）。</p><p>安信证券分析师认为，充沛的在手订单将为公司后续的销量及收入增长提供良好保障，认为公司已跻身国内风机厂商第一梯队。</p><p>A股相关上市公司中，泰胜风能主要产品为自主品牌的陆上风电塔架和海上风电塔架、导管架、管桩、升压站平台及相关辅件、零件，是陆上及海上风力发电机组的主要部件之一。天能重工是国内风机塔架生产的龙头企业之一，陆上风机塔架的产能约为35万吨，海上风机塔架产能约为28万吨。</p><h2 id="题材"><a href="#题材" class="headerlink" title="题材"></a>题材</h2><h3 id="光伏逆变器"><a href="#光伏逆变器" class="headerlink" title="光伏逆变器"></a>光伏逆变器</h3><p>天风证券：为什么分布式光伏能在无补贴时代脱颖而出？当前分布式光伏产业链有什么投资机会？<br>2021年是国内分布式“大年”，也是户用光伏享受国家补贴的最后一年。2022年，在无补贴时代下，天风证券依然看好国内分布式光伏赛道，原因在于分布式已具备依靠市场力实现高增的条件——盈利水平高+成长空间大+增长动力强。</p><p>1）为什么看好无补贴时代下的国内分布式光伏赛道?</p><p>分布式已具备依靠市场力实现高增的条件——盈利水平高+成长空间大+增长动力强。</p><p>①盈利高：项目经济性、产业链盈利水平强于集中式（户用IRR可高5pct）。</p><p>分布式经济性强于集中式。21年户用、工商业项目IRR比集中式高5.3%、1.9%，若采取“自发自用、余额上网”模式，IRR可进一步提升。</p><p>产业链主要环节（组件、逆变器、安装商）盈利水平也高于集中式。分布式组件、逆变器毛利率较集中式高1-4%、4%，安装商净利率较集中式高6.1%。</p><p>②空间大：21年户用、工商业屋顶光伏渗透率仅为1.4%、4.6%。同时，预计2025年户用、工商业光伏渗透率可稳步提升至5.3%、8.3%，对应户用22&#x2F;25年新增装机分别约30&#x2F;45GW，工商业新增装机分别约14&#x2F;27GW。</p><p>③增长动力强：</p><p>经济性是核心驱动力：各地经济性持续提升，多省具备增长潜力。</p><p>政策落地是加速器：整县推进合作开发调动投、建双方积极性，能耗双控、浮动电价刺激工商业装机需求。</p><p>新兴商业模式扩大分布式受众：融资租赁、屋顶租赁降低屋顶业主投资门槛。</p><p>2）分布式产业链上有什么投资机会？</p><p>①首先考虑市场空间&amp;盈利水平（影响利润空间），其次考虑投入产出比（影响资金回笼速度），分布式产业链各环节投资价值大致排序为：安装商&gt;逆变器&gt;组件。</p><p>首先，根据市场空间&amp;盈利水平对三大环节进行比较。</p><p>从市场空间看，安装商&gt;组件&gt;逆变器。预计22年组件、逆变器、安装商在国内分布式市场空间分别为788、105、1769亿元，20-25年CAGR为30%、35%、27%。</p><p>从盈利水平看，逆变器&gt;安装商&gt;组件。20年组件、逆变器、安装商环节扣非净利率分别为6.7%、14.3%、10.9%，若以此粗略测算各环节利润空间，22年三大环节利润空间分别为40.7、11.5、187.6亿元。</p><p>综合来看，安装商环节市场空间最大、盈利水平相对较高、利润空间最大，投资价值较高。</p><p>其次，根据投入产出比对组件、逆变器环节进行比较。</p><p>从投入产出比看，逆变器&#x3D;安装商&gt;组件。20年逆变器环节ROIC、固定资产周转率分别较组件环节高11%、5%，且固定资产初始投入少（逆变器固定资产投资0.3亿元&#x2F;GW左右，组件为2亿元&#x2F;GW左右）。安装商若通过系统集成、EPC、电站开发、运维获取收入，固定资产初始投入也较少。</p><p>综合来看，尽管逆变器在国内分布式市场利润空间小于组件，但市场空间增长最快、成长性最强，且资金回笼速度明显高于组件环节，因此投资价值也较好。</p><p>②安装商环节：竞争格局未稳定，短期市场集中度有望明显提升。</p><p>目前国内分布式市场集中度较低，2021年上半年CR4约为37%（正泰、天合、创维、中来）。由于整县推进采取规模化开发（单县开发规模可达140MW）、央国企签约县数多且代开发意愿强，预计短期内具备GW级全生命周期管理能力（开发、设计、施工、运维）的大型安装商更受央国企业青睐，市占率有望明显提升。</p><p>在多种竞争要素加持下，除了自持&#x2F;向农户出售电站，头部安装商纷纷与央国企开展合作，形成更多元的盈利模式，主要包括:前期获取一次性开发&amp;建设收入（3.5-4.01元&#x2F;w）、后期提供售后运维获取长期运维收入（0.04元&#x2F;w&#x2F;年）。</p><p>③逆变器、组件环节：强者恒强，市场加速向头部企业集中。</p><p>逆变器、组件属于充分竞争行业，市场集中度较高，2021年国内分布式组件CR5约60%（隆基、天合、晶澳、阿特斯、晶科），组串式逆变器优势企业阳光、锦浪、固德威等在国内分布式的市场份额也较高，仅锦浪一家市占率已达31%。</p><p>分布式客户短期化、分散化、非标化，品牌渠道、客制化能力（组件版型包含60&#x2F;66&#x2F;72，各品牌逆变器型号数&gt;8）是逆变器、组件头部企业的共性竞争要素，同时，C端客户对光伏了解不专业，重视品牌背书，未来综合实力强的头部企业更受欢迎。长期来看，国内对分布式逆变器组件级关断功能的关注将利好微逆方案（组件级关断功能最优）。</p><p>重点关注市场空间大，盈利水平高的安装环节，建议关注，户用：正泰电器，中来股份’工商用：苏文电能，芯能科技  。推荐投入产出比高的逆变器环节：组串式：阳光电源，锦浪科技，固德威  ；微型逆变器：禾迈股份</p><h3 id="中信建投：一体化压铸产业趋势明显加速，仅国内车身件市场就超千亿"><a href="#中信建投：一体化压铸产业趋势明显加速，仅国内车身件市场就超千亿" class="headerlink" title="中信建投：一体化压铸产业趋势明显加速，仅国内车身件市场就超千亿"></a>中信建投：一体化压铸产业趋势明显加速，仅国内车身件市场就超千亿</h3><p>中信建投认为，车身结构件一体化压铸是汽车轻量化和降本提效的必然选择，行业趋势明确。中信建投详细梳理了行业各环节市场空间，和技术壁垒。</p><p>1）车身结构件一体化压铸技术产业趋势明确</p><p>车身结构件一体化压铸是汽车行业轻量化及降本提效的必然选择，由特斯拉引领，蔚小理等新势力跟进，福特、沃尔沃、大众等传统主机厂逐渐从犹豫到转型。</p><p>2021年由特斯拉、文灿等率先突破后地板一体化压铸工艺，2022年受益于后地板产品量产、前机舱产品突破、6000吨以上大压机产能上量以及产业链工艺和技术进步，产业化趋势将明显提速。</p><p>2）市场空间：车身结构件是千亿大赛道，部件＞材料＞压机＞模具</p><p>预计到2025年，国内一体化压铸车身结构件&#x2F;大型压铸机&#x2F;免热处理铝合金&#x2F;大型模具市场空间分别为376&#x2F;50&#x2F;161&#x2F;11亿，对应GAGR分别为160%&#x2F;90%&#x2F;139%&#x2F;131%；</p><p>产业链各环节均有翻倍及以上增速，其中一体化压铸车身结构件空间最大且增速最快；</p><p>远期来看，一体化压铸车身结构件市场空间最大，全球&#x2F;中国市场空间分别为6100&#x2F;1830亿元，大型压铸机全球&#x2F;中国市场空间分别为218&#x2F;65亿元，免热处理铝合金材料全球&#x2F;中国市场空间分为别2500&#x2F;750亿元，模具全球&#x2F;中国市场空间分别为182.5&#x2F;54.8亿元。</p><p>3）格局：部件环节本土主导，压机供不应求，免热材料逐步本土突破</p><p>部件环节目前主要以本土企业为主，文灿在订单、工艺、布局层面相对领先，虽然有特斯拉等主机厂自制，但长期看随产业链成熟后我们认为仍然是Tier1主导；</p><p>压机环节目前供不应求，力劲在交付、订单及在研项目层面较为领先，布勒与海天均有6000吨压机交付；</p><p>材料环节通常材料厂商或科研院所与Tier（或主机厂）共同研发，前期美国铝业已实现批量供应，本土企业立中集团已有产品量产；</p><p>模具环节，广东型腔已获得较多Tier1（或主机厂）订单，文灿雄邦具备自制能力。</p><p>4）技术壁垒：部件＞模具＞设备＞材料</p><p>中信建投认为技术壁垒部件＞模具＞设备＞材料，一体化压铸车身结构件具备大尺寸、薄壁、结构复杂等特点，对强度、延伸率等要求较高，需用免热处理材料、大型压铸机及模具、高真空压铸工艺等，具备较多know-how，同时一体化使得资产壁垒显著提升。</p><h3 id="浙商证券：一图梳理机械板块潜在优质专精特新“小巨人”企业"><a href="#浙商证券：一图梳理机械板块潜在优质专精特新“小巨人”企业" class="headerlink" title="浙商证券：一图梳理机械板块潜在优质专精特新“小巨人”企业"></a>浙商证券：一图梳理机械板块潜在优质专精特新“小巨人”企业</h3><p>浙商证券：一图梳理机械板块潜在优质专精特新“小巨人”企业。浙商证券分析指出，机械设备企业是专精特新的主力军，机械行业共有专精特新上市企业共计91家，占比高达26%，上市公司数量在各板块中排名第一。</p><p>机械行业涉及的专精特新重点领域众多，根据子行业的市场空间、行业增速及所在公司整体的商业模式情况：精选出工业机器人、核心零部件、工业气体、检测检验、消费升级等五大核心赛道。再从公司所属赛道景气度、公司成长性以及盈利能力等维度精选出机械板块潜在优质专精特新“小巨人”企业。</p><p><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220311084723.png" alt="20220311084723"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;资料只是自己搜集，用于个人笔记记录。不作为投资建议，请谨慎使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;个股&quot;&gt;&lt;a href=&quot;#个股&quot; class=&quot;headerlink&quot; title=&quot;个股&quot;&gt;&lt;/a&gt;个股&lt;/h2&gt;&lt;h3 id</summary>
      
    
    
    
    <category term="投资 - 股票" scheme="https://www.memestarter.top/categories/%E6%8A%95%E8%B5%84-%E8%82%A1%E7%A5%A8/"/>
    
    
    <category term="股票" scheme="https://www.memestarter.top/tags/%E8%82%A1%E7%A5%A8/"/>
    
    <category term="投资" scheme="https://www.memestarter.top/tags/%E6%8A%95%E8%B5%84/"/>
    
  </entry>
  
  <entry>
    <title>每日股票-20220310</title>
    <link href="https://www.memestarter.top/2022/03/10/%E8%82%A1%E7%A5%A8-20220310/"/>
    <id>https://www.memestarter.top/2022/03/10/%E8%82%A1%E7%A5%A8-20220310/</id>
    <published>2022-03-10T01:32:05.000Z</published>
    <updated>2022-03-14T01:15:22.781Z</updated>
    
    <content type="html"><![CDATA[<h2 id="绿电（优选闽东电力，小市值）"><a href="#绿电（优选闽东电力，小市值）" class="headerlink" title="绿电（优选闽东电力，小市值）"></a>绿电（优选闽东电力，小市值）</h2><p>两家公司斥资100亿元投资新能源业务，新能源电力运营商装机速度有望提升。中信建投高兴认为，电力新能源投资是增长的重要抓手，新能源投资主要包括三北地区集中式大基地和中东部地区分布式能源两种形式，广东、福建、浙江、江苏、山东五地海上风电投资重要性也十分突出。新能源电力投资将在我国稳增长浪潮中扮演重要角色，新能源电力运营商装机速度有望获得提升。。 华能国际是华能集团旗下上市公司，中国最大发电公司之一，2021年全年新增控股装机容量为5.23GW，新增风光装机容量为3.20GW。</p><p>新财富上榜分析师、申万宏源刘晓宁认为，在2022年煤电长协电价多省实现20%以上同比涨幅基础上，绿电的绿色价值可实现在煤电电价上的进一步溢价，带来新投产的新能源平价项目收益率大幅提升。综合集团定位、公司质地及当前估值，继续坚定看好绿电板块。 </p><p>闽东电力：主营电力的生产与开发，主要包括水力和风力发电，公司此前与福建屏南、周宁、拓荣、古田4县达成战略合作协议，拟在当地开展分布式光伏发电项目的开发。</p><p>华能国际：是华能集团旗下上市公司，中国最大发电公司之一，2021年全年新增控股装机容量为5.23GW，新增风光装机容量为3.20GW。</p><p>华能水电 ：公布关于2022年新能源业务投资计划公告，2021年公司完成新能源核准（备案）386.8万千瓦，开工建设99万千瓦；2022年，公司拟计划投资50亿元发展新能源项目，计划新开工项目15个，拟投产装机容量130万千瓦。</p><h2 id="中航光电"><a href="#中航光电" class="headerlink" title="中航光电"></a>中航光电</h2><p>“东数西算+5G+新能源车+航空航天”核心器件，这家公司实现在手订单增长300%+、细分领域市占率近80%，分析师预计短期内或迎业绩兑现。<br>中航光电（002179）：①申万宏源韩强看好公司是连接器龙头，目前订单饱满，合同负债+预收账款于2021年第三季度同比增长319.1%，公司或已进入“十四五”提前备货周期；②公司通信连接器业务受益于“东数西算”拉动5G与数据中心建设，占据全球70%市场份额的4大通信设备供应商与公司合作均超过10年，同时汽车电动化浪潮推动高压连接器需求爆发，公司有望成为世界汽车连接器巨头；③“十四五”期间军用连接器需求有望持续高景气，公司在航空连接器领域市占率高达80%，随着武器装备建设向空军倾斜，公司在需求端受益明显；④韩强预计公司2021-2023年归母净利润为19.91&#x2F;27.87&#x2F;37.62亿元，同比增长38.4%&#x2F;39.9%&#x2F;35.0%，对应PE为49&#x2F;35&#x2F;26倍；⑤风险提示：军品业务放量不及预期、民品拓展不及预期、竞争加剧风险等。</p><h2 id="能辉科技（光伏，贵州，68亿市值）"><a href="#能辉科技（光伏，贵州，68亿市值）" class="headerlink" title="能辉科技（光伏，贵州，68亿市值）"></a>能辉科技（光伏，贵州，68亿市值）</h2><p>这家山地光伏龙头获机构抱团调研，公司2021年营收净利润均创历史新高，旗下自持14座分布式电站，开创贵州光伏发电先河；</p><p>能辉科技董事长等公司高管于3月7日接待多家机构调研，公司具有新能源、火力发电、电网设计能力与资质，业务涉及光伏发电、储能微电网、重卡换电等。公司是工商业分布式光伏先行者之一，2011年承接了首批金太阳项目，2012年自行设计投资建成第二批金太阳示范工程。目前自持14座分布式电站，为广大客户提供分布式电站服务。</p><p>公司还是山地光伏技术引领者之一，早期大型地面电站集中在西北地区，进入内地后，公司山地光伏的技术优势就体现出来。公司在2014、2015年的公开招投标中，赢得了贵州第一、二个项目，开创贵州光伏发电先河，优势一直保持至今。</p><p>2021年组件价格高位运行，电站装机在组件价格高位运行、电站装机延迟情况下，公司2021年度实现营业收入5.92亿元，比上年同期增加41.28%，归母净利润1.04亿元，都创了公司发展史上的新高，实现了营收、利润持续稳定的增长。2021年，公司毛利率29.28%，EPC业务毛利率27.17%，表现出在系统集成领域的优势。</p><h2 id="铜牛信息（数据中心，国资委，小市值）"><a href="#铜牛信息（数据中心，国资委，小市值）" class="headerlink" title="铜牛信息（数据中心，国资委，小市值）"></a>铜牛信息（数据中心，国资委，小市值）</h2><p>北京国资旗下唯一互联网数据中心服务商获头部券商独家调研，公司旗下自建运营四个数据中心，客户覆盖政府、金融、互联网等众多行业；铜牛信息于3月7日接待中金公司独家调研，公司是一家集互联网数据中心服务、云服务、互联网接入服务、互联网数据中心及云平台信息系统集成服务、应用软件开发服务为一体的互联网综合服务提供商，在互联网数据中心及相关增值服务、互联网数据中心及云平台信息系统集成等方面具有竞争优势。</p><p>公司客户覆盖政府、金融(内资及外资银行、保险等)、互联网(电子商务、云服务商等)、工业、房地产、文化创意等众多行业，主要包括太极股份、首都信息、首农集团、首开集团、中国邮储银行、北京产权交易所等。</p><p>公司的数据中心主要分布在北京和天津，建设并运营四个数据中心。其中，除国门数据中心外，公司天坛数据中心、CBD数据中心、天津自贸区数据中心均为自建数据中心。</p><p>公司作为北京市国资委旗下唯一一家以互联网数据中心和云服务为主营业务的上市公司，将充分利用国有控股的优势，深耕国有企事业客户市场，为国有企事业客户企业上云及数字化转型行动提供整体云服务解决方案。</p><h2 id="氢能应用"><a href="#氢能应用" class="headerlink" title="氢能应用"></a>氢能应用</h2><p>申万宏源研报分析指出，氢能应用催生千亿储运市场。特别是车载高压储氢瓶成长确定性较大，目前技术已经成熟，受下游燃料电池车的带动，我们认为2030年累计市场空间将突破千亿。<br>1）车载高压储氢瓶迎来黄金十年</p><p>氢气有四大储氢方式，并且氢储运环节发展催生氢能承压设备引来发展契机，车载高压储氢瓶将迎来黄金十年。</p><p>我国氢能源供应中心和消费中心呈逆向分布，在资源上“西富东贫，北多南少”，而在需求上恰恰相反，这就决定了储运氢环节在整个氢能产业链的重要性。</p><p>按照储氢状态来分，储氢方式可以分为气态储氢、液态储氢以及固态储氢，按照具体方式不同，液态储氢又可分为低温液态储氢和有机液态储氢。</p><p>相关的氢能承压设备种类繁多，车载高压储氢瓶成长确定性较大，目前技术已经成熟，受下游燃料电池车的带动，我们认为2030年累计市场空间将突破千亿。</p><p>2）高压气态储氢技术是主流的氢气储运方式</p><p>在目前氢气短距离运输的应用场景下，高压气态储氢技术应用是我国主流的氢气储运方式。</p><p>高压气态储氢是指将氢气压缩在储氢容器中，通过增压来提高氢气的容量，满足日常使用。这是一种低成本、应用广泛，并且灌装和使用操作简单的储氢方式。</p><p>高压气态储氢应用领域主要包括运输、加氢站、燃料电池车：</p><p>①运输端：高压氢气的运输主要指将氢气从产地运输到使用地点或者加氢站。采用汽车运输，设备主要为大型高压无缝气瓶或“K“瓶装氢；</p><p>②加氢站端：加氢站用高压储氢容器是氢储存系统的重要组成部分。目前高压氢气加氢站所用的存储容器多为高强钢制无缝压缩氢气储罐；</p><p>③燃料电池车端：高压气态储氢是目前燃料电池车的主要储氢方式，车载储氢瓶大多使用的是III型和IV型，使用压力主要为35MPa和70MPa。</p><p>碳纤维作为高压储氢瓶的关键材料，随着其国产化替代的进程加速，我国储氢罐将不断提升高压复合储氢罐的承压能力和质量储氢密度，使之向高压力及轻量化的趋势发展。</p><p>长期来看，随着氢能产业的发展，下游应用场景的不断丰富，大规模长距离运氢成为必然，此时高压气氢拖车不具备经济性，管网运输是最好的解决方案。</p><p>3）低温液态储氢是氢储运的未来趋势</p><p>低温液态储氢是氢储运的未来趋势，固态储氢仍处试验阶段，未来有望丰富短距离运氢途径。</p><p>低温液态储氢属于物理储存，是一种深冷的氢气存储技术。目前该技术已有应用，主要集中在航空航天军用领域，民用液氢正处于初期阶段，从无到有。出于液氢自身体积能量很高的原因，在大规模、远距离的氢能储运中具有极低的成本优势，因此液氢的制备和输送在我国发展将成为必然。</p><p>申万宏源研报分析指出，氢能应用催生千亿储运市场。特别是车载高压储氢瓶成长确定性较大，目前技术已经成熟，受下游燃料电池车的带动，我们认为2030年累计市场空间将突破千亿。低温液氢可采用液氢槽车、液氢驳船等方式运输，液氢槽车运输可使用于大规模、中长距离运输（&gt;300km），具有经济性，将在氢能产业发展中期成为主流运输方式，而液氢驳船主要使用远洋运输，跨国贸易。固态储氢材料的应用和输送，目前仍处于实验室阶段，已有示范应用，是未来极具潜力的一种方式，对于燃料电池车的应用场景需抱有想象空间。</p><p>高压储氢极具成长性；建议关注 有这方面能力的 国富氢能 ，中材科技，斯林达，奥洋科技。碳纤维作为高压储氢罐的管检查此类，并且下游丰富的应哟呵哪个场景，有望被提升到新高度。关注 中复神鹰 ，光威复材 。液氢产业链引领突破，液氢制备重要环节，氢气液化设备国产化 关注 中科富海，国富氢能，厚普股份，冰轮股份，深冷股份，中泰股份，嘉华能源，鸿达兴业</p><h2 id="TOPCon-电池-技术"><a href="#TOPCon-电池-技术" class="headerlink" title="TOPCon 电池 技术"></a>TOPCon 电池 技术</h2><p>TOPCon已有经济性优势且将继续放大，2022年将是放量元年。随着光伏电池技术进步，N型电池开始在业内受到更多关注，研究和产业化探索大幅加速，原有电池企业在TOPCon方向也取得较大竞争，预计TOPCon将在今明年开始规模应用，在技术变革的先发红利期，优势企业将有较好的收益。</p><p>1）电池片领域酝酿着新一轮技术进步</p><p>过去十几年间，产业化的主流晶硅电池方案经历了由Al-BSF向PERC的转变，当前PERC效率越来越接近其理论极限，因此N型电池成为更受关注的方向。</p><p>TOPCon在PERC的基础上更换为N型衬底，增加隧穿氧化层及多晶硅层，降低载流子复合，实现效率的显著提升，晶科2021年10月创造的25.4%的效率纪录较PERC高出近2个点。</p><p>而TOPCon也是过去三年唯一实现2个点以上效率提升的主流方案，并且N型TOPCon在衰减率、双面率、温度系数方面也有较大优势。</p><p>2）TOPCon已有经济性优势且将继续放大<br>基于当前效率测算，TOPCon组件功率增益达5-6%，电量增益在4-5%，贡献0.08-0.15元&#x2F;W成本摊薄，实际上目前N型TOPCon电池&#x2F;组件的溢价已达0.1-0.14元&#x2F;W。</p><p>成本端，参考CPIA数据过去3年间TOPCon银浆用量下降20+%、设备投资已降至2亿&#x2F;GW，较PERC的非硅成本增量压缩到0.04-0.08元&#x2F;W，</p><p>考虑N型硅片纯度要求及尚未规模化投产带来的2-3分硅成本加成，电池的成本增加大致在0.06-0.1元&#x2F;W，</p><p>而其面向客户的发电量与BOS成本优势带来的溢价，已经能够完全覆盖该成本增量，考虑TOPCon规模化后的效率提升和成本进一步下降，其相较于PERC的优势将相应的进一步增强。</p><p>3）TOPCon将在今年开始规模推广将在今年开始规模推广</p><p>晶科能源在今年的1、2月份先后投产两条8GW的TOPCon电池产线，拉开了产业化帷幕；</p><p>同时，钧达股份、中来股份等企业都披露了8GW以上的电池扩产计划，预计到明年年初TOPCon产能有望超过40GW，2022年可能就是TOPCon放量的元年。</p><p>TOPCon的核心工艺、主要装备等环节有较高的难度，并且还在较快的迭代，预计领先的企业有望在TOPCon的推广阶段获得比较好的投资回报</p><p>建议关注：晶科能源，中来股份，天合光能；设备方面：捷佳伟创，连城数控，帝尔激光，苏州固锝，帝科股份</p><h2 id="新能源"><a href="#新能源" class="headerlink" title="新能源"></a>新能源</h2><p>国家能源局：推动第一批1亿千瓦规模风、光基地项目尽快建成投产 加快第二批基地项目组织】财联社3月9日电，国家能源局局长章建华在全国两会期间表示，今年的能源工作要坚持稳中求进，先立后破，持续扩大清洁能源供给，加强传统能源与新能源优化组合，加快构建新能源供给消纳体系。一方面，加快发展非化石能源，推进大型风电光伏基地建设，推动第一批1亿千瓦规模基地项目尽快建成投产，加快第二批基地项目组织；积极推进水电基地建设，积极安全有序发展核电，建成白鹤滩水电站、福清6号等一批重大项目。另一方面，抓好煤炭清洁高效利用，统筹推动煤电节能降耗改造、供热改造和灵活性改造“三改联动”，发挥煤电调节性作用，增加新能源消纳能力。 (中国电力报) </p><h2 id="银星能源：是宁夏区内最早从事新能源发电的企业，目前新能源发电产业装机容量146-68万千瓦，具备年产300台风机、300台齿轮箱、500套塔筒的生产能力。"><a href="#银星能源：是宁夏区内最早从事新能源发电的企业，目前新能源发电产业装机容量146-68万千瓦，具备年产300台风机、300台齿轮箱、500套塔筒的生产能力。" class="headerlink" title="银星能源：是宁夏区内最早从事新能源发电的企业，目前新能源发电产业装机容量146.68万千瓦，具备年产300台风机、300台齿轮箱、500套塔筒的生产能力。"></a>银星能源：是宁夏区内最早从事新能源发电的企业，目前新能源发电产业装机容量146.68万千瓦，具备年产300台风机、300台齿轮箱、500套塔筒的生产能力。</h2><p>亿利洁能：依托控股股东亿利集团的生态修复成果，利用当地自然禀赋，在库布其沙漠已建设成710兆瓦，在建200兆瓦的生态光伏发电项目。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;绿电（优选闽东电力，小市值）&quot;&gt;&lt;a href=&quot;#绿电（优选闽东电力，小市值）&quot; class=&quot;headerlink&quot; title=&quot;绿电（优选闽东电力，小市值）&quot;&gt;&lt;/a&gt;绿电（优选闽东电力，小市值）&lt;/h2&gt;&lt;p&gt;两家公司斥资100亿元投资新能源业务，新能源</summary>
      
    
    
    
    <category term="投资 - 股票" scheme="https://www.memestarter.top/categories/%E6%8A%95%E8%B5%84-%E8%82%A1%E7%A5%A8/"/>
    
    
    <category term="股票" scheme="https://www.memestarter.top/tags/%E8%82%A1%E7%A5%A8/"/>
    
    <category term="投资" scheme="https://www.memestarter.top/tags/%E6%8A%95%E8%B5%84/"/>
    
  </entry>
  
  <entry>
    <title>daily-share-20220310</title>
    <link href="https://www.memestarter.top/2022/03/10/%E5%88%86%E4%BA%AB-20220310/"/>
    <id>https://www.memestarter.top/2022/03/10/%E5%88%86%E4%BA%AB-20220310/</id>
    <published>2022-03-09T16:01:39.000Z</published>
    <updated>2022-03-14T01:14:58.380Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>美国2008年次贷危机部分事件时间表<br><a href="https://hijiangtao.github.io/2021/09/21/Too-Big-To-Fail/">https://hijiangtao.github.io/2021/09/21/Too-Big-To-Fail/</a></p></li><li><p>《向上生长》笔记——2021.09.21<br><a href="https://www.gaficat.com/posts/aaa6a1a2.html">https://www.gaficat.com/posts/aaa6a1a2.html</a> </p></li><li><p>从熵的角度分析，为何说： 当你感到过得非常舒服的时候，就是你在急剧走下坡路的时候</p><blockquote><p>摘录1：任何人走上躺平的姿态都非常容易，比如刷抖音、追剧、打游戏，很快几个小时就过去了。但是背单词，十分钟就会觉得枯燥乏味了。为什么？因为前者顺应“熵增”的自然趋势，后者是给自己提供“负熵流”的，“负熵流”需要人主动吸收能量，获取知识，反抗自然规律，当然不会让人舒服。但，如果我们能和自己的人性做对抗，给到了自己“负熵流”，这难道不是一件非常酷、有成就感的事情吗？</p><br>摘录2：我认为，学习就是一个潜的过程，当你迷茫，对自己现状不满，想要学习的时候，你就请告诉自己：这段过程注定不会很舒适，这本来就是一个很枯燥，很乏味，反人性的过程。这段过程注定不会有太多的明显的收获，也完全不会给你表现自己的机会，这本来就是一段孤单、黑暗、迷茫的过程。但是即使这样，请你相信“厚积薄发”，因为总古至今，从《易经》到《向上生长》都在告诉你，潜得越久，成就越大。</blockquote></li><li><p>当下与永恒<br><a href="https://wiki-power.com/blog/2021/09/19/%E5%BD%93%E4%B8%8B%E4%B8%8E%E6%B0%B8%E6%81%92">https://wiki-power.com/blog/2021/09/19/%E5%BD%93%E4%B8%8B%E4%B8%8E%E6%B0%B8%E6%81%92</a></p><blockquote><p>摘录1：「如果每一天都能如此快乐就好了」。但仔细一想，如果每天都一样地快乐着，那还能称之为快乐吗？先前读过一段话，「快乐是生活的点缀，无聊和痛苦才是生活的本质」。</p></blockquote></li><li><p>回归本源一一位运算及其应用<br><a href="https://www.geekzl.com/bit-operation-and-its-apps-2014-noi-pater.html">https://www.geekzl.com/bit-operation-and-its-apps-2014-noi-pater.html</a></p></li><li><p>称假币问题的变形：无假币与“天平机”<br><a href="http://www.matrix67.com/blog/archives/6970">http://www.matrix67.com/blog/archives/6970</a><br>有点长，有点烧脑</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;美国2008年次贷危机部分事件时间表&lt;br&gt;&lt;a href=&quot;https://hijiangtao.github.io/2021/09/21/Too-Big-To-Fail/&quot;&gt;https://hijiangtao.github.io/2021/09/21</summary>
      
    
    
    
    <category term="分享 - 资源搜集" scheme="https://www.memestarter.top/categories/%E5%88%86%E4%BA%AB-%E8%B5%84%E6%BA%90%E6%90%9C%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>分享-20220306</title>
    <link href="https://www.memestarter.top/2022/03/06/%E5%88%86%E4%BA%AB-20220306/"/>
    <id>https://www.memestarter.top/2022/03/06/%E5%88%86%E4%BA%AB-20220306/</id>
    <published>2022-03-06T12:21:14.000Z</published>
    <updated>2022-03-14T01:19:12.169Z</updated>
    
    <content type="html"><![CDATA[<p>常用多媒体软件的开源或免费替代<br><a href="https://www.imaegoo.com/2021/media-soft/">https://www.imaegoo.com/2021/media-soft/</a></p><p>读陌生领域文献，我劝你别读正文(做科研的人可以看一下)<br><a href="https://kaopubear.top/blog/2021-09-26-dont-read-full-text/">https://kaopubear.top/blog/2021-09-26-dont-read-full-text/</a></p><p>公司融资知识（老板们看看）<br><a href="https://blog.mikeoperfect.com/posts/32098/">https://blog.mikeoperfect.com/posts/32098/</a><br>文章比较短，打算入股别人公司的人也可以看看。看看最后一句话，回购，稀释，退出等。</p><p>智能合约检测工具<br><a href="https://www.frank.hk/blog/slither-solidity-scanner/">https://www.frank.hk/blog/slither-solidity-scanner/</a><br>总所周知，智能合约一旦发布，就无法修改；为此，安全性就显得尤为重要，这个工具提供了一些检测功能。</p><p>初来新加坡，一份简单的个人金融事务指南<br><a href="https://www.zackwu.com/posts/2021-09-22-personal-finance-in-singapore-for-expats/">https://www.zackwu.com/posts/2021-09-22-personal-finance-in-singapore-for-expats/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;常用多媒体软件的开源或免费替代&lt;br&gt;&lt;a href=&quot;https://www.imaegoo.com/2021/media-soft/&quot;&gt;https://www.imaegoo.com/2021/media-soft/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;读陌生领域文献，我劝你别读正文</summary>
      
    
    
    
    <category term="分享 - 资源搜集" scheme="https://www.memestarter.top/categories/%E5%88%86%E4%BA%AB-%E8%B5%84%E6%BA%90%E6%90%9C%E9%9B%86/"/>
    
    
    <category term="分享" scheme="https://www.memestarter.top/tags/%E5%88%86%E4%BA%AB/"/>
    
    <category term="合约" scheme="https://www.memestarter.top/tags/%E5%90%88%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>springboot-2.x-log-system</title>
    <link href="https://www.memestarter.top/2022/03/03/springboot-2-x-log-system/"/>
    <id>https://www.memestarter.top/2022/03/03/springboot-2-x-log-system/</id>
    <published>2022-03-03T05:06:58.000Z</published>
    <updated>2022-03-03T05:29:08.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springboot日志系统的理解"><a href="#springboot日志系统的理解" class="headerlink" title="springboot日志系统的理解"></a>springboot日志系统的理解</h1><h2 id="日志归一系统"><a href="#日志归一系统" class="headerlink" title="日志归一系统"></a>日志归一系统</h2><p>写代码的时候突然对log感兴趣，想到了springboot之前了解的时候是依赖于sl4j实现的统一api，在编译的时候在决定用哪一个日志框架。但是翻了一下网上的文章。得出了<strong>Spring Boot 可以自动的适配日志框架，而且底层使用 SLF4 + LogBack</strong>的结论。<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220303131251.png" alt="20220303131251"></p><p>从图中可以看出几点</p><ol><li>所有其他日志系统例如，jul ，log4j ，logback 都是实现了和sl4j的桥接。</li><li>其中只有logback实现了sl4j，这个也是得出默认springboot支持logback的原因。</li></ol><h2 id="在springboot中，各个日志框架究竟是如何和平相处，并且相安无事的"><a href="#在springboot中，各个日志框架究竟是如何和平相处，并且相安无事的" class="headerlink" title="在springboot中，各个日志框架究竟是如何和平相处，并且相安无事的"></a>在springboot中，各个日志框架究竟是如何和平相处，并且相安无事的</h2><p>我们写代码，免不了使用第三方的库，假设第三方库没有实现sl4j的api，那么这个日志岂不是不受到springboot的统一管理了？？？不是这样的，就类似上面的spring-logging 这个库，一些第三方的流行的库，会有一些工具包来替换接管这些第三方系统的日志。<br>大致原理，如下，下面是一个sl4j官方的一个图。<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220303132843.png" alt="20220303132843"></p><h1 id="如何替换默认的logback的实现"><a href="#如何替换默认的logback的实现" class="headerlink" title="如何替换默认的logback的实现"></a>如何替换默认的logback的实现</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;    </span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;    </span><br><span class="line">    &lt;exclusions&gt;           </span><br><span class="line">        &lt;exclusion&gt;            </span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;                </span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        </span><br><span class="line">        &lt;/exclusion&gt;   </span><br><span class="line">    &lt;/exclusions&gt; </span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;    </span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    </span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt; </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;springboot日志系统的理解&quot;&gt;&lt;a href=&quot;#springboot日志系统的理解&quot; class=&quot;headerlink&quot; title=&quot;springboot日志系统的理解&quot;&gt;&lt;/a&gt;springboot日志系统的理解&lt;/h1&gt;&lt;h2 id=&quot;日志归一系</summary>
      
    
    
    
    <category term="技术生活 - 编程技术 - 后端技术" scheme="https://www.memestarter.top/categories/%E6%8A%80%E6%9C%AF%E7%94%9F%E6%B4%BB-%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF-%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="springboot" scheme="https://www.memestarter.top/tags/springboot/"/>
    
    <category term="log" scheme="https://www.memestarter.top/tags/log/"/>
    
    <category term="log4j" scheme="https://www.memestarter.top/tags/log4j/"/>
    
    <category term="sl4j" scheme="https://www.memestarter.top/tags/sl4j/"/>
    
    <category term="日志" scheme="https://www.memestarter.top/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>fix-macos-big-sur-crash</title>
    <link href="https://www.memestarter.top/2022/03/02/fix-macos-big-sur-crash/"/>
    <id>https://www.memestarter.top/2022/03/02/fix-macos-big-sur-crash/</id>
    <published>2022-03-02T13:03:20.000Z</published>
    <updated>2022-03-02T13:14:56.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>今天本来是用vscode写一个spring的小程序，编译的时候一直提示没有compile provider，百思不得其解。初步怀疑是maven和vscode的配置有关系。但是多番尝试依然无果。为了不浪费时间，还是决定intelj来开发，好久没有打开过intelj了，谁知道一打开就crash….今天真的是见了鬼。</p><h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><pre><code>1. 一番观察进程之后，排除了我下载的破解插件的原因。2. 软件兼容性方面，电脑自从上次没有用idea 大概没有安装太多第三方软件，初步排除3. 查看是否是因为系统资源不够等原因的时候，查看到mac os 系统版本，最近曾经升级过....</code></pre><p>茅塞顿开！！！</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>参考intelj 官方的答案：<a href="https://www.jetbrains.com/help/idea/directories-used-by-the-ide-to-store-settings-caches-plugins-and-logs.html#config-directory">https://www.jetbrains.com/help/idea/directories-used-by-the-ide-to-store-settings-caches-plugins-and-logs.html#config-directory</a></p><p>注意mac上如果直接删除参考如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -al ~/Library/Application\ Support/JetBrains   </span><br></pre></td></tr></table></figure><p>先查看自己的版本，然后决定是否备份一下配置文件。之后执行删除 <strong>JetBrains</strong> 下面的相关所有文件即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;今天本来是用vscode写一个spring的小程序，编译的时候一直提示没有compile provider，百思不得其解。初</summary>
      
    
    
    
    <category term="技术生活 - 编程技术 - bug-fix" scheme="https://www.memestarter.top/categories/%E6%8A%80%E6%9C%AF%E7%94%9F%E6%B4%BB-%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF-bug-fix/"/>
    
    
    <category term="maos" scheme="https://www.memestarter.top/tags/maos/"/>
    
    <category term="big sur" scheme="https://www.memestarter.top/tags/big-sur/"/>
    
    <category term="crash" scheme="https://www.memestarter.top/tags/crash/"/>
    
    <category term="idea" scheme="https://www.memestarter.top/tags/idea/"/>
    
    <category term="intelj" scheme="https://www.memestarter.top/tags/intelj/"/>
    
  </entry>
  
  <entry>
    <title>chrome浏览器安装Metamask</title>
    <link href="https://www.memestarter.top/2022/02/21/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E8%A3%85Metamask/"/>
    <id>https://www.memestarter.top/2022/02/21/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E8%A3%85Metamask/</id>
    <published>2022-02-21T02:19:26.000Z</published>
    <updated>2022-03-14T01:13:39.409Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MetaMask-为何物"><a href="#MetaMask-为何物" class="headerlink" title="MetaMask 为何物"></a>MetaMask 为何物</h1><blockquote><p>最初区块链不是很火，生态还不是很完善的时候，自己的账户（也就是一对公钥和私钥）要和区块链交互，可能就需要程序员用程序来实现。这对于普通人来说是不现实的。于是各种钱包诞生了。所谓的钱包其实也就是管理区块链账户（一对公私钥）的。MetaMask其实也可以理解是一个钱包，只不过呢，这个钱包是大多数的时候被以插件的形式安装在chrome的浏览器上。（说明：chrome也有移动版，这个时候和其他钱包差别不大，今天重点说的是浏览器端metamask）。</p></blockquote><blockquote><p>要想和区块链交互，例如玩游戏，做交易，都需要钱包来代理我们的交易，所以类似metamask，trust wallet ，imToken这种钱包是非常重要的。</p></blockquote><h1 id="MetaMask的安装"><a href="#MetaMask的安装" class="headerlink" title="MetaMask的安装"></a>MetaMask的安装</h1><pre><code>打开chrome浏览器，输入网址：https://metamask.io/（注意，切记对比别跑到钓鱼网站了）。点击download</code></pre><p>随后出现如下，安装到chrome中<br>    <img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220221103028.png" alt="20220221103028"></p><p>随后跳转到了<a href="https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn">https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn</a> ，这个地方应该需要科学上网才行。</p><h1 id="MetaMask的使用"><a href="#MetaMask的使用" class="headerlink" title="MetaMask的使用"></a>MetaMask的使用</h1><ul><li>MetaMask安装完成之后，可以导入或者生成助记词的方式创建一个钱包。注意创建的助记词一定用心保存。否则，一旦丢失， 账户资产全部归零。</li><li>类似MetaMask，imtoken这种钱包，一定注意甄别是否是正版。网上有很对李鬼app会盗取你的私钥或者助记词。一旦被盗用，您的财产就没了。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MetaMask-为何物&quot;&gt;&lt;a href=&quot;#MetaMask-为何物&quot; class=&quot;headerlink&quot; title=&quot;MetaMask 为何物&quot;&gt;&lt;/a&gt;MetaMask 为何物&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;最初区块链不是很火，生态还不是很完</summary>
      
    
    
    
    <category term="技术生活 - 编程技术 - 区块链" scheme="https://www.memestarter.top/categories/%E6%8A%80%E6%9C%AF%E7%94%9F%E6%B4%BB-%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF-%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="区块链" scheme="https://www.memestarter.top/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Metamask" scheme="https://www.memestarter.top/tags/Metamask/"/>
    
    <category term="chrome" scheme="https://www.memestarter.top/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>区块链游戏体验之从游戏到代码</title>
    <link href="https://www.memestarter.top/2022/02/21/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%B8%B8%E6%88%8F%E4%BD%93%E9%AA%8C%E4%B9%8B%E4%BB%8E%E6%B8%B8%E6%88%8F%E5%88%B0%E4%BB%A3%E7%A0%81/"/>
    <id>https://www.memestarter.top/2022/02/21/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%B8%B8%E6%88%8F%E4%BD%93%E9%AA%8C%E4%B9%8B%E4%BB%8E%E6%B8%B8%E6%88%8F%E5%88%B0%E4%BB%A3%E7%A0%81/</id>
    <published>2022-02-21T02:18:12.000Z</published>
    <updated>2022-03-14T01:13:25.994Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><blockquote><p>由于区块链游戏需要连接钱包，所以需要配置浏览器的MetaMask，并创建一个钱包。教程:<a href="https://www.memestarter.top/2022/02/21/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E8%A3%85Metamask">https://www.memestarter.top/2022/02/21/chrome浏览器安装Metamask</a>   .  在说后面的内容之前先说两个概念。区块链和区块链网络。<br>区块链。只要具有多节点数据同步出块机制的几乎都可以认为它是一个区块链。也就是一个永不停机的数据库。你也可以理解为一个银行。目前已知比较有名的区块链网络有以太坊（eth），币安连（bsc），比特币（btc）等。<br>区块链网络。用来标记一个区块链网络的一组概念。拿以太坊来说，他需要有一个chainID和rpcPoint来标记这个网络，这两个参数主要是供钱包在发送交易的时候，知道该和谁通信。</p></blockquote><p>有了这个概念之后。我们这次的目的是体验游戏，当然不可能在真实的环境下玩了，真实环境拿以太坊来说，交易一次几十美元,也就是几百人民币（具体多少要看交易的种类，gas等因素去考虑）。</p><h2 id="添加以太坊测试网络"><a href="#添加以太坊测试网络" class="headerlink" title="添加以太坊测试网络"></a>添加以太坊测试网络</h2><p>打开<a href="https://chainlist.org/">https://chainlist.org/</a> ,这个网址汇集了几乎流行的所有区块链的所有正式环境和测试环境的配置。如下所示，选择Rinkeby网络<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220221110337.png" alt="20220221110337"></p><p>点击connect之后，连接MetaMask，之后如下</p><p><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220221110423.png" alt="20220221110423"></p><p>然后点击Add to metamask 即可完成添加。<br>如下图，可以在MetaMask中看到这个网络。<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220221110541.png" alt="20220221110541"></p><h1 id="领取测试网络的测试代币"><a href="#领取测试网络的测试代币" class="headerlink" title="领取测试网络的测试代币"></a>领取测试网络的测试代币</h1><p>到水龙头网站领取：<a href="https://faucet.rinkeby.io/">https://faucet.rinkeby.io/</a> ，如果领取有问题可以留言，我这有点</p><h1 id="体验游戏"><a href="#体验游戏" class="headerlink" title="体验游戏"></a>体验游戏</h1><p>找到一个比较简单，而且带源码的游戏</p><ol><li>游戏网址 ：<a href="https://epic-game-buildspace-a2c4ixjyk-zlayine.vercel.app/">https://epic-game-buildspace-a2c4ixjyk-zlayine.vercel.app/</a> </li><li>博客网址：<a href="https://betterprogramming.pub/create-a-blockchain-game-with-solidity-web3-and-vue-js-c75eed4b49a6">https://betterprogramming.pub/create-a-blockchain-game-with-solidity-web3-and-vue-js-c75eed4b49a6</a></li><li>代码网址：<a href="https://github.com/zlayine/epic-game-buildspace">https://github.com/zlayine/epic-game-buildspace</a></li></ol><ul><li><p>连接<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220221110822.png" alt="20220221110822"></p></li><li><p>切换网络<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220221110733.png" alt="20220221110733"></p></li><li><p>选择角色<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220221110911.png" alt="20220221110911"></p></li><li><p>领取角色<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220221111146.png" alt="20220221111146"><br>然后点击下方的confirm确定</p></li><li><p>等待MetaMask把交易发送到区块链，等待区块链确认同步<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220221111243.png" alt="20220221111243"></p></li><li><p>mint之后自己的角色如下，并给我分配了大boss  elon。。。。<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220221111615.png" alt="20220221111615"></p></li></ul><h1 id="玩游戏"><a href="#玩游戏" class="headerlink" title="玩游戏"></a>玩游戏</h1><p>点击攻击elon，图片晃动，这里本来期望，会弹出MetaMask，让把这次攻击的结果提交区块链，或者区块链随机决定胜负的。看来这个游戏还不够完善。</p><p><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220221111729.png" alt="20220221111729"></p><p>无论如何，大致的区块链游戏也就这样，最简单的。但是也可以通过这个流程大致体会一下，目前区块链游戏发展阶段。正所谓：不完善的地方机会才多。目前区块链游戏大抵如此。更多的是偏向金融属性。例如，我们一开始游戏的时候，就需要mint一个角色，这个角色其实就是一个nft，非同质化代币。在一些游戏中，这些角色是可以买卖的。还有一些游戏中，这些nft，例如装备，角色，宝石，等是可以跨越游戏使用和转移的。这也是和传统游戏区别比较大的地方。</p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>体验到此结束，只能用一句话形容目前游戏的现状。现实很骨感，理想很丰满。相信未来的人，前仆后继；</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;由于区块链游戏需要连接钱包，所以需要配置浏览器的MetaMask，并创建一个钱包。教程:&lt;a hr</summary>
      
    
    
    
    <category term="技术生活 - 编程技术 - 区块链" scheme="https://www.memestarter.top/categories/%E6%8A%80%E6%9C%AF%E7%94%9F%E6%B4%BB-%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF-%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>分享20220212</title>
    <link href="https://www.memestarter.top/2022/02/12/%E5%88%86%E4%BA%AB20220212/"/>
    <id>https://www.memestarter.top/2022/02/12/%E5%88%86%E4%BA%AB20220212/</id>
    <published>2022-02-12T13:54:09.000Z</published>
    <updated>2022-03-14T01:19:10.183Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>超级好用的免费开源文件同步工具：Syncthing；作为一款P2P性质的文件同步工具，Syncthing在Github上广受欢迎，已经收获了42k的Star！<br>Syncthing有五大特点：<br>1、避免数据丢失<br>2、安全防范攻击者<br>3、便捷使用<br>4、自动化运行<br>5、高兼容性<br>详情： <a href="https://blog.didispace.com/tj-opensource-syncthing/">https://blog.didispace.com/tj-opensource-syncthing/</a></p></li><li><p>最优停止理论与导师选择<br><a href="https://blog.eastonman.com/blog/2021/12/optimal-stop/">https://blog.eastonman.com/blog/2021/12/optimal-stop/</a></p></li><li><p>a16z NFT 学习清单：社交代币、DAO、创作者经济<br><a href="https://imzl.com/a16z-nft-canon.html">https://imzl.com/a16z-nft-canon.html</a></p></li><li><p>后记：菠菜站点的攻克之旅；一个黑人网站的记录，挺有意思<br><a href="https://knightyun.github.io/2021/12/06/exploit-penetrate-bocai-website">https://knightyun.github.io/2021/12/06/exploit-penetrate-bocai-website</a></p></li><li><p>一个windows平台的沙盒软件，可以对程序从下到上进行全方面的隔离，最近的更新增加了中文支持。<br>比起windows自带的沙盒来说性能更高，交互更方便，毕竟win自带的本质上就是虚拟机，而这个可能是内核hook实现的吧，非常推荐，尤其是对付国内这些流氓软件<br><a href="https://sandboxie-plus.com/">https://sandboxie-plus.com/</a></p></li><li><p>承认自己的平庸，人生才会更幸福<br><a href="https://xqrp.com/660350.html">https://xqrp.com/660350.html</a></p></li><li><p>我理解的长期主义 （推荐阅读）<br><a href="https://imzhanghao.com/2021/10/26/long-termism/">https://imzhanghao.com/2021/10/26/long-termism/</a></p></li><li><p>一个15岁的小孩的博客，会的还挺多<br><a href="https://blog.baoshuo.ren/about/">https://blog.baoshuo.ren/about/</a></p></li><li><p>Google Adsense 收款流程（失败案例）<br><a href="https://5ime.cn/adsense.html">https://5ime.cn/adsense.html</a></p></li><li><p>读叔本华《人生的智慧》（美貌是一封公开的公开信）<br><a href="https://mazhuang.org/2021/10/25/the-wisdom-of-life/">https://mazhuang.org/2021/10/25/the-wisdom-of-life/</a></p></li><li><p>一个GA替代方案，就是今天加进站点的Umami，精简，漂亮，支持中文界面，还支持共享站点统计数据。<br>这篇文章说明了推荐理由。<br><a href="https://mantyke.icu/2021/umami-build/">https://mantyke.icu/2021/umami-build/</a></p></li><li><p>国内厂商应用商店跳转链接<br><a href="http://www.linchangyu.com/web/2021/10/21/Chinese_Android_Market_Schema.html">http://www.linchangyu.com/web/2021/10/21/Chinese_Android_Market_Schema.html</a></p></li><li><p>微软联合 Yandex 推出了 IndexNow，它提供了一种快速的方法让网站站长可以第一时间通知所有接入 IndexNow 的搜索引擎网站的内容发生了变化<br><a href="https://baiyun.me/using-indexnow">https://baiyun.me/using-indexnow</a></p></li><li><p>「内容农场」属实在玷污 Google 搜索结果（一群人靠拉低别人的体验赚钱）<br><a href="https://blog.ichr.me/post/evil-content-farm/">https://blog.ichr.me/post/evil-content-farm/</a></p></li><li><p>2020年我设定了两条交易纪律：<br>纪律一，每月仅在发工资的当日处理和投资相关的事情。<br>纪律二: 绝不主动向别人推荐 ETF 和股票<br>他们运行的非常良好，帮我节省了大量的时间和精力。<br><a href="http://mednoter.com/principles-by-ryan-lyu.html">http://mednoter.com/principles-by-ryan-lyu.html</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;超级好用的免费开源文件同步工具：Syncthing；作为一款P2P性质的文件同步工具，Syncthing在Github上广受欢迎，已经收获了42k的Star！&lt;br&gt;Syncthing有五大特点：&lt;br&gt;1、避免数据丢失&lt;br&gt;2、安全防范攻击者&lt;br&gt;3</summary>
      
    
    
    
    <category term="分享 - 资源搜集" scheme="https://www.memestarter.top/categories/%E5%88%86%E4%BA%AB-%E8%B5%84%E6%BA%90%E6%90%9C%E9%9B%86/"/>
    
    
    <category term="分享" scheme="https://www.memestarter.top/tags/%E5%88%86%E4%BA%AB/"/>
    
    <category term="NFT" scheme="https://www.memestarter.top/tags/NFT/"/>
    
    <category term="dao" scheme="https://www.memestarter.top/tags/dao/"/>
    
    <category term="google" scheme="https://www.memestarter.top/tags/google/"/>
    
  </entry>
  
  <entry>
    <title>flutter中布局类widget组件</title>
    <link href="https://www.memestarter.top/2022/02/11/flutter%E4%B8%AD%E5%B8%83%E5%B1%80%E7%B1%BBwidget%E7%BB%84%E4%BB%B6/"/>
    <id>https://www.memestarter.top/2022/02/11/flutter%E4%B8%AD%E5%B8%83%E5%B1%80%E7%B1%BBwidget%E7%BB%84%E4%BB%B6/</id>
    <published>2022-02-11T06:46:28.000Z</published>
    <updated>2022-02-12T00:56:01.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="widget布局组件原理"><a href="#widget布局组件原理" class="headerlink" title="widget布局组件原理"></a>widget布局组件原理</h1><p>flutter中布局从布局树的角度来说，大致分为三类：完全没有子节点，有且只有一个子节点的widget ，可以有多个子节点的widget。只有后两者才能成为布局widget。下班是这三类的说明和举例。</p><table><thead><tr><th align="left">widget名称</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">LeafRenderObjectWidget</td><td align="left">非容器类组件通常继承自这个</td><td align="left">Widget树的叶子节点，用于没有子节点的widget，通常基础组件都属于这一类，如Image。</td></tr><tr><td align="left">SingleChildRenderObjectWidget</td><td align="left">只能容纳单个组件的widget的基类</td><td align="left">只能有一个child Widget，如：ConstrainedBox、DecoratedBox等 MultiChildRenderObjectWidget</td></tr></tbody></table><blockquote><p>所有的widget都继承自 RenderObjectWidget，这个类中定义了创建、更新RenderObject的方法，子类必须实现他们，它是最终布局、渲染UI界面的对象的方法，其布局算法都是通过对应的RenderObject对象来实现的。</p></blockquote><h1 id="widget布局组件的两个形式"><a href="#widget布局组件的两个形式" class="headerlink" title="widget布局组件的两个形式"></a>widget布局组件的两个形式</h1><p>Flutter 中的整体渲染流程是 Widget -&gt; Element -&gt; RenderObejct -&gt; Layer 这样的过程，而 「Flutter 里的布局和绘制逻辑都在 RenderObejct」,而其中的布局，就是这里要说的。<Br><br>Flutter 中有两种布局模型：</p><ul><li>基于 RenderBox 的盒模型布局。</li><li>基于 Sliver ( RenderSliver ) 按需加载列表布局。<br>两种布局方式在细节上略有差异，但大体流程相同，布局流程如下：</li></ul><ol><li>上层组件向下层组件传递约束（constraints）条件。</li><li>下层组件确定自己的大小，然后告诉上层组件。注意下层组件的大小必须符合父组件的约束。</li><li>上层组件确定下层组件相对于自身的偏移和确定自身的大小（大多数情况下会根据子组件的大小来确定自身的大小）。</li></ol><h2 id="盒模型布局组件"><a href="#盒模型布局组件" class="headerlink" title="盒模型布局组件"></a>盒模型布局组件</h2><p>盒模型布局组件有两个特点：</p><ol><li>组件对应的渲染对象都继承自 RenderBox 类。</li><li>在布局过程中父级传递给子级的Constraints（约束） BoxConstraints 描述。</li></ol><p>ConstrainedBox用于对子组件添加额外的约束。被ConstrainedBox约束的组件，子组件的宽高以ConstrainedBox中设置的为准<br>例如以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ConstrainedBox(</span><br><span class="line">              constraints:</span><br><span class="line">                  const BoxConstraints(maxWidth: 300, minHeight: 40),</span><br><span class="line">              child: Container(</span><br><span class="line">                height: 1,</span><br><span class="line">                decoration: const BoxDecoration(color: Colors.red),</span><br><span class="line">              )),</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220211234015.png" alt="20220211234015"></p><p>container的高度设置为1实际绘制的高度是40；设置height为100 ，绘制高度也是100 </p><p>SizedBox用于给子元素指定固定的宽高。</p><h3 id="Row和Column"><a href="#Row和Column" class="headerlink" title="Row和Column"></a>Row和Column</h3><p>这两个组件比较简单，可以类比安卓开发的时候有一个线性布局。<br>构造方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Row(&#123;</span><br><span class="line">  ...  </span><br><span class="line">  TextDirection textDirection,    </span><br><span class="line">  MainAxisSize mainAxisSize = MainAxisSize.max,    </span><br><span class="line">  MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start,</span><br><span class="line">  VerticalDirection verticalDirection = VerticalDirection.down,  </span><br><span class="line">  CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center,</span><br><span class="line">  List&lt;Widget&gt; children = const &lt;Widget&gt;[],</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>TextDirection 组件排列方向</li><li>mainAxisSize 子元素的尺寸。mainAxisSize.max 尽可能的暂用空间。mainAxisSize.min尽可能的小的去占用。</li><li>mainAxisAlignment ：水平空间的对齐方式。MainAxisAlignment.start表示沿textDirection的初始方向对齐，如textDirection取值为TextDirection.ltr时，则MainAxisAlignment.start表示左对齐，textDirection取值为TextDirection.rtl时表示从右对齐。而MainAxisAlignment.end和MainAxisAlignment.start正好相反；MainAxisAlignment.center表示居中对齐。读者可以这么理解：textDirection是mainAxisAlignment的参考系。</li><li>verticalDirection：表示Row纵轴（垂直）的对齐方向，默认是VerticalDirection.down，表示从上到下。</li><li>crossAxisAlignment：表示子组件在纵轴方向的对齐方式，Row的高度等于子组件中最高的子元素高度，它的取值和MainAxisAlignment一样(包含start、end、 center三个值)，不同的是crossAxisAlignment的参考系是verticalDirection，即verticalDirection值为VerticalDirection.down时crossAxisAlignment.start指顶部对齐，verticalDirection值为VerticalDirection.up时，crossAxisAlignment.start指底部对齐；而crossAxisAlignment.end和crossAxisAlignment.start正好相反；</li></ul><h3 id="柔性布局Flex"><a href="#柔性布局Flex" class="headerlink" title="柔性布局Flex"></a>柔性布局Flex</h3><p>柔性布局和Expand结合可以把元素按照比例分割布局。</p><h3 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h3><p>超出屏幕显示范围会自动折行的布局称为流式布局。Flutter中通过Wrap和Flow来支持流式布局<br>wrap组件重要的属性</p><ul><li>spacing：主轴方向子widget的间距</li><li>runSpacing：次轴方向的间距</li><li>runAlignment：次轴方向的对齐方式</li></ul><h3 id="绝对布局Stack和Positioned"><a href="#绝对布局Stack和Positioned" class="headerlink" title="绝对布局Stack和Positioned"></a>绝对布局Stack和Positioned</h3><p>绝对布局、Android 中的 Frame 布局是相似的。子组件可以根据距父容器四个角的位置来确定自身的位置。Stack允许子组件堆叠，而Positioned用于根据Stack的四个角来确定子组件的位置。</p><p>stack重要属性</p><ul><li>alignment:Alignment.center , &#x2F;&#x2F;指定未定位或部分定位widget的对齐方式；这个决定原点</li><li>fit: StackFit.expand, &#x2F;&#x2F;未定位widget占满Stack整个空间</li></ul><p>Positioned构造函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const Positioned(&#123;</span><br><span class="line">  Key? key,</span><br><span class="line">  this.left, </span><br><span class="line">  this.top,</span><br><span class="line">  this.right,</span><br><span class="line">  this.bottom,</span><br><span class="line">  this.width,</span><br><span class="line">  this.height,</span><br><span class="line">  required Widget child,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>left、top 、right、 bottom分别代表离Stack左、上、右、底四边的距离。width和height用于指定需要定位元素的宽度和高度。</p><h2 id="容器类组件"><a href="#容器类组件" class="headerlink" title="容器类组件"></a>容器类组件</h2><p>Padding<br>可以给其子节点添加填充（留白），和边距效果类似。<br>EdgeInsets<br><strong>EdgeInsets提供的api</strong> </p><ul><li>fromLTRB(double left, double top, double right, double bottom)：分别指定四个方向的填充。</li><li>all(double value) : 所有方向均使用相同数值的填充。</li><li>only({left, top, right ,bottom })：可以设置具体某个方向的填充(可以同时指定多个方向)。</li><li>symmetric({ vertical, horizontal })：用于设置对称方向的填充，vertical指top和bottom，horizontal指left和right。</li></ul><h3 id="DecoratedBox"><a href="#DecoratedBox" class="headerlink" title="DecoratedBox"></a>DecoratedBox</h3><p>可以在其子组件绘制前(或后)绘制一些装饰（Decoration），如背景、边框、渐变等。</p><h3 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h3><p>Container是一个组合类容器，它本身不对应具体的RenderObject，它是DecoratedBox、ConstrainedBox、Transform、Padding、Align等组件组合的一个多功能容器，所以我们只需通过一个Container组件可以实现同时需要装饰、变换、限制的场景。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Container(&#123;</span><br><span class="line">  this.alignment,</span><br><span class="line">  this.padding, //容器内补白，属于decoration的装饰范围</span><br><span class="line">  Color color, // 背景色</span><br><span class="line">  Decoration decoration, // 背景装饰</span><br><span class="line">  Decoration foregroundDecoration, //前景装饰</span><br><span class="line">  double width,//容器的宽度</span><br><span class="line">  double height, //容器的高度</span><br><span class="line">  BoxConstraints constraints, //容器大小的限制条件</span><br><span class="line">  this.margin,//容器外补白，不属于decoration的装饰范围</span><br><span class="line">  this.transform, //变换</span><br><span class="line">  this.child,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="Sliver-薄片布局"><a href="#Sliver-薄片布局" class="headerlink" title="Sliver(薄片布局)"></a>Sliver(薄片布局)</h2><p>通常可滚动组件子组件比较多，如果一次性渲染和加载所有组件，需要消耗比较大的系统资源，严重影响系统性能。并且随着手势滑动的时候，需要不停的计算。Flutter中提出一个Sliver（中文为“薄片”的意思）概念，Sliver 可以包含一个或多个子组件。Sliver 的主要作用是配合：加载子组件并确定每一个子组件的布局和绘制信息，如果 Sliver 可以包含多个子组件时，通常会实现按需加载模型。<br><br>通过这个机制，只有当 Sliver 出现在视口中时才会去构建它，这种模型也称为“基于Sliver的列表按需加载模型”。可滚动组件中有很多都支持基于Sliver的按需加载模型，如ListView、GridView，但是也有不支持该模型的，如SingleChildScrollView。</p><blockquote><p>Flutter 中的可滚动主要由三个角色组成：Scrollable、Viewport 和 Sliver：</p><ol><li>Scrollable ：用于处理滑动手势，确定滑动偏移，滑动偏移变化时构建 Viewport 。</li><li>Viewport：显示的视窗，即列表的可视区域；</li><li>Sliver：视窗里显示的元素。</li></ol></blockquote><p>这几个的关系大致如下<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220211162027.png" alt="20220211162027"><br>说明：<br></p><ol><li>Scrollable 、 Viewport 和 Sliver 所占用的空间都是白色区域，也就是说，这部分是重合的。</li><li>从上到下的层级关系是scrollview ，viewPort  ，silver </li><li>按需加载需要最下层的silver来实现</li><li>图中的cacheExtent区域是为了让滑动更丝滑而存在的，这部分不显示在可见区域，只是在即将出现在可见区域的提前绘制。默认值是250大小。可以被改变</li></ol><p>绘制过程<br>具体布局过程：</p><ol><li>Scrollable 监听到用户滑动行为后，根据最新的滑动偏移构建 Viewport 。</li><li>Viewport 将当前视口信息和配置信息通过 SliverConstraints 传递给 Sliver。</li><li>Sliver 中对子组件（RenderBox）按需进行构建和布局，然后确认自身的位置、绘制等信息，保存在 geometry 中（一个 SliverGeometry 类型的对象）。<h3 id="SingleChildScrollView"><a href="#SingleChildScrollView" class="headerlink" title="SingleChildScrollView"></a>SingleChildScrollView</h3>SingleChildScrollView类似安卓的ScrollView ，只有一个子组件。需要注意的是SingleChildScrollView不支持silver的按需加载。如果有比较多的待滑动内容的时候，不要使用这个组件。</li></ol><h1 id="滑动组件"><a href="#滑动组件" class="headerlink" title="滑动组件"></a>滑动组件</h1><h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><h3 id="ListView是一个列表展示组件。它的构造方法可以传入一组widget"><a href="#ListView是一个列表展示组件。它的构造方法可以传入一组widget" class="headerlink" title="ListView是一个列表展示组件。它的构造方法可以传入一组widget"></a>ListView是一个列表展示组件。它的构造方法可以传入一组widget</h3><p>如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ListView(</span><br><span class="line">                  shrinkWrap: true,</span><br><span class="line">                  padding: const EdgeInsets.all(10),</span><br><span class="line">                  children: const [</span><br><span class="line">                    Text(&quot;data1&quot;),</span><br><span class="line">                    Text(&quot;data2&quot;),</span><br><span class="line">                    Text(&quot;data3&quot;),</span><br><span class="line">                    Text(&quot;data4&quot;),</span><br><span class="line">                    Text(&quot;data5&quot;),</span><br><span class="line">                    Text(&quot;data6&quot;),</span><br><span class="line">                    Text(&quot;data7&quot;),</span><br><span class="line">                    Text(&quot;data8&quot;),</span><br><span class="line">                    Text(&quot;data9&quot;),</span><br><span class="line">                    Text(&quot;data10&quot;),</span><br><span class="line">                  ])</span><br><span class="line">            ]),</span><br></pre></td></tr></table></figure><p>通常如果列表数量比较少，可以这么样做。如果列表数量比较多，这样就会消耗性能。</p><p><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220211170603.png" alt="20220211170603"></p><h3 id="ListView-builder适合批量创建列表元素"><a href="#ListView-builder适合批量创建列表元素" class="headerlink" title="ListView.builder适合批量创建列表元素"></a>ListView.builder适合批量创建列表元素</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Expanded(</span><br><span class="line">                  child: ListView.builder(</span><br><span class="line">                      itemCount: 100,</span><br><span class="line">                      itemExtent: 60,</span><br><span class="line">                      itemBuilder: (BuildContext context, int index) &#123;</span><br><span class="line">                        return ListTile(title: Text(&quot;ListViwe $index&quot;));</span><br><span class="line">                      &#125;))</span><br></pre></td></tr></table></figure><p> <img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220211171356.png" alt="20220211171356">                     </p><h3 id="ListView-separated"><a href="#ListView-separated" class="headerlink" title="ListView.separated"></a>ListView.separated</h3><p>ListView.separated可以在生成的列表项之间添加一个分割组件，它比ListView.builder多了一个separatorBuilder参数，该参数是一个分割组件生成器。使用场景，例如需要在每一个item之间添加分隔条的时候。</p><h3 id="ListVIew的性能"><a href="#ListVIew的性能" class="headerlink" title="ListVIew的性能"></a>ListVIew的性能</h3><ol><li>如果列表数据多，尽量使用listVIew.build或者listVIew.separated来构建列表。</li><li>尽量给列表指定 itemExtent 或 prototypeItem ，这样会减少引擎的计算时间</li></ol><h2 id="GridVIew"><a href="#GridVIew" class="headerlink" title="GridVIew"></a>GridVIew</h2><p>GridView 有着非常有用的应用场景。如下<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220211174838.png" alt="20220211174838"></p><p>GridView构造方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GridView(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  Axis scrollDirection = Axis.vertical,</span><br><span class="line">  bool reverse = false,</span><br><span class="line">  ScrollController controller,</span><br><span class="line">  ScrollPhysics physics,</span><br><span class="line">  bool shrinkWrap = false,</span><br><span class="line">  EdgeInsetsGeometry padding,</span><br><span class="line">  @required this.gridDelegate,</span><br><span class="line">  double cacheExtent,</span><br><span class="line">  List&lt;Widget&gt; children = const &lt;Widget&gt;[],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这么多参数中，重点需要关注的是gridDelegate这个参数。它其实是GridView组件如何控制排列子元素的一个委托<br>他的的类型是SliverGridDelegate。fultter中主要由两个实现类：</p><ol><li>SliverGridDelegateWithFixedCrossAxisCount：用于固定列数的场景；</li><li>SliverGridDelegateWithMaxCrossAxisExtent：用于子元素有最大宽度限制的场景；</li></ol><h3 id="SliverGridDelegateWithFixedCrossAxisCount"><a href="#SliverGridDelegateWithFixedCrossAxisCount" class="headerlink" title="SliverGridDelegateWithFixedCrossAxisCount"></a>SliverGridDelegateWithFixedCrossAxisCount</h3><p>主要用于横轴方向有固定元素的场景，构造方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SliverGridDelegateWithFixedCrossAxisCount(&#123;</span><br><span class="line">  @required this.crossAxisCount,</span><br><span class="line">  this.mainAxisSpacing = 0.0,</span><br><span class="line">  this.crossAxisSpacing = 0.0,</span><br><span class="line">  this.childAspectRatio = 1.0,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>参数解释</p><ul><li>crossAxisCount：列数，即一行有几个子元素；</li><li>mainAxisSpacing：主轴方向上的空隙间距；这里主轴是x轴</li><li>crossAxisSpacing：次轴方向上的空隙间距；这里次轴是y轴</li><li>childAspectRatio：子元素的宽高比例。</li></ul><p>下图说的比较清楚<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220211175521.png" alt="20220211175521"></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>GridView使用方法主要有以下几种</p><ul><li>GridView默认构造函数可以类比于ListView默认构造函数，适用于有限个数子元素的场景，因为GridView组件会一次性全部渲染children中的子元素组件；</li><li>GridView.builder构造函数可以类比于ListView.builder构造函数，适用于长列表的场景，因为GridView组件会根据子元素是否出现在屏幕内而动态创建销毁，减少内存消耗，更高效渲染；</li><li>GridView.count构造函数是GrdiView使用SliverGridDelegateWithFixedCrossAxisCount的简写（语法糖），效果完全一致；</li><li>GridView.extent构造函数式GridView使用SliverGridDelegateWithMaxCrossAxisExtent的简写（语法糖），效果完全一致。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;widget布局组件原理&quot;&gt;&lt;a href=&quot;#widget布局组件原理&quot; class=&quot;headerlink&quot; title=&quot;widget布局组件原理&quot;&gt;&lt;/a&gt;widget布局组件原理&lt;/h1&gt;&lt;p&gt;flutter中布局从布局树的角度来说，大致分为三类：完全没</summary>
      
    
    
    
    <category term="技术生活 - 编程技术 - 移动端研发" scheme="https://www.memestarter.top/categories/%E6%8A%80%E6%9C%AF%E7%94%9F%E6%B4%BB-%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%A0%94%E5%8F%91/"/>
    
    
    <category term="flutter" scheme="https://www.memestarter.top/tags/flutter/"/>
    
    <category term="布局" scheme="https://www.memestarter.top/tags/%E5%B8%83%E5%B1%80/"/>
    
    <category term="widget" scheme="https://www.memestarter.top/tags/widget/"/>
    
  </entry>
  
  <entry>
    <title>flutter组件widget系列-基础组件</title>
    <link href="https://www.memestarter.top/2022/02/10/flutter%E7%BB%84%E4%BB%B6widget%E7%B3%BB%E5%88%97-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6/"/>
    <id>https://www.memestarter.top/2022/02/10/flutter%E7%BB%84%E4%BB%B6widget%E7%B3%BB%E5%88%97-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6/</id>
    <published>2022-02-10T09:10:43.000Z</published>
    <updated>2022-02-10T11:41:39.106Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文本组件"><a href="#文本组件" class="headerlink" title="文本组件"></a>文本组件</h1><h2 id="文本组件基本属性"><a href="#文本组件基本属性" class="headerlink" title="文本组件基本属性"></a>文本组件基本属性</h2><p>Text是最基本的文本组件，它的构造方法如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const Text(</span><br><span class="line">    String this.data, &#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    this.style,</span><br><span class="line">    this.strutStyle,</span><br><span class="line">    this.textAlign,</span><br><span class="line">    this.textDirection,</span><br><span class="line">    this.locale,</span><br><span class="line">    this.softWrap,</span><br><span class="line">    this.overflow,</span><br><span class="line">    this.textScaleFactor,</span><br><span class="line">    this.maxLines,</span><br><span class="line">    this.semanticsLabel,</span><br><span class="line">    this.textWidthBasis,</span><br><span class="line">    this.textHeightBehavior,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>  可以看出，有几个属性可以直接设置，例如：textAlign，textDirection，locale，overflow等。下边是一个例子<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const Text(</span><br><span class="line">            &quot;You have pushed  many timesYou have pushed  many timesYou have pushed  many timesYou have pushed  many times:&quot;,</span><br><span class="line">            textAlign: TextAlign.left, //对其</span><br><span class="line">            overflow: TextOverflow</span><br><span class="line">                .ellipsis, //截取部分展示：clip：直接截取 fade：渐隐 ellipsis：省略号，省略的部分是以单词为单位，而不是字母</span><br><span class="line">            textScaleFactor: 1, //设置字体大小的一种快捷方式</span><br><span class="line">            maxLines: 2, //最多允许几行</span><br><span class="line">            textDirection: TextDirection.ltr</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>  textStyle主要核心是设置文字的属性，粒度更加细</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">const Text(</span><br><span class="line">            &quot;You have pushed  many timesYou have pushed  many timesYou have pushed  many timesYou have pushed  many times:&quot;,</span><br><span class="line">            textAlign: TextAlign.left, //对其</span><br><span class="line">            overflow: TextOverflow</span><br><span class="line">                .ellipsis, //截取部分展示：clip：直接截取 fade：渐隐 ellipsis：省略号，省略的部分是以单词为单位，而不是字母</span><br><span class="line">            textScaleFactor: 1, //设置字体大小的一种快捷方式</span><br><span class="line">            maxLines: 2, //最多允许几行</span><br><span class="line">            textDirection: TextDirection.ltr,</span><br><span class="line">            style: TextStyle(</span><br><span class="line">                color: Colors.blue,</span><br><span class="line">                fontSize: 28.0,</span><br><span class="line">                fontWeight: FontWeight</span><br><span class="line">                    .bold, //字体粗细 一般使用的属性：FontWeight normal（默认） 、FontWeight bold（粗体）</span><br><span class="line">                letterSpacing: -1, //字母间距，默认0，负数间距越小，正数 间距越大</span><br><span class="line">                wordSpacing:</span><br><span class="line">                    1, //单词 间距，默认0，负数间距越小，正数 间距越大，注意和letterSpacing的区别，比如hello，h、e、l、l、o各是一个字母，hello是一个单词</span><br><span class="line">                height: 2, //会乘以fontSize做为行高</span><br><span class="line">                //阴影shadows://</span><br><span class="line">                fontFamily: &quot;Courier&quot;,</span><br><span class="line">                decorationColor: Colors.red, //划线颜色</span><br><span class="line">                decoration: TextDecoration.underline, //文字划线：下划线、上划线、中划线</span><br><span class="line">                decorationStyle: TextDecorationStyle.dotted),</span><br><span class="line">          ),</span><br></pre></td></tr></table></figure><p>  运行效果<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220210181013.png" alt="20220210181013"></p><h1 id="TextSpan"><a href="#TextSpan" class="headerlink" title="TextSpan"></a>TextSpan</h1><p>如果要实现同一段文字的不同部分有不同的样式，就要用到TextSpan了<Br><br>看一下它的定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const TextSpan(&#123;</span><br><span class="line">  TextStyle style, </span><br><span class="line">  Sting text,</span><br><span class="line">  List&lt;TextSpan&gt; children,</span><br><span class="line">  GestureRecognizer recognizer,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在使用的时候，可以分别使用Text.rice和RichText两种方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">children: &lt;Widget&gt;[</span><br><span class="line">            const Text(</span><br><span class="line">              &quot;You have many times:&quot;,</span><br><span class="line">              textAlign: TextAlign.left, //对其</span><br><span class="line">            ),</span><br><span class="line">            Text(</span><br><span class="line">              &#x27;$_counter&#x27;,</span><br><span class="line">              style: Theme.of(context).textTheme.headline4,</span><br><span class="line">            ),</span><br><span class="line">            const Text.rich(</span><br><span class="line">              TextSpan(text: &quot;hello Text.rich &quot;, children: [</span><br><span class="line">                TextSpan(</span><br><span class="line">                  text: &quot;red text span&quot;,</span><br><span class="line">                  style: TextStyle(fontSize: 16.0, color: Colors.red),</span><br><span class="line">                ),</span><br><span class="line">                TextSpan(</span><br><span class="line">                  text: &quot;red text span&quot;,</span><br><span class="line">                  style: TextStyle(fontSize: 16.0, color: Colors.green),</span><br><span class="line">                ),</span><br><span class="line">              ]),</span><br><span class="line">            ),</span><br><span class="line">            RichText(</span><br><span class="line">              text: const TextSpan(</span><br><span class="line">                  text: &quot;hello  RichText TextSpan &quot;,</span><br><span class="line">                  style: TextStyle(fontSize: 16.0, color: Colors.black),</span><br><span class="line">                  children: [</span><br><span class="line">                    TextSpan(</span><br><span class="line">                      text: &quot;red text span&quot;,</span><br><span class="line">                      style: TextStyle(fontSize: 16.0, color: Colors.red),</span><br><span class="line">                    ),</span><br><span class="line">                    TextSpan(</span><br><span class="line">                      text: &quot;yello text span&quot;,</span><br><span class="line">                      style: TextStyle(fontSize: 16.0, color: Colors.yellow),</span><br><span class="line">                    )</span><br><span class="line">                  ]),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行效果如下</p><p><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220210184244.png" alt="20220210184244"></p><h1 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h1><p>Material 组件库中提供了多种按钮组件如ElevatedButton、TextButton、OutlineButton等，它们都是直接或间接对RawMaterialButton组件的包装定制，所以他们大多数属性都和RawMaterialButton一样。在介绍各个按钮时我们先介绍其默认外观，而按钮的外观大都可以通过属性来自定义，我们在后面统一介绍这些属性。另外，所有 Material 库中的按钮都有如下相同点：</p><p>按下时都会有“水波动画”（又称“涟漪动画”，就是点击时按钮上会出现水波扩散的动画）。<br>有一个onPressed属性来设置点击回调，当按钮按下时会执行该回调，如果不提供该回调则按钮会处于禁用状态，禁用状态不响应用户点击。</p><ul><li>按下时都会有“水波动画”（又称“涟漪动画”，就是点击时按钮上会出现水波扩散的动画）。</li><li>有一个onPressed属性来设置点击回调，当按钮按下时会执行该回调，如果不提供该回调则按钮会处于禁用状态，禁用状态不响应用户点击。</li></ul><h2 id="各种按钮"><a href="#各种按钮" class="headerlink" title="各种按钮"></a>各种按钮</h2><ul><li><p>ElevatedButton<br>即”漂浮”按钮，它默认带有阴影和灰色背景。按下后，阴影会变大。</p></li><li><p>TextButton即文本按钮，默认背景透明并不带阴影。按下后，会有背景色。</p></li><li><p>OutlineButton默认有一个边框，不带阴影且背景透明。按下后，边框颜色会变亮、同时出现背景和阴影(较弱)。</p></li><li><p>IconButton是一个可点击的Icon，不包括文字，默认没有背景，点击后会出现背景。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">children: &lt;Widget&gt;[</span><br><span class="line">              const Text(</span><br><span class="line">                &quot;You have many times:&quot;,</span><br><span class="line">                textAlign: TextAlign.left, //对其</span><br><span class="line">              ),</span><br><span class="line">              Text(</span><br><span class="line">                &#x27;$_counter&#x27;,</span><br><span class="line">                style: Theme.of(context).textTheme.headline4,</span><br><span class="line">              ),</span><br><span class="line">              ElevatedButton(</span><br><span class="line">                  onPressed: () &#123;&#125;, child: const Text(&quot;ElevatedButton&quot;)),</span><br><span class="line">              TextButton(onPressed: () &#123;&#125;, child: const Text(&quot;TextButton&quot;)),</span><br><span class="line">              OutlinedButton(</span><br><span class="line">                  onPressed: () &#123;&#125;, child: const Text(&quot;OutlinedButton&quot;)),</span><br><span class="line">              IconButton(onPressed: () &#123;&#125;, icon: const Icon(Icons.abc))</span><br><span class="line">            ]),</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果如下<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220210185953.png" alt="20220210185953"></p><h2 id="带图标的按钮"><a href="#带图标的按钮" class="headerlink" title="带图标的按钮"></a>带图标的按钮</h2><p>ElevatedButton、TextButton、OutlineButton都有一个icon 构造函数，通过它可以轻松创建带图标的按钮。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TextButton.icon(</span><br><span class="line">             icon: const Icon(Icons.add_a_photo),</span><br><span class="line">             label: const Text(&quot;&quot;),</span><br><span class="line">             onPressed: () &#123;&#125;,</span><br><span class="line">           ),</span><br><span class="line">         ]),</span><br></pre></td></tr></table></figure><p> 如下<br> <img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220210190540.png" alt="20220210190540"></p><h1 id="Image图像显示组件"><a href="#Image图像显示组件" class="headerlink" title="Image图像显示组件"></a>Image图像显示组件</h1><p>Image在显示图片时定义了一系列参数，通过这些参数我们可以控制图片的显示外观、大小、混合效果等。 Image 的主要参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">const Image(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    required this.image,</span><br><span class="line">    this.frameBuilder,</span><br><span class="line">    this.loadingBuilder,</span><br><span class="line">    this.errorBuilder,</span><br><span class="line">    this.semanticLabel,</span><br><span class="line">    this.excludeFromSemantics = false,</span><br><span class="line">    this.width,</span><br><span class="line">    this.height,</span><br><span class="line">    this.color,//图片的混合色值</span><br><span class="line">    this.opacity,//透明度</span><br><span class="line">    this.colorBlendMode,//混合模式</span><br><span class="line">    this.fit,//缩放模式</span><br><span class="line">    this.alignment = Alignment.center,</span><br><span class="line">    this.repeat = ImageRepeat.noRepeat,</span><br><span class="line">    this.centerSlice,</span><br><span class="line">    this.matchTextDirection = false,</span><br><span class="line">    this.gaplessPlayback = false,</span><br><span class="line">    this.isAntiAlias = false,</span><br><span class="line">    this.filterQuality = FilterQuality.low,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><ul><li>width、height<br>用于设置图片的宽、高，当不指定宽高时，图片会根据当前父容器的限制，尽可能的显示其原始大小，如果只设置width、height的其中一个，那么另一个属性默认会按比例缩放，但可以通过下面介绍的fit属性来指定适应规则。</li><li>fit<br>该属性用于在图片的显示空间和图片本身大小不同时指定图片的适应模式。适应模式是在BoxFit中定义，它是一个枚举类型，有如下值：</li></ul><ol><li>fill：会拉伸填充满显示空间，图片本身长宽比会发生变化，图片会变形。</li><li>cover：会按图片的长宽比放大后居中填满显示空间，图片不会变形，超出显示空间部分会被剪裁。</li><li>contain：这是图片的默认适应规则，图片会在保证图片本身长宽比不变的情况下缩放以适应当前显示空间，图片不会变形。</li><li>fitWidth：图片的宽度会缩放到显示空间的宽度，高度会按比例缩放，然后居中显示，图片不会变形，超出显示空间部分会被剪裁。</li><li>fitHeight：图片的高度会缩放到显示空间的高度，宽度会按比例缩放，然后居中显示，图片不会变形，超出显示空间部分会被剪裁。</li><li>none：图片没有适应策略，会在显示空间内显示图片，如果图片比显示空间大，则显示空间只会显示图片中间部分。</li></ol><h2 id="图片数据源"><a href="#图片数据源" class="headerlink" title="图片数据源"></a>图片数据源</h2><p>在Image的构造函数中有一个this.image ,这个就是一个 ImageProvider 的实现。<br></p><h3 id="加载assets下面的图片"><a href="#加载assets下面的图片" class="headerlink" title="加载assets下面的图片"></a>加载assets下面的图片</h3><p>在pubspec.yml中添加图片</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">assets:</span><br><span class="line">  - images/ic_launcher.png</span><br></pre></td></tr></table></figure><p>在代码中添加如下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const Image(image: AssetImage(&#x27;images/ic_launcher.png&#x27;)),</span><br></pre></td></tr></table></figure><p>效果如下<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220210192802.png" alt="20220210192802"></p><h3 id="从网络上加载图片"><a href="#从网络上加载图片" class="headerlink" title="从网络上加载图片"></a>从网络上加载图片</h3><pre><code> const Image(                  image: NetworkImage(                      &quot;https://docs.flutter.dev/assets/images/dash/dash-fainting.gif&quot;)),</code></pre><p>效果如下，gif图也很好的显示<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220210193559.png" alt="20220210193559"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;文本组件&quot;&gt;&lt;a href=&quot;#文本组件&quot; class=&quot;headerlink&quot; title=&quot;文本组件&quot;&gt;&lt;/a&gt;文本组件&lt;/h1&gt;&lt;h2 id=&quot;文本组件基本属性&quot;&gt;&lt;a href=&quot;#文本组件基本属性&quot; class=&quot;headerlink&quot; title=&quot;文</summary>
      
    
    
    
    <category term="技术生活 - 编程技术 - 移动端研发" scheme="https://www.memestarter.top/categories/%E6%8A%80%E6%9C%AF%E7%94%9F%E6%B4%BB-%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%A0%94%E5%8F%91/"/>
    
    
    <category term="flutter" scheme="https://www.memestarter.top/tags/flutter/"/>
    
    <category term="widget" scheme="https://www.memestarter.top/tags/widget/"/>
    
    <category term="组件" scheme="https://www.memestarter.top/tags/%E7%BB%84%E4%BB%B6/"/>
    
    <category term="Button" scheme="https://www.memestarter.top/tags/Button/"/>
    
    <category term="Image" scheme="https://www.memestarter.top/tags/Image/"/>
    
  </entry>
  
  <entry>
    <title>flutter开发之Dart语言和java语言区别</title>
    <link href="https://www.memestarter.top/2022/02/08/flutter%E5%BC%80%E5%8F%91%E4%B9%8BDart%E8%AF%AD%E8%A8%80%E5%92%8Cjava%E8%AF%AD%E8%A8%80%E5%8C%BA%E5%88%AB/"/>
    <id>https://www.memestarter.top/2022/02/08/flutter%E5%BC%80%E5%8F%91%E4%B9%8BDart%E8%AF%AD%E8%A8%80%E5%92%8Cjava%E8%AF%AD%E8%A8%80%E5%8C%BA%E5%88%AB/</id>
    <published>2022-02-08T11:08:00.000Z</published>
    <updated>2022-02-08T12:24:42.186Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为何要说java语法"><a href="#为何要说java语法" class="headerlink" title="为何要说java语法"></a>为何要说java语法</h1><p>当然了，编程语言都是互通的；如果会java或者其他语法学起来会相对轻松。由于之前对java语法比较熟悉。这里就和java做一个对比</p><h1 id="java语法和dart语法的对比和区别"><a href="#java语法和dart语法的对比和区别" class="headerlink" title="java语法和dart语法的对比和区别"></a>java语法和dart语法的对比和区别</h1><ol><li><p>主函数</p><ul><li>没有public static </li><li>命令参数List<String> args<br>函数体类似<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">void main() &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>没有public, private, protected关键字</p></li><li><p>创建对象，new可选</p></li><li><p>class中属性默认public，若声明私有，只需在属性名前加_</p></li><li><p>getter&#x2F;setter方法<br>java中是有函数定义getter和setter的，dart通过关键字<em>get</em>  <em>set</em> 来声明，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//返回值类型/get/外部可访问属性/方法体</span><br><span class="line">int get speed =&gt; _speed</span><br></pre></td></tr></table></figure></li><li><p>变量必须初始化，未初始化的变量值均为null</p></li><li><p>字符串可用单引号或者双引号，这点和JavaScript又有点类似</p></li><li><p>dart中没有interface关键字，每个类都可以做接口</p></li><li><p>函数无需声明可能抛出的异常类型，java中需要用关键字<em>throws</em>声明</p></li><li><p>捕获异常的时候dart有一个<em>on</em>关键字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">  // ···</span><br><span class="line">&#125; on Exception catch (e) &#123;</span><br><span class="line">  print(&#x27;Exception details:\n $e&#x27;);</span><br><span class="line">&#125; catch (e, s) &#123;</span><br><span class="line">  print(&#x27;Exception details:\n $e&#x27;);</span><br><span class="line">  print(&#x27;Stack trace:\n $s&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>dart语言是前面加一个下划线来实现变量或者方法为私有属性或者私有方法。</p></li><li><p>dart所独有的特征:mixins <br><br>mixins(混入)的定义是</p><blockquote><p>Mixins are a way of reusing a class’s code in multiple class hierarchies.<br>从目的看Mixins要解决的就是代码复用的问题<br>维基百科的解释<br>在面向对象的语言中,mixins类是一个可以把自己的方法提供给其他类使用，但却不需要成为其他类的父类。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">**注意**</span><br><span class="line">- mixins类只能继承自object</span><br><span class="line">- mixins类不能有构造函数</span><br><span class="line">- 一个类可以mixins多个mixins类</span><br><span class="line">- 可以mixins多个类，不破坏Flutter的单继承</span><br></pre></td></tr></table></figure></li><li><p>变量的定义</p><ol><li>var用来定义类型不变的变量。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var x = 10;//x是整数，之后x就不能赋值其他类型，这个和java一样</span><br></pre></td></tr></table></figure></li><li>dynamic和object<br>DART语言中 所有对象包括Function和null 都是object的子类型。这两个声明的变量，在后边可以改变类型。<br>二者的区别在于，dynamic声明的变量在编写代码的时候，可以动态的去写，编译器会默认你有这个变量或者方法，而不去报错。基于这个特点，就需要小心使用。如下<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dynamic a;</span><br><span class="line"> Object b = &quot;&quot;;</span><br><span class="line"> main() &#123;</span><br><span class="line">   a = &quot;&quot;;</span><br><span class="line">   printLengths();</span><br><span class="line"> &#125;   </span><br><span class="line"></span><br><span class="line"> printLengths() &#123;</span><br><span class="line">   // 正常</span><br><span class="line">    print(a.length);</span><br><span class="line">   // 报错 The getter &#x27;length&#x27; is not defined for the class &#x27;Object&#x27;</span><br><span class="line">   print(b.length);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>例子引用：<code>https://book.flutterchina.club/chapter1/dart.html#_1-4-1-%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E</code></p></blockquote></li></ol></li><li><p>final 和const 修饰的变量<br>两个都可以修饰变量，而且修饰的变量在运行时不可以改变。区别在于final修饰的值在定义变量的时候已经知道了变量的值。但是，const修饰的值在编译器运行的时候是可以计算的。例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const bar = 1000000;       // 定义常量值</span><br><span class="line">// bar =13;   // 出现异常，const修饰的变量不能调用setter方法，即：不能设值，只能在声明处设值</span><br><span class="line">const atm = 1.01325 * bar; // 值的表达式中的变量必须是编译时常量（bar）;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>dart中的函数</p><ol><li>包装一组函数参数，用[]标记为可选的位置参数，并放在参数列表的最后面。例如<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String say(String from, String msg, [String device]) &#123;</span><br><span class="line">    ///</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>可选的命名参数<br>函数定义：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void testFunction(&#123;string params1, bool params2&#125;) &#123;</span><br><span class="line">    // ... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>函数使用,必须指定变量名称<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testFunction(params1: &quot;1111&quot;, params2: true);</span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;为何要说java语法&quot;&gt;&lt;a href=&quot;#为何要说java语法&quot; class=&quot;headerlink&quot; title=&quot;为何要说java语法&quot;&gt;&lt;/a&gt;为何要说java语法&lt;/h1&gt;&lt;p&gt;当然了，编程语言都是互通的；如果会java或者其他语法学起来会相对轻松。由于</summary>
      
    
    
    
    <category term="技术生活 - 编程技术 - 移动端研发" scheme="https://www.memestarter.top/categories/%E6%8A%80%E6%9C%AF%E7%94%9F%E6%B4%BB-%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%A0%94%E5%8F%91/"/>
    
    
    <category term="flutter" scheme="https://www.memestarter.top/tags/flutter/"/>
    
    <category term="mac" scheme="https://www.memestarter.top/tags/mac/"/>
    
    <category term="android" scheme="https://www.memestarter.top/tags/android/"/>
    
    <category term="语法" scheme="https://www.memestarter.top/tags/%E8%AF%AD%E6%B3%95/"/>
    
    <category term="dart" scheme="https://www.memestarter.top/tags/dart/"/>
    
  </entry>
  
  <entry>
    <title>分享20220208</title>
    <link href="https://www.memestarter.top/2022/02/08/%E5%88%86%E4%BA%AB20220208/"/>
    <id>https://www.memestarter.top/2022/02/08/%E5%88%86%E4%BA%AB20220208/</id>
    <published>2022-02-08T11:00:48.000Z</published>
    <updated>2022-03-14T01:19:13.591Z</updated>
    
    <content type="html"><![CDATA[<ul><li>一款基于 Valine 衍生的简洁、安全的评论系统。</li></ul><p>-Waline 已经完成非常多优质功能，诸如：邮件（ 微信、 QQ、Telegram）通知，评论管理、评论删除、登录支持、Akismet、文章统计、多语言同步、基于 IP 的发布评论频率限制、 IP 黑名单、 重复内容检测、置顶评论、其它数据库支持（已支持 LeanCloud, MySQL, MongoDB, SQLite, PostgreSQL, CloudBase, Deta, 轻服务, GitHub）等等。最值得一提的是，它支持独立部署，您可以基于 Docker（docker-compose 或 Node），部署在自己的服务器上。<br><a href="https://waline.js.org/">https://waline.js.org/</a></p><ul><li><p>一日一技：macOS如何找回已经连接的Wi-Fi密码？<br><a href="https://www.kingname.info/2022/01/18/find-password/">https://www.kingname.info/2022/01/18/find-password/</a></p></li><li><p>如何快速入门一门知识<br><a href="https://inote.xyz/quic-learn/">https://inote.xyz/quic-learn/</a></p></li><li><p>财富常识（看完之后，你应该对地位比较淡化，也知道为何那么多人闷声发大财）<br>大多人都是生而为打工人，要跳脱这个死循环很难。但也可以从构建自己的资产开始，通过投资的方式获得创造被动财富的机会<br><a href="https://www.bmpi.dev/self/how-to-get-rich/">https://www.bmpi.dev/self/how-to-get-rich/</a></p></li><li><p>玩CASHFLOW打造你的财务自由之路<br><a href="https://www.bmpi.dev/money/play-cashflow-to-build-your-financial-freedom/">https://www.bmpi.dev/money/play-cashflow-to-build-your-financial-freedom/</a></p></li><li><p>经济机器是怎样运行的 (时长30分钟) Ray Dalio<br><a href="https://www.youtube.com/watch?v=rFV7wdEX-Mo&amp;feature=youtu.be">https://www.youtube.com/watch?v=rFV7wdEX-Mo&amp;feature=youtu.be</a></p></li><li><p>如何和专家沟通<br><a href="http://gtdstudy.com/post/cray-new-ideas/">http://gtdstudy.com/post/cray-new-ideas/</a></p></li><li><p>境外PayPal收取联盟营销等平台打款，无损AFF收款！（讲解了国外银行卡，PayPal，汇款等主题）<br><a href="https://www.eluyee.com/paypal-aff/">https://www.eluyee.com/paypal-aff/</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;一款基于 Valine 衍生的简洁、安全的评论系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;-Waline 已经完成非常多优质功能，诸如：邮件（ 微信、 QQ、Telegram）通知，评论管理、评论删除、登录支持、Akismet、文章统计、多语言同步、基于 IP 的发布评</summary>
      
    
    
    
    <category term="分享 - 资源搜集" scheme="https://www.memestarter.top/categories/%E5%88%86%E4%BA%AB-%E8%B5%84%E6%BA%90%E6%90%9C%E9%9B%86/"/>
    
    
    <category term="分享" scheme="https://www.memestarter.top/tags/%E5%88%86%E4%BA%AB/"/>
    
    <category term="Valine" scheme="https://www.memestarter.top/tags/Valine/"/>
    
    <category term="部署" scheme="https://www.memestarter.top/tags/%E9%83%A8%E7%BD%B2/"/>
    
    <category term="macos" scheme="https://www.memestarter.top/tags/macos/"/>
    
    <category term="财富" scheme="https://www.memestarter.top/tags/%E8%B4%A2%E5%AF%8C/"/>
    
    <category term="经济" scheme="https://www.memestarter.top/tags/%E7%BB%8F%E6%B5%8E/"/>
    
    <category term="PayPal" scheme="https://www.memestarter.top/tags/PayPal/"/>
    
    <category term="跨境" scheme="https://www.memestarter.top/tags/%E8%B7%A8%E5%A2%83/"/>
    
    <category term="AFF收款" scheme="https://www.memestarter.top/tags/AFF%E6%94%B6%E6%AC%BE/"/>
    
  </entry>
  
  <entry>
    <title>flutter组件wdidget系列-概述</title>
    <link href="https://www.memestarter.top/2022/02/06/flutter%E7%BB%84%E4%BB%B6wdidget%E7%B3%BB%E5%88%97-%E6%A6%82%E8%BF%B0/"/>
    <id>https://www.memestarter.top/2022/02/06/flutter%E7%BB%84%E4%BB%B6wdidget%E7%B3%BB%E5%88%97-%E6%A6%82%E8%BF%B0/</id>
    <published>2022-02-06T08:32:01.000Z</published>
    <updated>2022-02-10T11:40:23.753Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flutter-中万物皆为Widget"><a href="#Flutter-中万物皆为Widget" class="headerlink" title="Flutter 中万物皆为Widget"></a>Flutter 中万物皆为Widget</h1><p>在Flutter中几乎所有的对象都是一个 widget ，Flutter 中的 widget 的概念很广泛，它不仅可以表示UI元素，也可以表示一些功能性的组件如：用于手势检测的 GestureDetector 、用于APP主题数据传递的 Theme，用于对其的center  等等。如果有web前端开发经验，对于理解这些还稍微好点。html前端开发中诸如div span p hr 等也都是标签。标签也就是描述UI 如何布局的，在flutter中，可以借鉴这个去理解。其实，在flutter中，这些widget就是一个描述和标签类似，真正的渲染的时候，flutter引擎会自动根据widget描述去绘制UI 。</p><h2 id="一些要点"><a href="#一些要点" class="headerlink" title="一些要点"></a>一些要点</h2><ol><li>Key: 这个key属性类似于 React&#x2F;Vue 中的key<br>它的主要的作用是决定是否在下一次build时复用旧的 widget ，决定的条件在canUpdate()方法中。</li></ol><h2 id="flutter中UI如何绘制出来的？"><a href="#flutter中UI如何绘制出来的？" class="headerlink" title="flutter中UI如何绘制出来的？"></a>flutter中UI如何绘制出来的？</h2><p>记清楚4棵树就好了<br>既然 Widget 只是描述一个UI元素的配置信息，那么真正的布局、绘制是由谁来完成的呢？Flutter 框架的的处理流程是这样的：</p><ul><li>根据 Widget 树生成一个 Element 树，Element 树中的节点都继承自 Element 类。</li><li>根据 Element 树生成 Render 树（渲染树），渲染树中的节点都继承自RenderObject 类。</li><li>根据渲染树生成 Layer 树，然后上屏显示，Layer 树中的节点都继承自 Layer 类。</li><li>真正的布局和渲染逻辑在 Render 树中，Element 是 Widget 和 RenderObject 的粘合剂，可以理解为一个中间代理。<br>如下所示，屏幕真正显示出来的是layer树<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220210134418.png" alt="20220210134418"></li></ul><h2 id="StatefulWidget-和-StatelessWidget"><a href="#StatefulWidget-和-StatelessWidget" class="headerlink" title="StatefulWidget 和 StatelessWidget"></a>StatefulWidget 和 StatelessWidget</h2><p>StatelessWidget ，普通的无关，不改变的UI界面描述。由于它不需要维护场景，所以，它的build方法直接返回widget<br>StatefulWidget，表示widget运行过程中可能会变化的UI页面描述。它有一个state对象。它有一个createState方法，用于创建和 StatefulWidget 相关的状态，它在StatefulWidget 的生命周期中可能会被多次调用。例如，当一个 StatefulWidget 同时插入到 widget 树的多个位置时，Flutter 框架就会调用该方法为每一个位置生成一个独立的State实例，其实，本质上就是一个StatefulElement对应一个State实例。</p><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><p>一个 StatefulWidget 类会对应一个 State 类，State表示与其对应的 StatefulWidget 要维护的状态，State 中的保存的状态信息可以：</p><ul><li>在 widget 构建时可以被同步读取。</li><li>在 widget 生命周期中可以被改变，当State被改变时，可以手动调用其setState()方法通知Flutter 框架状态发生改变，</li><li>Flutter 框架在收到消息后，会重新调用其build方法重新构建 widget树，从而达到更新UI的目的。</li></ul><h3 id="state的声明周期方法"><a href="#state的声明周期方法" class="headerlink" title="state的声明周期方法"></a>state的声明周期方法</h3><ul><li>initState<br>当 widget 第一次插入到 widget 树时会被调用，对于每一个State对象，Flutter 框架只会调用一次该回调，所以，通常在该回调中做一些一次性的操作，如状态初始化、订阅子树的事件通知等</li><li>didChangeDependencies()<br>当State对象的依赖发生变化时会被调用；例如：在之前build() 中包含了一个InheritedWidget （第七章介绍），然后在之后的build() 中Inherited widget发生了变化，那么此时InheritedWidget的子 widget 的didChangeDependencies()回调都会被调用。典型的场景是当系统语言 Locale 或应用主题改变时，Flutter 框架会通知 widget 调用此回调。需要注意，组件第一次被创建后挂载的时候（包括重创建）对应的didChangeDependencies也会被调用。</li><li>build()<br>此回调读者现在应该已经相当熟悉了，它主要是用于构建 widget 子树的，会在如下场景被调用：</li></ul><p>1.在调用initState()之后。<br>2.在调用didUpdateWidget()之后。<br>3.在调用setState()之后。<br>4.在调用didChangeDependencies()之后。<br>5.在State对象从树中一个位置移除后（会调用deactivate）又重新插入到树的其它位置之后。</p><ul><li>reassemble()<br>此回调是专门为了开发调试而提供的，在热重载(hot reload)时会被调用，此回调在Release模式下永远不会被调用。</li><li>didUpdateWidget ()<br>在 widget 重新构建时，Flutter 框架会调用widget.canUpdate来检测 widget 树中同一位置的新旧节点，然后决定是否需要更新，如果widget.canUpdate返回true则会调用此回调。正如之前所述，widget.canUpdate会在新旧 widget 的 key 和 runtimeType 同时相等时会返回true，也就是说在在新旧 widget 的key和runtimeType同时相等时didUpdateWidget()就会被调用</li><li>deactivate()<br>当 State 对象从树中被移除时，会调用此回调。在一些场景下，Flutter 框架会将 State 对象重新插到树中，如包含此 State 对象的子树在树的一个位置移动到另一个位置时（可以通过GlobalKey 来实现）。如果移除后没有重新插入到树中则紧接着会调用dispose()方法。</li><li>dispose()<br>当 State 对象从树中被永久移除时调用；通常在此回调中释放资源。<br>完整生命周期<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220209211735.png" alt="20220209211735"></li></ul><h3 id="自定义widget"><a href="#自定义widget" class="headerlink" title="自定义widget"></a>自定义widget</h3><p>StatelessWidget 和 StatefulWidget 都是用于组合其它组件的，它们本身没有对应的 RenderObject；StatelessWidget 和 StatefulWidget 相当于把其他带有 RenderObject的对象组织起来，真正的渲染对象完成UI的绘制。所以自定义widget就需要继承自 RenderObject。例如Text Row …</p><p>如果组件不会包含子组件，则我们可以直接继承自 LeafRenderObjectWidget ，它是 RenderObjectWidget 的子类，而 RenderObjectWidget 继承自 Widget ，它的实现大致如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">abstract class LeafRenderObjectWidget extends RenderObjectWidget &#123;</span><br><span class="line">  const LeafRenderObjectWidget(&#123; Key? key &#125;) : super(key: key);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  LeafRenderObjectElement createElement() =&gt; LeafRenderObjectElement(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实，就是帮 widget 实现了createElement 方法，它会为组件创建一个 类型为 LeafRenderObjectElement 的 Element对象。如果自定义的 widget 可以包含子组件，则可以根据子组件的数量来选择继承SingleChildRenderObjectWidget 或 MultiChildRenderObjectWidget，它们也实现了createElement() 方法，返回不同类型的 Element 对象。</p><h3 id="flutter内置组件"><a href="#flutter内置组件" class="headerlink" title="flutter内置组件"></a>flutter内置组件</h3><p>Flutter 提供了一套丰富、强大的基础组件，在基础组件库之上 Flutter 又提供了一套 Material 风格（ Android 默认的视觉风格）和一套 Cupertino 风格（iOS视觉风格）的组件库。要使用基础组件库，需要先导入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#x27;package:flutter/widgets.dart&#x27;;</span><br></pre></td></tr></table></figure><p>这些基础组件包括<Br></p><ul><li>Text ：该组件可让您创建一个带格式的文本。</li><li>Row 、 Column ： 这些具有弹性空间的布局类 widget 可让您在水平（Row）和垂直（Column）方向上创建灵活的布局。其设计是基于 Web 开发中的 Flexbox 布局模型。</li><li>Stack  ： 取代线性布局 (译者语：和 Android 中的FrameLayout相似)，[Stack](<a href="https://docs.flutter.io/flutter/">https://docs.flutter.io/flutter/</a> widgets&#x2F;Stack-class.html)允许子 widget 堆叠， 你可以使用 Positioned  来定位他们相对于Stack的上下左右四条边的位置。Stacks是基于Web开发中的绝对定位（absolute positioning )布局模型设计的。</li><li>Container  ： Container 可让您创建矩形视觉元素。Container 可以装饰一个BoxDecoration  , 如 background、一个边框、或者一个阴影。 Container 也可以具有边距（margins）、填充(padding)和应用于其大小的约束(constraints)。另外， Container 可以使用矩阵在三维空间中对其进行变换。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Flutter-中万物皆为Widget&quot;&gt;&lt;a href=&quot;#Flutter-中万物皆为Widget&quot; class=&quot;headerlink&quot; title=&quot;Flutter 中万物皆为Widget&quot;&gt;&lt;/a&gt;Flutter 中万物皆为Widget&lt;/h1&gt;&lt;p&gt;在F</summary>
      
    
    
    
    <category term="技术生活 - 编程技术 - 移动端研发" scheme="https://www.memestarter.top/categories/%E6%8A%80%E6%9C%AF%E7%94%9F%E6%B4%BB-%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%A0%94%E5%8F%91/"/>
    
    
    <category term="flutter" scheme="https://www.memestarter.top/tags/flutter/"/>
    
    <category term="widget" scheme="https://www.memestarter.top/tags/widget/"/>
    
    <category term="mac" scheme="https://www.memestarter.top/tags/mac/"/>
    
    <category term="android" scheme="https://www.memestarter.top/tags/android/"/>
    
    <category term="组件" scheme="https://www.memestarter.top/tags/%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>分享-20220204</title>
    <link href="https://www.memestarter.top/2022/02/05/%E5%88%86%E4%BA%AB-20220204/"/>
    <id>https://www.memestarter.top/2022/02/05/%E5%88%86%E4%BA%AB-20220204/</id>
    <published>2022-02-04T18:33:58.000Z</published>
    <updated>2022-03-14T01:19:04.214Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>竟然有人分享这个ust年化20%的东西，还是非币圈人。。。。。<br><a href="https://www.hidandelion.com/anchor-protocol-earn-started-tutorial/">https://www.hidandelion.com/anchor-protocol-earn-started-tutorial/</a></p></li><li><p>2022 年要考虑的 7 种 Docker 替代方案<br><a href="https://www.techug.com/post/seven-docker-alternatives-to-be-considered-in-2022.html">https://www.techug.com/post/seven-docker-alternatives-to-be-considered-in-2022.html</a></p></li><li><p>这个网站提供3500多部高质量纪录片免费在线观看，不过都是英文的。<br><a href="https://ihavenotv.com/">https://ihavenotv.com/</a></p></li><li><p>How to Become a Blockchain Engineer（如何成为区块链工程师）<br><a href="https://betterprogramming.pub/how-to-become-a-blockchain-engineer-fa4386a0504f">https://betterprogramming.pub/how-to-become-a-blockchain-engineer-fa4386a0504f</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;竟然有人分享这个ust年化20%的东西，还是非币圈人。。。。。&lt;br&gt;&lt;a href=&quot;https://www.hidandelion.com/anchor-protocol-earn-started-tutorial/&quot;&gt;https://www.hida</summary>
      
    
    
    
    <category term="分享 - 资源搜集" scheme="https://www.memestarter.top/categories/%E5%88%86%E4%BA%AB-%E8%B5%84%E6%BA%90%E6%90%9C%E9%9B%86/"/>
    
    
    <category term="区块链" scheme="https://www.memestarter.top/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="币圈" scheme="https://www.memestarter.top/tags/%E5%B8%81%E5%9C%88/"/>
    
    <category term="Docker" scheme="https://www.memestarter.top/tags/Docker/"/>
    
    <category term="纪录片" scheme="https://www.memestarter.top/tags/%E7%BA%AA%E5%BD%95%E7%89%87/"/>
    
    <category term="免费" scheme="https://www.memestarter.top/tags/%E5%85%8D%E8%B4%B9/"/>
    
    <category term="分享" scheme="https://www.memestarter.top/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
</feed>
