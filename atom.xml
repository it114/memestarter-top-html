<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>张智进的博客</title>
  
  <subtitle>智进技术</subtitle>
  <link href="https://www.memestarter.top/atom.xml" rel="self"/>
  
  <link href="https://www.memestarter.top/"/>
  <updated>2022-03-06T14:43:56.974Z</updated>
  <id>https://www.memestarter.top/</id>
  
  <author>
    <name>zzj</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>每日分享-20220306</title>
    <link href="https://www.memestarter.top/2022/03/06/%E6%AF%8F%E6%97%A5%E5%88%86%E4%BA%AB-20220306/"/>
    <id>https://www.memestarter.top/2022/03/06/%E6%AF%8F%E6%97%A5%E5%88%86%E4%BA%AB-20220306/</id>
    <published>2022-03-06T12:21:14.000Z</published>
    <updated>2022-03-06T14:43:56.974Z</updated>
    
    <content type="html"><![CDATA[<p>常用多媒体软件的开源或免费替代<br><a href="https://www.imaegoo.com/2021/media-soft/">https://www.imaegoo.com/2021/media-soft/</a></p><p>读陌生领域文献，我劝你别读正文(做科研的人可以看一下)<br><a href="https://kaopubear.top/blog/2021-09-26-dont-read-full-text/">https://kaopubear.top/blog/2021-09-26-dont-read-full-text/</a></p><p>公司融资知识（老板们看看）<br><a href="https://blog.mikeoperfect.com/posts/32098/">https://blog.mikeoperfect.com/posts/32098/</a><br>文章比较短，打算入股别人公司的人也可以看看。看看最后一句话，回购，稀释，退出等。</p><p>智能合约检测工具<br><a href="https://www.frank.hk/blog/slither-solidity-scanner/">https://www.frank.hk/blog/slither-solidity-scanner/</a><br>总所周知，智能合约一旦发布，就无法修改；为此，安全性就显得尤为重要，这个工具提供了一些检测功能。</p><p>初来新加坡，一份简单的个人金融事务指南<br><a href="https://www.zackwu.com/posts/2021-09-22-personal-finance-in-singapore-for-expats/">https://www.zackwu.com/posts/2021-09-22-personal-finance-in-singapore-for-expats/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;常用多媒体软件的开源或免费替代&lt;br&gt;&lt;a href=&quot;https://www.imaegoo.com/2021/media-soft/&quot;&gt;https://www.imaegoo.com/2021/media-soft/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;读陌生领域文献，我劝你别读正文</summary>
      
    
    
    
    <category term="分享 - 每日分享" scheme="https://www.memestarter.top/categories/%E5%88%86%E4%BA%AB-%E6%AF%8F%E6%97%A5%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>springboot-2.x-log-system</title>
    <link href="https://www.memestarter.top/2022/03/03/springboot-2-x-log-system/"/>
    <id>https://www.memestarter.top/2022/03/03/springboot-2-x-log-system/</id>
    <published>2022-03-03T05:06:58.000Z</published>
    <updated>2022-03-03T05:29:08.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springboot日志系统的理解"><a href="#springboot日志系统的理解" class="headerlink" title="springboot日志系统的理解"></a>springboot日志系统的理解</h1><h2 id="日志归一系统"><a href="#日志归一系统" class="headerlink" title="日志归一系统"></a>日志归一系统</h2><p>写代码的时候突然对log感兴趣，想到了springboot之前了解的时候是依赖于sl4j实现的统一api，在编译的时候在决定用哪一个日志框架。但是翻了一下网上的文章。得出了<strong>Spring Boot 可以自动的适配日志框架，而且底层使用 SLF4 + LogBack</strong>的结论。<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220303131251.png" alt="20220303131251"></p><p>从图中可以看出几点</p><ol><li>所有其他日志系统例如，jul ，log4j ，logback 都是实现了和sl4j的桥接。</li><li>其中只有logback实现了sl4j，这个也是得出默认springboot支持logback的原因。</li></ol><h2 id="在springboot中，各个日志框架究竟是如何和平相处，并且相安无事的"><a href="#在springboot中，各个日志框架究竟是如何和平相处，并且相安无事的" class="headerlink" title="在springboot中，各个日志框架究竟是如何和平相处，并且相安无事的"></a>在springboot中，各个日志框架究竟是如何和平相处，并且相安无事的</h2><p>我们写代码，免不了使用第三方的库，假设第三方库没有实现sl4j的api，那么这个日志岂不是不受到springboot的统一管理了？？？不是这样的，就类似上面的spring-logging 这个库，一些第三方的流行的库，会有一些工具包来替换接管这些第三方系统的日志。<br>大致原理，如下，下面是一个sl4j官方的一个图。<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220303132843.png" alt="20220303132843"></p><h1 id="如何替换默认的logback的实现"><a href="#如何替换默认的logback的实现" class="headerlink" title="如何替换默认的logback的实现"></a>如何替换默认的logback的实现</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;    </span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;    </span><br><span class="line">    &lt;exclusions&gt;           </span><br><span class="line">        &lt;exclusion&gt;            </span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;                </span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        </span><br><span class="line">        &lt;/exclusion&gt;   </span><br><span class="line">    &lt;/exclusions&gt; </span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;    </span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    </span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt; </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;springboot日志系统的理解&quot;&gt;&lt;a href=&quot;#springboot日志系统的理解&quot; class=&quot;headerlink&quot; title=&quot;springboot日志系统的理解&quot;&gt;&lt;/a&gt;springboot日志系统的理解&lt;/h1&gt;&lt;h2 id=&quot;日志归一系</summary>
      
    
    
    
    <category term="技术生活 - 编程技术 - 后端技术" scheme="https://www.memestarter.top/categories/%E6%8A%80%E6%9C%AF%E7%94%9F%E6%B4%BB-%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF-%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="springboot" scheme="https://www.memestarter.top/tags/springboot/"/>
    
    <category term="log" scheme="https://www.memestarter.top/tags/log/"/>
    
    <category term="log4j" scheme="https://www.memestarter.top/tags/log4j/"/>
    
    <category term="sl4j" scheme="https://www.memestarter.top/tags/sl4j/"/>
    
    <category term="日志" scheme="https://www.memestarter.top/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>fix-macos-big-sur-crash</title>
    <link href="https://www.memestarter.top/2022/03/02/fix-macos-big-sur-crash/"/>
    <id>https://www.memestarter.top/2022/03/02/fix-macos-big-sur-crash/</id>
    <published>2022-03-02T13:03:20.000Z</published>
    <updated>2022-03-02T13:14:56.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>今天本来是用vscode写一个spring的小程序，编译的时候一直提示没有compile provider，百思不得其解。初步怀疑是maven和vscode的配置有关系。但是多番尝试依然无果。为了不浪费时间，还是决定intelj来开发，好久没有打开过intelj了，谁知道一打开就crash….今天真的是见了鬼。</p><h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><pre><code>1. 一番观察进程之后，排除了我下载的破解插件的原因。2. 软件兼容性方面，电脑自从上次没有用idea 大概没有安装太多第三方软件，初步排除3. 查看是否是因为系统资源不够等原因的时候，查看到mac os 系统版本，最近曾经升级过....</code></pre><p>茅塞顿开！！！</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>参考intelj 官方的答案：<a href="https://www.jetbrains.com/help/idea/directories-used-by-the-ide-to-store-settings-caches-plugins-and-logs.html#config-directory">https://www.jetbrains.com/help/idea/directories-used-by-the-ide-to-store-settings-caches-plugins-and-logs.html#config-directory</a></p><p>注意mac上如果直接删除参考如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -al ~/Library/Application\ Support/JetBrains   </span><br></pre></td></tr></table></figure><p>先查看自己的版本，然后决定是否备份一下配置文件。之后执行删除 <strong>JetBrains</strong> 下面的相关所有文件即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;今天本来是用vscode写一个spring的小程序，编译的时候一直提示没有compile provider，百思不得其解。初</summary>
      
    
    
    
    <category term="技术生活 - 编程技术 - bug-fix" scheme="https://www.memestarter.top/categories/%E6%8A%80%E6%9C%AF%E7%94%9F%E6%B4%BB-%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF-bug-fix/"/>
    
    
    <category term="maos" scheme="https://www.memestarter.top/tags/maos/"/>
    
    <category term="big sur" scheme="https://www.memestarter.top/tags/big-sur/"/>
    
    <category term="crash" scheme="https://www.memestarter.top/tags/crash/"/>
    
    <category term="idea" scheme="https://www.memestarter.top/tags/idea/"/>
    
    <category term="intelj" scheme="https://www.memestarter.top/tags/intelj/"/>
    
  </entry>
  
  <entry>
    <title>chrome浏览器安装Metamask</title>
    <link href="https://www.memestarter.top/2022/02/21/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E8%A3%85Metamask/"/>
    <id>https://www.memestarter.top/2022/02/21/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E8%A3%85Metamask/</id>
    <published>2022-02-21T02:19:26.000Z</published>
    <updated>2022-02-21T03:27:04.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MetaMask-为何物"><a href="#MetaMask-为何物" class="headerlink" title="MetaMask 为何物"></a>MetaMask 为何物</h1><blockquote><p>最初区块链不是很火，生态还不是很完善的时候，自己的账户（也就是一对公钥和私钥）要和区块链交互，可能就需要程序员用程序来实现。这对于普通人来说是不现实的。于是各种钱包诞生了。所谓的钱包其实也就是管理区块链账户（一对公私钥）的。MetaMask其实也可以理解是一个钱包，只不过呢，这个钱包是大多数的时候被以插件的形式安装在chrome的浏览器上。（说明：chrome也有移动版，这个时候和其他钱包差别不大，今天重点说的是浏览器端metamask）。</p></blockquote><blockquote><p>要想和区块链交互，例如玩游戏，做交易，都需要钱包来代理我们的交易，所以类似metamask，trust wallet ，imToken这种钱包是非常重要的。</p></blockquote><h1 id="MetaMask的安装"><a href="#MetaMask的安装" class="headerlink" title="MetaMask的安装"></a>MetaMask的安装</h1><pre><code>打开chrome浏览器，输入网址：https://metamask.io/（注意，切记对比别跑到钓鱼网站了）。点击download</code></pre><p>随后出现如下，安装到chrome中<br>    <img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220221103028.png" alt="20220221103028"></p><p>随后跳转到了<a href="https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn">https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn</a> ，这个地方应该需要科学上网才行。</p><h1 id="MetaMask的使用"><a href="#MetaMask的使用" class="headerlink" title="MetaMask的使用"></a>MetaMask的使用</h1><ul><li>MetaMask安装完成之后，可以导入或者生成助记词的方式创建一个钱包。注意创建的助记词一定用心保存。否则，一旦丢失， 账户资产全部归零。</li><li>类似MetaMask，imtoken这种钱包，一定注意甄别是否是正版。网上有很对李鬼app会盗取你的私钥或者助记词。一旦被盗用，您的财产就没了。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MetaMask-为何物&quot;&gt;&lt;a href=&quot;#MetaMask-为何物&quot; class=&quot;headerlink&quot; title=&quot;MetaMask 为何物&quot;&gt;&lt;/a&gt;MetaMask 为何物&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;最初区块链不是很火，生态还不是很完</summary>
      
    
    
    
    <category term="探索 - 区块链" scheme="https://www.memestarter.top/categories/%E6%8E%A2%E7%B4%A2-%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="区块链" scheme="https://www.memestarter.top/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="Metamask" scheme="https://www.memestarter.top/tags/Metamask/"/>
    
    <category term="chrome" scheme="https://www.memestarter.top/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>区块链游戏体验之从游戏到代码</title>
    <link href="https://www.memestarter.top/2022/02/21/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%B8%B8%E6%88%8F%E4%BD%93%E9%AA%8C%E4%B9%8B%E4%BB%8E%E6%B8%B8%E6%88%8F%E5%88%B0%E4%BB%A3%E7%A0%81/"/>
    <id>https://www.memestarter.top/2022/02/21/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%B8%B8%E6%88%8F%E4%BD%93%E9%AA%8C%E4%B9%8B%E4%BB%8E%E6%B8%B8%E6%88%8F%E5%88%B0%E4%BB%A3%E7%A0%81/</id>
    <published>2022-02-21T02:18:12.000Z</published>
    <updated>2022-02-21T03:37:39.882Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><blockquote><p>由于区块链游戏需要连接钱包，所以需要配置浏览器的MetaMask，并创建一个钱包。教程:<a href="https://www.memestarter.top/2022/02/21/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E8%A3%85Metamask">https://www.memestarter.top/2022/02/21/chrome浏览器安装Metamask</a>   .  在说后面的内容之前先说两个概念。区块链和区块链网络。<br>区块链。只要具有多节点数据同步出块机制的几乎都可以认为它是一个区块链。也就是一个永不停机的数据库。你也可以理解为一个银行。目前已知比较有名的区块链网络有以太坊（eth），币安连（bsc），比特币（btc）等。<br>区块链网络。用来标记一个区块链网络的一组概念。拿以太坊来说，他需要有一个chainID和rpcPoint来标记这个网络，这两个参数主要是供钱包在发送交易的时候，知道该和谁通信。</p></blockquote><p>有了这个概念之后。我们这次的目的是体验游戏，当然不可能在真实的环境下玩了，真实环境拿以太坊来说，交易一次几十美元,也就是几百人民币（具体多少要看交易的种类，gas等因素去考虑）。</p><h2 id="添加以太坊测试网络"><a href="#添加以太坊测试网络" class="headerlink" title="添加以太坊测试网络"></a>添加以太坊测试网络</h2><p>打开<a href="https://chainlist.org/">https://chainlist.org/</a> ,这个网址汇集了几乎流行的所有区块链的所有正式环境和测试环境的配置。如下所示，选择Rinkeby网络<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220221110337.png" alt="20220221110337"></p><p>点击connect之后，连接MetaMask，之后如下</p><p><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220221110423.png" alt="20220221110423"></p><p>然后点击Add to metamask 即可完成添加。<br>如下图，可以在MetaMask中看到这个网络。<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220221110541.png" alt="20220221110541"></p><h1 id="领取测试网络的测试代币"><a href="#领取测试网络的测试代币" class="headerlink" title="领取测试网络的测试代币"></a>领取测试网络的测试代币</h1><p>到水龙头网站领取：<a href="https://faucet.rinkeby.io/">https://faucet.rinkeby.io/</a> ，如果领取有问题可以留言，我这有点</p><h1 id="体验游戏"><a href="#体验游戏" class="headerlink" title="体验游戏"></a>体验游戏</h1><p>找到一个比较简单，而且带源码的游戏</p><ol><li>游戏网址 ：<a href="https://epic-game-buildspace-a2c4ixjyk-zlayine.vercel.app/">https://epic-game-buildspace-a2c4ixjyk-zlayine.vercel.app/</a> </li><li>博客网址：<a href="https://betterprogramming.pub/create-a-blockchain-game-with-solidity-web3-and-vue-js-c75eed4b49a6">https://betterprogramming.pub/create-a-blockchain-game-with-solidity-web3-and-vue-js-c75eed4b49a6</a></li><li>代码网址：<a href="https://github.com/zlayine/epic-game-buildspace">https://github.com/zlayine/epic-game-buildspace</a></li></ol><ul><li><p>连接<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220221110822.png" alt="20220221110822"></p></li><li><p>切换网络<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220221110733.png" alt="20220221110733"></p></li><li><p>选择角色<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220221110911.png" alt="20220221110911"></p></li><li><p>领取角色<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220221111146.png" alt="20220221111146"><br>然后点击下方的confirm确定</p></li><li><p>等待MetaMask把交易发送到区块链，等待区块链确认同步<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220221111243.png" alt="20220221111243"></p></li><li><p>mint之后自己的角色如下，并给我分配了大boss  elon。。。。<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220221111615.png" alt="20220221111615"></p></li></ul><h1 id="玩游戏"><a href="#玩游戏" class="headerlink" title="玩游戏"></a>玩游戏</h1><p>点击攻击elon，图片晃动，这里本来期望，会弹出MetaMask，让把这次攻击的结果提交区块链，或者区块链随机决定胜负的。看来这个游戏还不够完善。</p><p><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220221111729.png" alt="20220221111729"></p><p>无论如何，大致的区块链游戏也就这样，最简单的。但是也可以通过这个流程大致体会一下，目前区块链游戏发展阶段。正所谓：不完善的地方机会才多。目前区块链游戏大抵如此。更多的是偏向金融属性。例如，我们一开始游戏的时候，就需要mint一个角色，这个角色其实就是一个nft，非同质化代币。在一些游戏中，这些角色是可以买卖的。还有一些游戏中，这些nft，例如装备，角色，宝石，等是可以跨越游戏使用和转移的。这也是和传统游戏区别比较大的地方。</p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>体验到此结束，只能用一句话形容目前游戏的现状。现实很骨感，理想很丰满。相信未来的人，前仆后继；</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;由于区块链游戏需要连接钱包，所以需要配置浏览器的MetaMask，并创建一个钱包。教程:&lt;a hr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>每日分享20220212</title>
    <link href="https://www.memestarter.top/2022/02/12/%E6%AF%8F%E6%97%A5%E5%88%86%E4%BA%AB20220212/"/>
    <id>https://www.memestarter.top/2022/02/12/%E6%AF%8F%E6%97%A5%E5%88%86%E4%BA%AB20220212/</id>
    <published>2022-02-12T13:54:09.000Z</published>
    <updated>2022-02-13T01:12:23.023Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>超级好用的免费开源文件同步工具：Syncthing；作为一款P2P性质的文件同步工具，Syncthing在Github上广受欢迎，已经收获了42k的Star！<br>Syncthing有五大特点：<br>1、避免数据丢失<br>2、安全防范攻击者<br>3、便捷使用<br>4、自动化运行<br>5、高兼容性<br>详情： <a href="https://blog.didispace.com/tj-opensource-syncthing/">https://blog.didispace.com/tj-opensource-syncthing/</a></p></li><li><p>最优停止理论与导师选择<br><a href="https://blog.eastonman.com/blog/2021/12/optimal-stop/">https://blog.eastonman.com/blog/2021/12/optimal-stop/</a></p></li><li><p>a16z NFT 学习清单：社交代币、DAO、创作者经济<br><a href="https://imzl.com/a16z-nft-canon.html">https://imzl.com/a16z-nft-canon.html</a></p></li><li><p>后记：菠菜站点的攻克之旅；一个黑人网站的记录，挺有意思<br><a href="https://knightyun.github.io/2021/12/06/exploit-penetrate-bocai-website">https://knightyun.github.io/2021/12/06/exploit-penetrate-bocai-website</a></p></li><li><p>一个windows平台的沙盒软件，可以对程序从下到上进行全方面的隔离，最近的更新增加了中文支持。<br>比起windows自带的沙盒来说性能更高，交互更方便，毕竟win自带的本质上就是虚拟机，而这个可能是内核hook实现的吧，非常推荐，尤其是对付国内这些流氓软件<br><a href="https://sandboxie-plus.com/">https://sandboxie-plus.com/</a></p></li><li><p>承认自己的平庸，人生才会更幸福<br><a href="https://xqrp.com/660350.html">https://xqrp.com/660350.html</a></p></li><li><p>我理解的长期主义 （推荐阅读）<br><a href="https://imzhanghao.com/2021/10/26/long-termism/">https://imzhanghao.com/2021/10/26/long-termism/</a></p></li><li><p>一个15岁的小孩的博客，会的还挺多<br><a href="https://blog.baoshuo.ren/about/">https://blog.baoshuo.ren/about/</a></p></li><li><p>Google Adsense 收款流程（失败案例）<br><a href="https://5ime.cn/adsense.html">https://5ime.cn/adsense.html</a></p></li><li><p>读叔本华《人生的智慧》（美貌是一封公开的公开信）<br><a href="https://mazhuang.org/2021/10/25/the-wisdom-of-life/">https://mazhuang.org/2021/10/25/the-wisdom-of-life/</a></p></li><li><p>一个GA替代方案，就是今天加进站点的Umami，精简，漂亮，支持中文界面，还支持共享站点统计数据。<br>这篇文章说明了推荐理由。<br><a href="https://mantyke.icu/2021/umami-build/">https://mantyke.icu/2021/umami-build/</a></p></li><li><p>国内厂商应用商店跳转链接<br><a href="http://www.linchangyu.com/web/2021/10/21/Chinese_Android_Market_Schema.html">http://www.linchangyu.com/web/2021/10/21/Chinese_Android_Market_Schema.html</a></p></li><li><p>微软联合 Yandex 推出了 IndexNow，它提供了一种快速的方法让网站站长可以第一时间通知所有接入 IndexNow 的搜索引擎网站的内容发生了变化<br><a href="https://baiyun.me/using-indexnow">https://baiyun.me/using-indexnow</a></p></li><li><p>「内容农场」属实在玷污 Google 搜索结果（一群人靠拉低别人的体验赚钱）<br><a href="https://blog.ichr.me/post/evil-content-farm/">https://blog.ichr.me/post/evil-content-farm/</a></p></li><li><p>2020年我设定了两条交易纪律：<br>纪律一，每月仅在发工资的当日处理和投资相关的事情。<br>纪律二: 绝不主动向别人推荐 ETF 和股票<br>他们运行的非常良好，帮我节省了大量的时间和精力。<br><a href="http://mednoter.com/principles-by-ryan-lyu.html">http://mednoter.com/principles-by-ryan-lyu.html</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;超级好用的免费开源文件同步工具：Syncthing；作为一款P2P性质的文件同步工具，Syncthing在Github上广受欢迎，已经收获了42k的Star！&lt;br&gt;Syncthing有五大特点：&lt;br&gt;1、避免数据丢失&lt;br&gt;2、安全防范攻击者&lt;br&gt;3</summary>
      
    
    
    
    <category term="分享 - 每日分享" scheme="https://www.memestarter.top/categories/%E5%88%86%E4%BA%AB-%E6%AF%8F%E6%97%A5%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>flutter中布局类widget组件</title>
    <link href="https://www.memestarter.top/2022/02/11/flutter%E4%B8%AD%E5%B8%83%E5%B1%80%E7%B1%BBwidget%E7%BB%84%E4%BB%B6/"/>
    <id>https://www.memestarter.top/2022/02/11/flutter%E4%B8%AD%E5%B8%83%E5%B1%80%E7%B1%BBwidget%E7%BB%84%E4%BB%B6/</id>
    <published>2022-02-11T06:46:28.000Z</published>
    <updated>2022-02-12T00:56:01.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="widget布局组件原理"><a href="#widget布局组件原理" class="headerlink" title="widget布局组件原理"></a>widget布局组件原理</h1><p>flutter中布局从布局树的角度来说，大致分为三类：完全没有子节点，有且只有一个子节点的widget ，可以有多个子节点的widget。只有后两者才能成为布局widget。下班是这三类的说明和举例。</p><table><thead><tr><th align="left">widget名称</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">LeafRenderObjectWidget</td><td align="left">非容器类组件通常继承自这个</td><td align="left">Widget树的叶子节点，用于没有子节点的widget，通常基础组件都属于这一类，如Image。</td></tr><tr><td align="left">SingleChildRenderObjectWidget</td><td align="left">只能容纳单个组件的widget的基类</td><td align="left">只能有一个child Widget，如：ConstrainedBox、DecoratedBox等 MultiChildRenderObjectWidget</td></tr></tbody></table><blockquote><p>所有的widget都继承自 RenderObjectWidget，这个类中定义了创建、更新RenderObject的方法，子类必须实现他们，它是最终布局、渲染UI界面的对象的方法，其布局算法都是通过对应的RenderObject对象来实现的。</p></blockquote><h1 id="widget布局组件的两个形式"><a href="#widget布局组件的两个形式" class="headerlink" title="widget布局组件的两个形式"></a>widget布局组件的两个形式</h1><p>Flutter 中的整体渲染流程是 Widget -&gt; Element -&gt; RenderObejct -&gt; Layer 这样的过程，而 「Flutter 里的布局和绘制逻辑都在 RenderObejct」,而其中的布局，就是这里要说的。<Br><br>Flutter 中有两种布局模型：</p><ul><li>基于 RenderBox 的盒模型布局。</li><li>基于 Sliver ( RenderSliver ) 按需加载列表布局。<br>两种布局方式在细节上略有差异，但大体流程相同，布局流程如下：</li></ul><ol><li>上层组件向下层组件传递约束（constraints）条件。</li><li>下层组件确定自己的大小，然后告诉上层组件。注意下层组件的大小必须符合父组件的约束。</li><li>上层组件确定下层组件相对于自身的偏移和确定自身的大小（大多数情况下会根据子组件的大小来确定自身的大小）。</li></ol><h2 id="盒模型布局组件"><a href="#盒模型布局组件" class="headerlink" title="盒模型布局组件"></a>盒模型布局组件</h2><p>盒模型布局组件有两个特点：</p><ol><li>组件对应的渲染对象都继承自 RenderBox 类。</li><li>在布局过程中父级传递给子级的Constraints（约束） BoxConstraints 描述。</li></ol><p>ConstrainedBox用于对子组件添加额外的约束。被ConstrainedBox约束的组件，子组件的宽高以ConstrainedBox中设置的为准<br>例如以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ConstrainedBox(</span><br><span class="line">              constraints:</span><br><span class="line">                  const BoxConstraints(maxWidth: 300, minHeight: 40),</span><br><span class="line">              child: Container(</span><br><span class="line">                height: 1,</span><br><span class="line">                decoration: const BoxDecoration(color: Colors.red),</span><br><span class="line">              )),</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220211234015.png" alt="20220211234015"></p><p>container的高度设置为1实际绘制的高度是40；设置height为100 ，绘制高度也是100 </p><p>SizedBox用于给子元素指定固定的宽高。</p><h3 id="Row和Column"><a href="#Row和Column" class="headerlink" title="Row和Column"></a>Row和Column</h3><p>这两个组件比较简单，可以类比安卓开发的时候有一个线性布局。<br>构造方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Row(&#123;</span><br><span class="line">  ...  </span><br><span class="line">  TextDirection textDirection,    </span><br><span class="line">  MainAxisSize mainAxisSize = MainAxisSize.max,    </span><br><span class="line">  MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start,</span><br><span class="line">  VerticalDirection verticalDirection = VerticalDirection.down,  </span><br><span class="line">  CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center,</span><br><span class="line">  List&lt;Widget&gt; children = const &lt;Widget&gt;[],</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>TextDirection 组件排列方向</li><li>mainAxisSize 子元素的尺寸。mainAxisSize.max 尽可能的暂用空间。mainAxisSize.min尽可能的小的去占用。</li><li>mainAxisAlignment ：水平空间的对齐方式。MainAxisAlignment.start表示沿textDirection的初始方向对齐，如textDirection取值为TextDirection.ltr时，则MainAxisAlignment.start表示左对齐，textDirection取值为TextDirection.rtl时表示从右对齐。而MainAxisAlignment.end和MainAxisAlignment.start正好相反；MainAxisAlignment.center表示居中对齐。读者可以这么理解：textDirection是mainAxisAlignment的参考系。</li><li>verticalDirection：表示Row纵轴（垂直）的对齐方向，默认是VerticalDirection.down，表示从上到下。</li><li>crossAxisAlignment：表示子组件在纵轴方向的对齐方式，Row的高度等于子组件中最高的子元素高度，它的取值和MainAxisAlignment一样(包含start、end、 center三个值)，不同的是crossAxisAlignment的参考系是verticalDirection，即verticalDirection值为VerticalDirection.down时crossAxisAlignment.start指顶部对齐，verticalDirection值为VerticalDirection.up时，crossAxisAlignment.start指底部对齐；而crossAxisAlignment.end和crossAxisAlignment.start正好相反；</li></ul><h3 id="柔性布局Flex"><a href="#柔性布局Flex" class="headerlink" title="柔性布局Flex"></a>柔性布局Flex</h3><p>柔性布局和Expand结合可以把元素按照比例分割布局。</p><h3 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h3><p>超出屏幕显示范围会自动折行的布局称为流式布局。Flutter中通过Wrap和Flow来支持流式布局<br>wrap组件重要的属性</p><ul><li>spacing：主轴方向子widget的间距</li><li>runSpacing：次轴方向的间距</li><li>runAlignment：次轴方向的对齐方式</li></ul><h3 id="绝对布局Stack和Positioned"><a href="#绝对布局Stack和Positioned" class="headerlink" title="绝对布局Stack和Positioned"></a>绝对布局Stack和Positioned</h3><p>绝对布局、Android 中的 Frame 布局是相似的。子组件可以根据距父容器四个角的位置来确定自身的位置。Stack允许子组件堆叠，而Positioned用于根据Stack的四个角来确定子组件的位置。</p><p>stack重要属性</p><ul><li>alignment:Alignment.center , &#x2F;&#x2F;指定未定位或部分定位widget的对齐方式；这个决定原点</li><li>fit: StackFit.expand, &#x2F;&#x2F;未定位widget占满Stack整个空间</li></ul><p>Positioned构造函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const Positioned(&#123;</span><br><span class="line">  Key? key,</span><br><span class="line">  this.left, </span><br><span class="line">  this.top,</span><br><span class="line">  this.right,</span><br><span class="line">  this.bottom,</span><br><span class="line">  this.width,</span><br><span class="line">  this.height,</span><br><span class="line">  required Widget child,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>left、top 、right、 bottom分别代表离Stack左、上、右、底四边的距离。width和height用于指定需要定位元素的宽度和高度。</p><h2 id="容器类组件"><a href="#容器类组件" class="headerlink" title="容器类组件"></a>容器类组件</h2><p>Padding<br>可以给其子节点添加填充（留白），和边距效果类似。<br>EdgeInsets<br><strong>EdgeInsets提供的api</strong> </p><ul><li>fromLTRB(double left, double top, double right, double bottom)：分别指定四个方向的填充。</li><li>all(double value) : 所有方向均使用相同数值的填充。</li><li>only({left, top, right ,bottom })：可以设置具体某个方向的填充(可以同时指定多个方向)。</li><li>symmetric({ vertical, horizontal })：用于设置对称方向的填充，vertical指top和bottom，horizontal指left和right。</li></ul><h3 id="DecoratedBox"><a href="#DecoratedBox" class="headerlink" title="DecoratedBox"></a>DecoratedBox</h3><p>可以在其子组件绘制前(或后)绘制一些装饰（Decoration），如背景、边框、渐变等。</p><h3 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h3><p>Container是一个组合类容器，它本身不对应具体的RenderObject，它是DecoratedBox、ConstrainedBox、Transform、Padding、Align等组件组合的一个多功能容器，所以我们只需通过一个Container组件可以实现同时需要装饰、变换、限制的场景。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Container(&#123;</span><br><span class="line">  this.alignment,</span><br><span class="line">  this.padding, //容器内补白，属于decoration的装饰范围</span><br><span class="line">  Color color, // 背景色</span><br><span class="line">  Decoration decoration, // 背景装饰</span><br><span class="line">  Decoration foregroundDecoration, //前景装饰</span><br><span class="line">  double width,//容器的宽度</span><br><span class="line">  double height, //容器的高度</span><br><span class="line">  BoxConstraints constraints, //容器大小的限制条件</span><br><span class="line">  this.margin,//容器外补白，不属于decoration的装饰范围</span><br><span class="line">  this.transform, //变换</span><br><span class="line">  this.child,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="Sliver-薄片布局"><a href="#Sliver-薄片布局" class="headerlink" title="Sliver(薄片布局)"></a>Sliver(薄片布局)</h2><p>通常可滚动组件子组件比较多，如果一次性渲染和加载所有组件，需要消耗比较大的系统资源，严重影响系统性能。并且随着手势滑动的时候，需要不停的计算。Flutter中提出一个Sliver（中文为“薄片”的意思）概念，Sliver 可以包含一个或多个子组件。Sliver 的主要作用是配合：加载子组件并确定每一个子组件的布局和绘制信息，如果 Sliver 可以包含多个子组件时，通常会实现按需加载模型。<br><br>通过这个机制，只有当 Sliver 出现在视口中时才会去构建它，这种模型也称为“基于Sliver的列表按需加载模型”。可滚动组件中有很多都支持基于Sliver的按需加载模型，如ListView、GridView，但是也有不支持该模型的，如SingleChildScrollView。</p><blockquote><p>Flutter 中的可滚动主要由三个角色组成：Scrollable、Viewport 和 Sliver：</p><ol><li>Scrollable ：用于处理滑动手势，确定滑动偏移，滑动偏移变化时构建 Viewport 。</li><li>Viewport：显示的视窗，即列表的可视区域；</li><li>Sliver：视窗里显示的元素。</li></ol></blockquote><p>这几个的关系大致如下<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220211162027.png" alt="20220211162027"><br>说明：<br></p><ol><li>Scrollable 、 Viewport 和 Sliver 所占用的空间都是白色区域，也就是说，这部分是重合的。</li><li>从上到下的层级关系是scrollview ，viewPort  ，silver </li><li>按需加载需要最下层的silver来实现</li><li>图中的cacheExtent区域是为了让滑动更丝滑而存在的，这部分不显示在可见区域，只是在即将出现在可见区域的提前绘制。默认值是250大小。可以被改变</li></ol><p>绘制过程<br>具体布局过程：</p><ol><li>Scrollable 监听到用户滑动行为后，根据最新的滑动偏移构建 Viewport 。</li><li>Viewport 将当前视口信息和配置信息通过 SliverConstraints 传递给 Sliver。</li><li>Sliver 中对子组件（RenderBox）按需进行构建和布局，然后确认自身的位置、绘制等信息，保存在 geometry 中（一个 SliverGeometry 类型的对象）。<h3 id="SingleChildScrollView"><a href="#SingleChildScrollView" class="headerlink" title="SingleChildScrollView"></a>SingleChildScrollView</h3>SingleChildScrollView类似安卓的ScrollView ，只有一个子组件。需要注意的是SingleChildScrollView不支持silver的按需加载。如果有比较多的待滑动内容的时候，不要使用这个组件。</li></ol><h1 id="滑动组件"><a href="#滑动组件" class="headerlink" title="滑动组件"></a>滑动组件</h1><h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><h3 id="ListView是一个列表展示组件。它的构造方法可以传入一组widget"><a href="#ListView是一个列表展示组件。它的构造方法可以传入一组widget" class="headerlink" title="ListView是一个列表展示组件。它的构造方法可以传入一组widget"></a>ListView是一个列表展示组件。它的构造方法可以传入一组widget</h3><p>如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ListView(</span><br><span class="line">                  shrinkWrap: true,</span><br><span class="line">                  padding: const EdgeInsets.all(10),</span><br><span class="line">                  children: const [</span><br><span class="line">                    Text(&quot;data1&quot;),</span><br><span class="line">                    Text(&quot;data2&quot;),</span><br><span class="line">                    Text(&quot;data3&quot;),</span><br><span class="line">                    Text(&quot;data4&quot;),</span><br><span class="line">                    Text(&quot;data5&quot;),</span><br><span class="line">                    Text(&quot;data6&quot;),</span><br><span class="line">                    Text(&quot;data7&quot;),</span><br><span class="line">                    Text(&quot;data8&quot;),</span><br><span class="line">                    Text(&quot;data9&quot;),</span><br><span class="line">                    Text(&quot;data10&quot;),</span><br><span class="line">                  ])</span><br><span class="line">            ]),</span><br></pre></td></tr></table></figure><p>通常如果列表数量比较少，可以这么样做。如果列表数量比较多，这样就会消耗性能。</p><p><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220211170603.png" alt="20220211170603"></p><h3 id="ListView-builder适合批量创建列表元素"><a href="#ListView-builder适合批量创建列表元素" class="headerlink" title="ListView.builder适合批量创建列表元素"></a>ListView.builder适合批量创建列表元素</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Expanded(</span><br><span class="line">                  child: ListView.builder(</span><br><span class="line">                      itemCount: 100,</span><br><span class="line">                      itemExtent: 60,</span><br><span class="line">                      itemBuilder: (BuildContext context, int index) &#123;</span><br><span class="line">                        return ListTile(title: Text(&quot;ListViwe $index&quot;));</span><br><span class="line">                      &#125;))</span><br></pre></td></tr></table></figure><p> <img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220211171356.png" alt="20220211171356">                     </p><h3 id="ListView-separated"><a href="#ListView-separated" class="headerlink" title="ListView.separated"></a>ListView.separated</h3><p>ListView.separated可以在生成的列表项之间添加一个分割组件，它比ListView.builder多了一个separatorBuilder参数，该参数是一个分割组件生成器。使用场景，例如需要在每一个item之间添加分隔条的时候。</p><h3 id="ListVIew的性能"><a href="#ListVIew的性能" class="headerlink" title="ListVIew的性能"></a>ListVIew的性能</h3><ol><li>如果列表数据多，尽量使用listVIew.build或者listVIew.separated来构建列表。</li><li>尽量给列表指定 itemExtent 或 prototypeItem ，这样会减少引擎的计算时间</li></ol><h2 id="GridVIew"><a href="#GridVIew" class="headerlink" title="GridVIew"></a>GridVIew</h2><p>GridView 有着非常有用的应用场景。如下<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220211174838.png" alt="20220211174838"></p><p>GridView构造方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GridView(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  Axis scrollDirection = Axis.vertical,</span><br><span class="line">  bool reverse = false,</span><br><span class="line">  ScrollController controller,</span><br><span class="line">  ScrollPhysics physics,</span><br><span class="line">  bool shrinkWrap = false,</span><br><span class="line">  EdgeInsetsGeometry padding,</span><br><span class="line">  @required this.gridDelegate,</span><br><span class="line">  double cacheExtent,</span><br><span class="line">  List&lt;Widget&gt; children = const &lt;Widget&gt;[],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这么多参数中，重点需要关注的是gridDelegate这个参数。它其实是GridView组件如何控制排列子元素的一个委托<br>他的的类型是SliverGridDelegate。fultter中主要由两个实现类：</p><ol><li>SliverGridDelegateWithFixedCrossAxisCount：用于固定列数的场景；</li><li>SliverGridDelegateWithMaxCrossAxisExtent：用于子元素有最大宽度限制的场景；</li></ol><h3 id="SliverGridDelegateWithFixedCrossAxisCount"><a href="#SliverGridDelegateWithFixedCrossAxisCount" class="headerlink" title="SliverGridDelegateWithFixedCrossAxisCount"></a>SliverGridDelegateWithFixedCrossAxisCount</h3><p>主要用于横轴方向有固定元素的场景，构造方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SliverGridDelegateWithFixedCrossAxisCount(&#123;</span><br><span class="line">  @required this.crossAxisCount,</span><br><span class="line">  this.mainAxisSpacing = 0.0,</span><br><span class="line">  this.crossAxisSpacing = 0.0,</span><br><span class="line">  this.childAspectRatio = 1.0,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>参数解释</p><ul><li>crossAxisCount：列数，即一行有几个子元素；</li><li>mainAxisSpacing：主轴方向上的空隙间距；这里主轴是x轴</li><li>crossAxisSpacing：次轴方向上的空隙间距；这里次轴是y轴</li><li>childAspectRatio：子元素的宽高比例。</li></ul><p>下图说的比较清楚<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220211175521.png" alt="20220211175521"></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>GridView使用方法主要有以下几种</p><ul><li>GridView默认构造函数可以类比于ListView默认构造函数，适用于有限个数子元素的场景，因为GridView组件会一次性全部渲染children中的子元素组件；</li><li>GridView.builder构造函数可以类比于ListView.builder构造函数，适用于长列表的场景，因为GridView组件会根据子元素是否出现在屏幕内而动态创建销毁，减少内存消耗，更高效渲染；</li><li>GridView.count构造函数是GrdiView使用SliverGridDelegateWithFixedCrossAxisCount的简写（语法糖），效果完全一致；</li><li>GridView.extent构造函数式GridView使用SliverGridDelegateWithMaxCrossAxisExtent的简写（语法糖），效果完全一致。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;widget布局组件原理&quot;&gt;&lt;a href=&quot;#widget布局组件原理&quot; class=&quot;headerlink&quot; title=&quot;widget布局组件原理&quot;&gt;&lt;/a&gt;widget布局组件原理&lt;/h1&gt;&lt;p&gt;flutter中布局从布局树的角度来说，大致分为三类：完全没</summary>
      
    
    
    
    <category term="技术生活 - 编程技术 - 移动端研发" scheme="https://www.memestarter.top/categories/%E6%8A%80%E6%9C%AF%E7%94%9F%E6%B4%BB-%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%A0%94%E5%8F%91/"/>
    
    
    <category term="flutter" scheme="https://www.memestarter.top/tags/flutter/"/>
    
    <category term="布局" scheme="https://www.memestarter.top/tags/%E5%B8%83%E5%B1%80/"/>
    
    <category term="widget" scheme="https://www.memestarter.top/tags/widget/"/>
    
  </entry>
  
  <entry>
    <title>flutter组件widget系列-基础组件</title>
    <link href="https://www.memestarter.top/2022/02/10/flutter%E7%BB%84%E4%BB%B6widget%E7%B3%BB%E5%88%97-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6/"/>
    <id>https://www.memestarter.top/2022/02/10/flutter%E7%BB%84%E4%BB%B6widget%E7%B3%BB%E5%88%97-%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6/</id>
    <published>2022-02-10T09:10:43.000Z</published>
    <updated>2022-02-10T11:41:39.106Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文本组件"><a href="#文本组件" class="headerlink" title="文本组件"></a>文本组件</h1><h2 id="文本组件基本属性"><a href="#文本组件基本属性" class="headerlink" title="文本组件基本属性"></a>文本组件基本属性</h2><p>Text是最基本的文本组件，它的构造方法如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const Text(</span><br><span class="line">    String this.data, &#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    this.style,</span><br><span class="line">    this.strutStyle,</span><br><span class="line">    this.textAlign,</span><br><span class="line">    this.textDirection,</span><br><span class="line">    this.locale,</span><br><span class="line">    this.softWrap,</span><br><span class="line">    this.overflow,</span><br><span class="line">    this.textScaleFactor,</span><br><span class="line">    this.maxLines,</span><br><span class="line">    this.semanticsLabel,</span><br><span class="line">    this.textWidthBasis,</span><br><span class="line">    this.textHeightBehavior,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>  可以看出，有几个属性可以直接设置，例如：textAlign，textDirection，locale，overflow等。下边是一个例子<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const Text(</span><br><span class="line">            &quot;You have pushed  many timesYou have pushed  many timesYou have pushed  many timesYou have pushed  many times:&quot;,</span><br><span class="line">            textAlign: TextAlign.left, //对其</span><br><span class="line">            overflow: TextOverflow</span><br><span class="line">                .ellipsis, //截取部分展示：clip：直接截取 fade：渐隐 ellipsis：省略号，省略的部分是以单词为单位，而不是字母</span><br><span class="line">            textScaleFactor: 1, //设置字体大小的一种快捷方式</span><br><span class="line">            maxLines: 2, //最多允许几行</span><br><span class="line">            textDirection: TextDirection.ltr</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>  textStyle主要核心是设置文字的属性，粒度更加细</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">const Text(</span><br><span class="line">            &quot;You have pushed  many timesYou have pushed  many timesYou have pushed  many timesYou have pushed  many times:&quot;,</span><br><span class="line">            textAlign: TextAlign.left, //对其</span><br><span class="line">            overflow: TextOverflow</span><br><span class="line">                .ellipsis, //截取部分展示：clip：直接截取 fade：渐隐 ellipsis：省略号，省略的部分是以单词为单位，而不是字母</span><br><span class="line">            textScaleFactor: 1, //设置字体大小的一种快捷方式</span><br><span class="line">            maxLines: 2, //最多允许几行</span><br><span class="line">            textDirection: TextDirection.ltr,</span><br><span class="line">            style: TextStyle(</span><br><span class="line">                color: Colors.blue,</span><br><span class="line">                fontSize: 28.0,</span><br><span class="line">                fontWeight: FontWeight</span><br><span class="line">                    .bold, //字体粗细 一般使用的属性：FontWeight normal（默认） 、FontWeight bold（粗体）</span><br><span class="line">                letterSpacing: -1, //字母间距，默认0，负数间距越小，正数 间距越大</span><br><span class="line">                wordSpacing:</span><br><span class="line">                    1, //单词 间距，默认0，负数间距越小，正数 间距越大，注意和letterSpacing的区别，比如hello，h、e、l、l、o各是一个字母，hello是一个单词</span><br><span class="line">                height: 2, //会乘以fontSize做为行高</span><br><span class="line">                //阴影shadows://</span><br><span class="line">                fontFamily: &quot;Courier&quot;,</span><br><span class="line">                decorationColor: Colors.red, //划线颜色</span><br><span class="line">                decoration: TextDecoration.underline, //文字划线：下划线、上划线、中划线</span><br><span class="line">                decorationStyle: TextDecorationStyle.dotted),</span><br><span class="line">          ),</span><br></pre></td></tr></table></figure><p>  运行效果<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220210181013.png" alt="20220210181013"></p><h1 id="TextSpan"><a href="#TextSpan" class="headerlink" title="TextSpan"></a>TextSpan</h1><p>如果要实现同一段文字的不同部分有不同的样式，就要用到TextSpan了<Br><br>看一下它的定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const TextSpan(&#123;</span><br><span class="line">  TextStyle style, </span><br><span class="line">  Sting text,</span><br><span class="line">  List&lt;TextSpan&gt; children,</span><br><span class="line">  GestureRecognizer recognizer,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在使用的时候，可以分别使用Text.rice和RichText两种方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">children: &lt;Widget&gt;[</span><br><span class="line">            const Text(</span><br><span class="line">              &quot;You have many times:&quot;,</span><br><span class="line">              textAlign: TextAlign.left, //对其</span><br><span class="line">            ),</span><br><span class="line">            Text(</span><br><span class="line">              &#x27;$_counter&#x27;,</span><br><span class="line">              style: Theme.of(context).textTheme.headline4,</span><br><span class="line">            ),</span><br><span class="line">            const Text.rich(</span><br><span class="line">              TextSpan(text: &quot;hello Text.rich &quot;, children: [</span><br><span class="line">                TextSpan(</span><br><span class="line">                  text: &quot;red text span&quot;,</span><br><span class="line">                  style: TextStyle(fontSize: 16.0, color: Colors.red),</span><br><span class="line">                ),</span><br><span class="line">                TextSpan(</span><br><span class="line">                  text: &quot;red text span&quot;,</span><br><span class="line">                  style: TextStyle(fontSize: 16.0, color: Colors.green),</span><br><span class="line">                ),</span><br><span class="line">              ]),</span><br><span class="line">            ),</span><br><span class="line">            RichText(</span><br><span class="line">              text: const TextSpan(</span><br><span class="line">                  text: &quot;hello  RichText TextSpan &quot;,</span><br><span class="line">                  style: TextStyle(fontSize: 16.0, color: Colors.black),</span><br><span class="line">                  children: [</span><br><span class="line">                    TextSpan(</span><br><span class="line">                      text: &quot;red text span&quot;,</span><br><span class="line">                      style: TextStyle(fontSize: 16.0, color: Colors.red),</span><br><span class="line">                    ),</span><br><span class="line">                    TextSpan(</span><br><span class="line">                      text: &quot;yello text span&quot;,</span><br><span class="line">                      style: TextStyle(fontSize: 16.0, color: Colors.yellow),</span><br><span class="line">                    )</span><br><span class="line">                  ]),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行效果如下</p><p><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220210184244.png" alt="20220210184244"></p><h1 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h1><p>Material 组件库中提供了多种按钮组件如ElevatedButton、TextButton、OutlineButton等，它们都是直接或间接对RawMaterialButton组件的包装定制，所以他们大多数属性都和RawMaterialButton一样。在介绍各个按钮时我们先介绍其默认外观，而按钮的外观大都可以通过属性来自定义，我们在后面统一介绍这些属性。另外，所有 Material 库中的按钮都有如下相同点：</p><p>按下时都会有“水波动画”（又称“涟漪动画”，就是点击时按钮上会出现水波扩散的动画）。<br>有一个onPressed属性来设置点击回调，当按钮按下时会执行该回调，如果不提供该回调则按钮会处于禁用状态，禁用状态不响应用户点击。</p><ul><li>按下时都会有“水波动画”（又称“涟漪动画”，就是点击时按钮上会出现水波扩散的动画）。</li><li>有一个onPressed属性来设置点击回调，当按钮按下时会执行该回调，如果不提供该回调则按钮会处于禁用状态，禁用状态不响应用户点击。</li></ul><h2 id="各种按钮"><a href="#各种按钮" class="headerlink" title="各种按钮"></a>各种按钮</h2><ul><li><p>ElevatedButton<br>即”漂浮”按钮，它默认带有阴影和灰色背景。按下后，阴影会变大。</p></li><li><p>TextButton即文本按钮，默认背景透明并不带阴影。按下后，会有背景色。</p></li><li><p>OutlineButton默认有一个边框，不带阴影且背景透明。按下后，边框颜色会变亮、同时出现背景和阴影(较弱)。</p></li><li><p>IconButton是一个可点击的Icon，不包括文字，默认没有背景，点击后会出现背景。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">children: &lt;Widget&gt;[</span><br><span class="line">              const Text(</span><br><span class="line">                &quot;You have many times:&quot;,</span><br><span class="line">                textAlign: TextAlign.left, //对其</span><br><span class="line">              ),</span><br><span class="line">              Text(</span><br><span class="line">                &#x27;$_counter&#x27;,</span><br><span class="line">                style: Theme.of(context).textTheme.headline4,</span><br><span class="line">              ),</span><br><span class="line">              ElevatedButton(</span><br><span class="line">                  onPressed: () &#123;&#125;, child: const Text(&quot;ElevatedButton&quot;)),</span><br><span class="line">              TextButton(onPressed: () &#123;&#125;, child: const Text(&quot;TextButton&quot;)),</span><br><span class="line">              OutlinedButton(</span><br><span class="line">                  onPressed: () &#123;&#125;, child: const Text(&quot;OutlinedButton&quot;)),</span><br><span class="line">              IconButton(onPressed: () &#123;&#125;, icon: const Icon(Icons.abc))</span><br><span class="line">            ]),</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果如下<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220210185953.png" alt="20220210185953"></p><h2 id="带图标的按钮"><a href="#带图标的按钮" class="headerlink" title="带图标的按钮"></a>带图标的按钮</h2><p>ElevatedButton、TextButton、OutlineButton都有一个icon 构造函数，通过它可以轻松创建带图标的按钮。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TextButton.icon(</span><br><span class="line">             icon: const Icon(Icons.add_a_photo),</span><br><span class="line">             label: const Text(&quot;&quot;),</span><br><span class="line">             onPressed: () &#123;&#125;,</span><br><span class="line">           ),</span><br><span class="line">         ]),</span><br></pre></td></tr></table></figure><p> 如下<br> <img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220210190540.png" alt="20220210190540"></p><h1 id="Image图像显示组件"><a href="#Image图像显示组件" class="headerlink" title="Image图像显示组件"></a>Image图像显示组件</h1><p>Image在显示图片时定义了一系列参数，通过这些参数我们可以控制图片的显示外观、大小、混合效果等。 Image 的主要参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">const Image(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    required this.image,</span><br><span class="line">    this.frameBuilder,</span><br><span class="line">    this.loadingBuilder,</span><br><span class="line">    this.errorBuilder,</span><br><span class="line">    this.semanticLabel,</span><br><span class="line">    this.excludeFromSemantics = false,</span><br><span class="line">    this.width,</span><br><span class="line">    this.height,</span><br><span class="line">    this.color,//图片的混合色值</span><br><span class="line">    this.opacity,//透明度</span><br><span class="line">    this.colorBlendMode,//混合模式</span><br><span class="line">    this.fit,//缩放模式</span><br><span class="line">    this.alignment = Alignment.center,</span><br><span class="line">    this.repeat = ImageRepeat.noRepeat,</span><br><span class="line">    this.centerSlice,</span><br><span class="line">    this.matchTextDirection = false,</span><br><span class="line">    this.gaplessPlayback = false,</span><br><span class="line">    this.isAntiAlias = false,</span><br><span class="line">    this.filterQuality = FilterQuality.low,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><ul><li>width、height<br>用于设置图片的宽、高，当不指定宽高时，图片会根据当前父容器的限制，尽可能的显示其原始大小，如果只设置width、height的其中一个，那么另一个属性默认会按比例缩放，但可以通过下面介绍的fit属性来指定适应规则。</li><li>fit<br>该属性用于在图片的显示空间和图片本身大小不同时指定图片的适应模式。适应模式是在BoxFit中定义，它是一个枚举类型，有如下值：</li></ul><ol><li>fill：会拉伸填充满显示空间，图片本身长宽比会发生变化，图片会变形。</li><li>cover：会按图片的长宽比放大后居中填满显示空间，图片不会变形，超出显示空间部分会被剪裁。</li><li>contain：这是图片的默认适应规则，图片会在保证图片本身长宽比不变的情况下缩放以适应当前显示空间，图片不会变形。</li><li>fitWidth：图片的宽度会缩放到显示空间的宽度，高度会按比例缩放，然后居中显示，图片不会变形，超出显示空间部分会被剪裁。</li><li>fitHeight：图片的高度会缩放到显示空间的高度，宽度会按比例缩放，然后居中显示，图片不会变形，超出显示空间部分会被剪裁。</li><li>none：图片没有适应策略，会在显示空间内显示图片，如果图片比显示空间大，则显示空间只会显示图片中间部分。</li></ol><h2 id="图片数据源"><a href="#图片数据源" class="headerlink" title="图片数据源"></a>图片数据源</h2><p>在Image的构造函数中有一个this.image ,这个就是一个 ImageProvider 的实现。<br></p><h3 id="加载assets下面的图片"><a href="#加载assets下面的图片" class="headerlink" title="加载assets下面的图片"></a>加载assets下面的图片</h3><p>在pubspec.yml中添加图片</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">assets:</span><br><span class="line">  - images/ic_launcher.png</span><br></pre></td></tr></table></figure><p>在代码中添加如下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const Image(image: AssetImage(&#x27;images/ic_launcher.png&#x27;)),</span><br></pre></td></tr></table></figure><p>效果如下<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220210192802.png" alt="20220210192802"></p><h3 id="从网络上加载图片"><a href="#从网络上加载图片" class="headerlink" title="从网络上加载图片"></a>从网络上加载图片</h3><pre><code> const Image(                  image: NetworkImage(                      &quot;https://docs.flutter.dev/assets/images/dash/dash-fainting.gif&quot;)),</code></pre><p>效果如下，gif图也很好的显示<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220210193559.png" alt="20220210193559"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;文本组件&quot;&gt;&lt;a href=&quot;#文本组件&quot; class=&quot;headerlink&quot; title=&quot;文本组件&quot;&gt;&lt;/a&gt;文本组件&lt;/h1&gt;&lt;h2 id=&quot;文本组件基本属性&quot;&gt;&lt;a href=&quot;#文本组件基本属性&quot; class=&quot;headerlink&quot; title=&quot;文</summary>
      
    
    
    
    <category term="技术生活 - 编程技术 - 移动端研发" scheme="https://www.memestarter.top/categories/%E6%8A%80%E6%9C%AF%E7%94%9F%E6%B4%BB-%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%A0%94%E5%8F%91/"/>
    
    
    <category term="flutter" scheme="https://www.memestarter.top/tags/flutter/"/>
    
    <category term="widget" scheme="https://www.memestarter.top/tags/widget/"/>
    
    <category term="组件" scheme="https://www.memestarter.top/tags/%E7%BB%84%E4%BB%B6/"/>
    
    <category term="Button" scheme="https://www.memestarter.top/tags/Button/"/>
    
    <category term="Image" scheme="https://www.memestarter.top/tags/Image/"/>
    
  </entry>
  
  <entry>
    <title>flutter开发之Dart语言和java语言区别</title>
    <link href="https://www.memestarter.top/2022/02/08/flutter%E5%BC%80%E5%8F%91%E4%B9%8BDart%E8%AF%AD%E8%A8%80%E5%92%8Cjava%E8%AF%AD%E8%A8%80%E5%8C%BA%E5%88%AB/"/>
    <id>https://www.memestarter.top/2022/02/08/flutter%E5%BC%80%E5%8F%91%E4%B9%8BDart%E8%AF%AD%E8%A8%80%E5%92%8Cjava%E8%AF%AD%E8%A8%80%E5%8C%BA%E5%88%AB/</id>
    <published>2022-02-08T11:08:00.000Z</published>
    <updated>2022-02-08T12:24:42.186Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为何要说java语法"><a href="#为何要说java语法" class="headerlink" title="为何要说java语法"></a>为何要说java语法</h1><p>当然了，编程语言都是互通的；如果会java或者其他语法学起来会相对轻松。由于之前对java语法比较熟悉。这里就和java做一个对比</p><h1 id="java语法和dart语法的对比和区别"><a href="#java语法和dart语法的对比和区别" class="headerlink" title="java语法和dart语法的对比和区别"></a>java语法和dart语法的对比和区别</h1><ol><li><p>主函数</p><ul><li>没有public static </li><li>命令参数List<String> args<br>函数体类似<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">void main() &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>没有public, private, protected关键字</p></li><li><p>创建对象，new可选</p></li><li><p>class中属性默认public，若声明私有，只需在属性名前加_</p></li><li><p>getter&#x2F;setter方法<br>java中是有函数定义getter和setter的，dart通过关键字<em>get</em>  <em>set</em> 来声明，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//返回值类型/get/外部可访问属性/方法体</span><br><span class="line">int get speed =&gt; _speed</span><br></pre></td></tr></table></figure></li><li><p>变量必须初始化，未初始化的变量值均为null</p></li><li><p>字符串可用单引号或者双引号，这点和JavaScript又有点类似</p></li><li><p>dart中没有interface关键字，每个类都可以做接口</p></li><li><p>函数无需声明可能抛出的异常类型，java中需要用关键字<em>throws</em>声明</p></li><li><p>捕获异常的时候dart有一个<em>on</em>关键字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">  // ···</span><br><span class="line">&#125; on Exception catch (e) &#123;</span><br><span class="line">  print(&#x27;Exception details:\n $e&#x27;);</span><br><span class="line">&#125; catch (e, s) &#123;</span><br><span class="line">  print(&#x27;Exception details:\n $e&#x27;);</span><br><span class="line">  print(&#x27;Stack trace:\n $s&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>dart语言是前面加一个下划线来实现变量或者方法为私有属性或者私有方法。</p></li><li><p>dart所独有的特征:mixins <br><br>mixins(混入)的定义是</p><blockquote><p>Mixins are a way of reusing a class’s code in multiple class hierarchies.<br>从目的看Mixins要解决的就是代码复用的问题<br>维基百科的解释<br>在面向对象的语言中,mixins类是一个可以把自己的方法提供给其他类使用，但却不需要成为其他类的父类。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">**注意**</span><br><span class="line">- mixins类只能继承自object</span><br><span class="line">- mixins类不能有构造函数</span><br><span class="line">- 一个类可以mixins多个mixins类</span><br><span class="line">- 可以mixins多个类，不破坏Flutter的单继承</span><br></pre></td></tr></table></figure></li><li><p>变量的定义</p><ol><li>var用来定义类型不变的变量。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var x = 10;//x是整数，之后x就不能赋值其他类型，这个和java一样</span><br></pre></td></tr></table></figure></li><li>dynamic和object<br>DART语言中 所有对象包括Function和null 都是object的子类型。这两个声明的变量，在后边可以改变类型。<br>二者的区别在于，dynamic声明的变量在编写代码的时候，可以动态的去写，编译器会默认你有这个变量或者方法，而不去报错。基于这个特点，就需要小心使用。如下<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dynamic a;</span><br><span class="line"> Object b = &quot;&quot;;</span><br><span class="line"> main() &#123;</span><br><span class="line">   a = &quot;&quot;;</span><br><span class="line">   printLengths();</span><br><span class="line"> &#125;   </span><br><span class="line"></span><br><span class="line"> printLengths() &#123;</span><br><span class="line">   // 正常</span><br><span class="line">    print(a.length);</span><br><span class="line">   // 报错 The getter &#x27;length&#x27; is not defined for the class &#x27;Object&#x27;</span><br><span class="line">   print(b.length);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>例子引用：<code>https://book.flutterchina.club/chapter1/dart.html#_1-4-1-%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E</code></p></blockquote></li></ol></li><li><p>final 和const 修饰的变量<br>两个都可以修饰变量，而且修饰的变量在运行时不可以改变。区别在于final修饰的值在定义变量的时候已经知道了变量的值。但是，const修饰的值在编译器运行的时候是可以计算的。例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const bar = 1000000;       // 定义常量值</span><br><span class="line">// bar =13;   // 出现异常，const修饰的变量不能调用setter方法，即：不能设值，只能在声明处设值</span><br><span class="line">const atm = 1.01325 * bar; // 值的表达式中的变量必须是编译时常量（bar）;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>dart中的函数</p><ol><li>包装一组函数参数，用[]标记为可选的位置参数，并放在参数列表的最后面。例如<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String say(String from, String msg, [String device]) &#123;</span><br><span class="line">    ///</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>可选的命名参数<br>函数定义：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void testFunction(&#123;string params1, bool params2&#125;) &#123;</span><br><span class="line">    // ... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>函数使用,必须指定变量名称<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testFunction(params1: &quot;1111&quot;, params2: true);</span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;为何要说java语法&quot;&gt;&lt;a href=&quot;#为何要说java语法&quot; class=&quot;headerlink&quot; title=&quot;为何要说java语法&quot;&gt;&lt;/a&gt;为何要说java语法&lt;/h1&gt;&lt;p&gt;当然了，编程语言都是互通的；如果会java或者其他语法学起来会相对轻松。由于</summary>
      
    
    
    
    <category term="技术生活 - 编程技术 - 移动端研发" scheme="https://www.memestarter.top/categories/%E6%8A%80%E6%9C%AF%E7%94%9F%E6%B4%BB-%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%A0%94%E5%8F%91/"/>
    
    
    <category term="flutter" scheme="https://www.memestarter.top/tags/flutter/"/>
    
    <category term="mac" scheme="https://www.memestarter.top/tags/mac/"/>
    
    <category term="android" scheme="https://www.memestarter.top/tags/android/"/>
    
    <category term="语法" scheme="https://www.memestarter.top/tags/%E8%AF%AD%E6%B3%95/"/>
    
    <category term="dart" scheme="https://www.memestarter.top/tags/dart/"/>
    
  </entry>
  
  <entry>
    <title>每日分享20220208</title>
    <link href="https://www.memestarter.top/2022/02/08/%E6%AF%8F%E6%97%A5%E5%88%86%E4%BA%AB20220208/"/>
    <id>https://www.memestarter.top/2022/02/08/%E6%AF%8F%E6%97%A5%E5%88%86%E4%BA%AB20220208/</id>
    <published>2022-02-08T11:00:48.000Z</published>
    <updated>2022-02-08T11:05:25.796Z</updated>
    
    <content type="html"><![CDATA[<ul><li>一款基于 Valine 衍生的简洁、安全的评论系统。</li></ul><p>-Waline 已经完成非常多优质功能，诸如：邮件（ 微信、 QQ、Telegram）通知，评论管理、评论删除、登录支持、Akismet、文章统计、多语言同步、基于 IP 的发布评论频率限制、 IP 黑名单、 重复内容检测、置顶评论、其它数据库支持（已支持 LeanCloud, MySQL, MongoDB, SQLite, PostgreSQL, CloudBase, Deta, 轻服务, GitHub）等等。最值得一提的是，它支持独立部署，您可以基于 Docker（docker-compose 或 Node），部署在自己的服务器上。<br><a href="https://waline.js.org/">https://waline.js.org/</a></p><ul><li><p>一日一技：macOS如何找回已经连接的Wi-Fi密码？<br><a href="https://www.kingname.info/2022/01/18/find-password/">https://www.kingname.info/2022/01/18/find-password/</a></p></li><li><p>如何快速入门一门知识<br><a href="https://inote.xyz/quic-learn/">https://inote.xyz/quic-learn/</a></p></li><li><p>财富常识（看完之后，你应该对地位比较淡化，也知道为何那么多人闷声发大财）<br>大多人都是生而为打工人，要跳脱这个死循环很难。但也可以从构建自己的资产开始，通过投资的方式获得创造被动财富的机会<br><a href="https://www.bmpi.dev/self/how-to-get-rich/">https://www.bmpi.dev/self/how-to-get-rich/</a></p></li><li><p>玩CASHFLOW打造你的财务自由之路<br><a href="https://www.bmpi.dev/money/play-cashflow-to-build-your-financial-freedom/">https://www.bmpi.dev/money/play-cashflow-to-build-your-financial-freedom/</a></p></li><li><p>经济机器是怎样运行的 (时长30分钟) Ray Dalio<br><a href="https://www.youtube.com/watch?v=rFV7wdEX-Mo&amp;feature=youtu.be">https://www.youtube.com/watch?v=rFV7wdEX-Mo&amp;feature=youtu.be</a></p></li><li><p>如何和专家沟通<br><a href="http://gtdstudy.com/post/cray-new-ideas/">http://gtdstudy.com/post/cray-new-ideas/</a></p></li><li><p>境外PayPal收取联盟营销等平台打款，无损AFF收款！（讲解了国外银行卡，PayPal，汇款等主题）<br><a href="https://www.eluyee.com/paypal-aff/">https://www.eluyee.com/paypal-aff/</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;一款基于 Valine 衍生的简洁、安全的评论系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;-Waline 已经完成非常多优质功能，诸如：邮件（ 微信、 QQ、Telegram）通知，评论管理、评论删除、登录支持、Akismet、文章统计、多语言同步、基于 IP 的发布评</summary>
      
    
    
    
    <category term="分享 - 每日分享" scheme="https://www.memestarter.top/categories/%E5%88%86%E4%BA%AB-%E6%AF%8F%E6%97%A5%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="Valine" scheme="https://www.memestarter.top/tags/Valine/"/>
    
    <category term="部署" scheme="https://www.memestarter.top/tags/%E9%83%A8%E7%BD%B2/"/>
    
    <category term="macos" scheme="https://www.memestarter.top/tags/macos/"/>
    
    <category term="财富" scheme="https://www.memestarter.top/tags/%E8%B4%A2%E5%AF%8C/"/>
    
    <category term="经济" scheme="https://www.memestarter.top/tags/%E7%BB%8F%E6%B5%8E/"/>
    
    <category term="PayPal" scheme="https://www.memestarter.top/tags/PayPal/"/>
    
    <category term="跨境" scheme="https://www.memestarter.top/tags/%E8%B7%A8%E5%A2%83/"/>
    
    <category term="AFF收款" scheme="https://www.memestarter.top/tags/AFF%E6%94%B6%E6%AC%BE/"/>
    
  </entry>
  
  <entry>
    <title>flutter组件wdidget系列-概述</title>
    <link href="https://www.memestarter.top/2022/02/06/flutter%E7%BB%84%E4%BB%B6wdidget%E7%B3%BB%E5%88%97-%E6%A6%82%E8%BF%B0/"/>
    <id>https://www.memestarter.top/2022/02/06/flutter%E7%BB%84%E4%BB%B6wdidget%E7%B3%BB%E5%88%97-%E6%A6%82%E8%BF%B0/</id>
    <published>2022-02-06T08:32:01.000Z</published>
    <updated>2022-02-10T11:40:23.753Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flutter-中万物皆为Widget"><a href="#Flutter-中万物皆为Widget" class="headerlink" title="Flutter 中万物皆为Widget"></a>Flutter 中万物皆为Widget</h1><p>在Flutter中几乎所有的对象都是一个 widget ，Flutter 中的 widget 的概念很广泛，它不仅可以表示UI元素，也可以表示一些功能性的组件如：用于手势检测的 GestureDetector 、用于APP主题数据传递的 Theme，用于对其的center  等等。如果有web前端开发经验，对于理解这些还稍微好点。html前端开发中诸如div span p hr 等也都是标签。标签也就是描述UI 如何布局的，在flutter中，可以借鉴这个去理解。其实，在flutter中，这些widget就是一个描述和标签类似，真正的渲染的时候，flutter引擎会自动根据widget描述去绘制UI 。</p><h2 id="一些要点"><a href="#一些要点" class="headerlink" title="一些要点"></a>一些要点</h2><ol><li>Key: 这个key属性类似于 React&#x2F;Vue 中的key<br>它的主要的作用是决定是否在下一次build时复用旧的 widget ，决定的条件在canUpdate()方法中。</li></ol><h2 id="flutter中UI如何绘制出来的？"><a href="#flutter中UI如何绘制出来的？" class="headerlink" title="flutter中UI如何绘制出来的？"></a>flutter中UI如何绘制出来的？</h2><p>记清楚4棵树就好了<br>既然 Widget 只是描述一个UI元素的配置信息，那么真正的布局、绘制是由谁来完成的呢？Flutter 框架的的处理流程是这样的：</p><ul><li>根据 Widget 树生成一个 Element 树，Element 树中的节点都继承自 Element 类。</li><li>根据 Element 树生成 Render 树（渲染树），渲染树中的节点都继承自RenderObject 类。</li><li>根据渲染树生成 Layer 树，然后上屏显示，Layer 树中的节点都继承自 Layer 类。</li><li>真正的布局和渲染逻辑在 Render 树中，Element 是 Widget 和 RenderObject 的粘合剂，可以理解为一个中间代理。<br>如下所示，屏幕真正显示出来的是layer树<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220210134418.png" alt="20220210134418"></li></ul><h2 id="StatefulWidget-和-StatelessWidget"><a href="#StatefulWidget-和-StatelessWidget" class="headerlink" title="StatefulWidget 和 StatelessWidget"></a>StatefulWidget 和 StatelessWidget</h2><p>StatelessWidget ，普通的无关，不改变的UI界面描述。由于它不需要维护场景，所以，它的build方法直接返回widget<br>StatefulWidget，表示widget运行过程中可能会变化的UI页面描述。它有一个state对象。它有一个createState方法，用于创建和 StatefulWidget 相关的状态，它在StatefulWidget 的生命周期中可能会被多次调用。例如，当一个 StatefulWidget 同时插入到 widget 树的多个位置时，Flutter 框架就会调用该方法为每一个位置生成一个独立的State实例，其实，本质上就是一个StatefulElement对应一个State实例。</p><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><p>一个 StatefulWidget 类会对应一个 State 类，State表示与其对应的 StatefulWidget 要维护的状态，State 中的保存的状态信息可以：</p><ul><li>在 widget 构建时可以被同步读取。</li><li>在 widget 生命周期中可以被改变，当State被改变时，可以手动调用其setState()方法通知Flutter 框架状态发生改变，</li><li>Flutter 框架在收到消息后，会重新调用其build方法重新构建 widget树，从而达到更新UI的目的。</li></ul><h3 id="state的声明周期方法"><a href="#state的声明周期方法" class="headerlink" title="state的声明周期方法"></a>state的声明周期方法</h3><ul><li>initState<br>当 widget 第一次插入到 widget 树时会被调用，对于每一个State对象，Flutter 框架只会调用一次该回调，所以，通常在该回调中做一些一次性的操作，如状态初始化、订阅子树的事件通知等</li><li>didChangeDependencies()<br>当State对象的依赖发生变化时会被调用；例如：在之前build() 中包含了一个InheritedWidget （第七章介绍），然后在之后的build() 中Inherited widget发生了变化，那么此时InheritedWidget的子 widget 的didChangeDependencies()回调都会被调用。典型的场景是当系统语言 Locale 或应用主题改变时，Flutter 框架会通知 widget 调用此回调。需要注意，组件第一次被创建后挂载的时候（包括重创建）对应的didChangeDependencies也会被调用。</li><li>build()<br>此回调读者现在应该已经相当熟悉了，它主要是用于构建 widget 子树的，会在如下场景被调用：</li></ul><p>1.在调用initState()之后。<br>2.在调用didUpdateWidget()之后。<br>3.在调用setState()之后。<br>4.在调用didChangeDependencies()之后。<br>5.在State对象从树中一个位置移除后（会调用deactivate）又重新插入到树的其它位置之后。</p><ul><li>reassemble()<br>此回调是专门为了开发调试而提供的，在热重载(hot reload)时会被调用，此回调在Release模式下永远不会被调用。</li><li>didUpdateWidget ()<br>在 widget 重新构建时，Flutter 框架会调用widget.canUpdate来检测 widget 树中同一位置的新旧节点，然后决定是否需要更新，如果widget.canUpdate返回true则会调用此回调。正如之前所述，widget.canUpdate会在新旧 widget 的 key 和 runtimeType 同时相等时会返回true，也就是说在在新旧 widget 的key和runtimeType同时相等时didUpdateWidget()就会被调用</li><li>deactivate()<br>当 State 对象从树中被移除时，会调用此回调。在一些场景下，Flutter 框架会将 State 对象重新插到树中，如包含此 State 对象的子树在树的一个位置移动到另一个位置时（可以通过GlobalKey 来实现）。如果移除后没有重新插入到树中则紧接着会调用dispose()方法。</li><li>dispose()<br>当 State 对象从树中被永久移除时调用；通常在此回调中释放资源。<br>完整生命周期<br><img src="https://cdn.jsdelivr.net/gh/it114/blogcdn@master/blog/images20220209211735.png" alt="20220209211735"></li></ul><h3 id="自定义widget"><a href="#自定义widget" class="headerlink" title="自定义widget"></a>自定义widget</h3><p>StatelessWidget 和 StatefulWidget 都是用于组合其它组件的，它们本身没有对应的 RenderObject；StatelessWidget 和 StatefulWidget 相当于把其他带有 RenderObject的对象组织起来，真正的渲染对象完成UI的绘制。所以自定义widget就需要继承自 RenderObject。例如Text Row …</p><p>如果组件不会包含子组件，则我们可以直接继承自 LeafRenderObjectWidget ，它是 RenderObjectWidget 的子类，而 RenderObjectWidget 继承自 Widget ，它的实现大致如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">abstract class LeafRenderObjectWidget extends RenderObjectWidget &#123;</span><br><span class="line">  const LeafRenderObjectWidget(&#123; Key? key &#125;) : super(key: key);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  LeafRenderObjectElement createElement() =&gt; LeafRenderObjectElement(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实，就是帮 widget 实现了createElement 方法，它会为组件创建一个 类型为 LeafRenderObjectElement 的 Element对象。如果自定义的 widget 可以包含子组件，则可以根据子组件的数量来选择继承SingleChildRenderObjectWidget 或 MultiChildRenderObjectWidget，它们也实现了createElement() 方法，返回不同类型的 Element 对象。</p><h3 id="flutter内置组件"><a href="#flutter内置组件" class="headerlink" title="flutter内置组件"></a>flutter内置组件</h3><p>Flutter 提供了一套丰富、强大的基础组件，在基础组件库之上 Flutter 又提供了一套 Material 风格（ Android 默认的视觉风格）和一套 Cupertino 风格（iOS视觉风格）的组件库。要使用基础组件库，需要先导入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#x27;package:flutter/widgets.dart&#x27;;</span><br></pre></td></tr></table></figure><p>这些基础组件包括<Br></p><ul><li>Text ：该组件可让您创建一个带格式的文本。</li><li>Row 、 Column ： 这些具有弹性空间的布局类 widget 可让您在水平（Row）和垂直（Column）方向上创建灵活的布局。其设计是基于 Web 开发中的 Flexbox 布局模型。</li><li>Stack  ： 取代线性布局 (译者语：和 Android 中的FrameLayout相似)，[Stack](<a href="https://docs.flutter.io/flutter/">https://docs.flutter.io/flutter/</a> widgets&#x2F;Stack-class.html)允许子 widget 堆叠， 你可以使用 Positioned  来定位他们相对于Stack的上下左右四条边的位置。Stacks是基于Web开发中的绝对定位（absolute positioning )布局模型设计的。</li><li>Container  ： Container 可让您创建矩形视觉元素。Container 可以装饰一个BoxDecoration  , 如 background、一个边框、或者一个阴影。 Container 也可以具有边距（margins）、填充(padding)和应用于其大小的约束(constraints)。另外， Container 可以使用矩阵在三维空间中对其进行变换。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Flutter-中万物皆为Widget&quot;&gt;&lt;a href=&quot;#Flutter-中万物皆为Widget&quot; class=&quot;headerlink&quot; title=&quot;Flutter 中万物皆为Widget&quot;&gt;&lt;/a&gt;Flutter 中万物皆为Widget&lt;/h1&gt;&lt;p&gt;在F</summary>
      
    
    
    
    <category term="技术生活 - 编程技术 - 移动端研发" scheme="https://www.memestarter.top/categories/%E6%8A%80%E6%9C%AF%E7%94%9F%E6%B4%BB-%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%A0%94%E5%8F%91/"/>
    
    
    <category term="flutter" scheme="https://www.memestarter.top/tags/flutter/"/>
    
    <category term="widget" scheme="https://www.memestarter.top/tags/widget/"/>
    
    <category term="mac" scheme="https://www.memestarter.top/tags/mac/"/>
    
    <category term="android" scheme="https://www.memestarter.top/tags/android/"/>
    
    <category term="组件" scheme="https://www.memestarter.top/tags/%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>每日分享-20220204</title>
    <link href="https://www.memestarter.top/2022/02/05/%E6%AF%8F%E6%97%A5%E5%88%86%E4%BA%AB-20220204/"/>
    <id>https://www.memestarter.top/2022/02/05/%E6%AF%8F%E6%97%A5%E5%88%86%E4%BA%AB-20220204/</id>
    <published>2022-02-04T18:33:58.000Z</published>
    <updated>2022-02-08T11:04:00.731Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>竟然有人分享这个ust年化20%的东西，还是非币圈人。。。。。<br><a href="https://www.hidandelion.com/anchor-protocol-earn-started-tutorial/">https://www.hidandelion.com/anchor-protocol-earn-started-tutorial/</a></p></li><li><p>2022 年要考虑的 7 种 Docker 替代方案<br><a href="https://www.techug.com/post/seven-docker-alternatives-to-be-considered-in-2022.html">https://www.techug.com/post/seven-docker-alternatives-to-be-considered-in-2022.html</a></p></li><li><p>这个网站提供3500多部高质量纪录片免费在线观看，不过都是英文的。<br><a href="https://ihavenotv.com/">https://ihavenotv.com/</a></p></li><li><p>How to Become a Blockchain Engineer（如何成为区块链工程师）<br><a href="https://betterprogramming.pub/how-to-become-a-blockchain-engineer-fa4386a0504f">https://betterprogramming.pub/how-to-become-a-blockchain-engineer-fa4386a0504f</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;竟然有人分享这个ust年化20%的东西，还是非币圈人。。。。。&lt;br&gt;&lt;a href=&quot;https://www.hidandelion.com/anchor-protocol-earn-started-tutorial/&quot;&gt;https://www.hida</summary>
      
    
    
    
    <category term="分享 - 每日分享" scheme="https://www.memestarter.top/categories/%E5%88%86%E4%BA%AB-%E6%AF%8F%E6%97%A5%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="每日分享" scheme="https://www.memestarter.top/tags/%E6%AF%8F%E6%97%A5%E5%88%86%E4%BA%AB/"/>
    
    <category term="币圈" scheme="https://www.memestarter.top/tags/%E5%B8%81%E5%9C%88/"/>
    
    <category term="Docker" scheme="https://www.memestarter.top/tags/Docker/"/>
    
    <category term="纪录片" scheme="https://www.memestarter.top/tags/%E7%BA%AA%E5%BD%95%E7%89%87/"/>
    
    <category term="免费" scheme="https://www.memestarter.top/tags/%E5%85%8D%E8%B4%B9/"/>
    
    <category term="区块链" scheme="https://www.memestarter.top/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>春节越南行</title>
    <link href="https://www.memestarter.top/2022/01/27/travel/"/>
    <id>https://www.memestarter.top/2022/01/27/travel/</id>
    <published>2022-01-27T01:11:01.000Z</published>
    <updated>2022-02-18T07:40:18.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="我的所爱，在海云之间。"><a href="#我的所爱，在海云之间。" class="headerlink" title="我的所爱，在海云之间。"></a>我的所爱，在海云之间。</h2><blockquote><p>最喜欢骑着摩托在海云岭上拉到最大马力的感觉~</p></blockquote><p>刚开始想去越南只是听朋友说物价便宜，人美景也美，尤其是有海滩，决定下来之后就开始查很多网友的攻略，后来发现看攻略根本记不住啥，说来说去都是这么几个注意点。上班的时候就没啥心思了，很期待这场旅行，本来假期就不多，春节正好可以躲避寒冬，于是约了个好友一起去，人均花费在4000左右吧，要是平时去估计能便宜一半。我选择了在年三十就出发，即使是这样，我们真正玩的时间也只有三天，有大半时间都浪费在了路上，不过这一路上的经历回想起来也挺有意思的。在此还是强烈推荐平时淡季去，春节机票贵，火车票又一票难求，如果是淡季去的话直飞是最爽快的了。</p><span id="more"></span><p>我先是提前一个月抢到了从杭州到南宁的火车票，后来因为退票了只能去桂林中转，南宁到河内嘉林火车站的票也是提前2个星期在淘宝买的，签证淘宝只要240，3天就能出签还包邮。因为是春节，所有票都只能在网上买，机票啥的要比平时贵一半都不止。所以这次唯一的遗憾是没有提前抢好廉价机票。我推荐大家最好是提前抢好国内直飞岘港的廉价往返机票，这样可以省去好多时间。</p><p>至于旅行的路线，我觉得一个岘港就已经够了，去很多城市首先是累，再者浪费时间，因为越南的交通条件本身就不发达，一般距离较远的两个城市之间都是飞机或火车或sleeping bus，后面两个交通工具太慢了，春节期间的机票还死贵，所以我觉得玩一个岘港就足够了。我们在路上遇到的驴友也和我一样的观点，岘港有山有水有海滩，其他城市有的它都有，其他城市没有的它也有，所以好好的玩一个岘港，比在河内西贡芽庄美奈大叻岘港之间奔波要好得多。</p><p>要带的衣物不多，就一套短袖和一套长袖，还有穿去的一套厚的登山服，一路慢慢脱。签证、护照、充电器、充电宝这是必不可少的，除此之外带着足够的钱就可以了，转接插头也不用带，那边的两项插孔是完全兼容国内的插头的。</p><hr><h2 id="南宁——秀美的省会城市"><a href="#南宁——秀美的省会城市" class="headerlink" title="南宁——秀美的省会城市"></a>南宁——秀美的省会城市</h2><p>先是杭州东站坐火车到桂林，到桂林是第二天凌晨5点，还来不及看看漓江就坐上动车去南宁了，到南宁是第二天的中午，吃了碗米粉，比杭州的正宗，但比较脏，没有杭州的干净。接着去华夏银行换美元，发现银行的营业厅关门，然后我又跑了好几家，最后绝望的发现南宁市里所有银行正月初一都是休息的，只好在ATM自助机上取了1500人民币（不过后来根本没用到这些钱）。南宁给我的印象就是静静的，我最喜爱的是邕江。因为南宁到河内是晚上6点的火车，所以我下午打了辆的士决定去江滨公园逛逛，当开过邕江大桥的时候，第一眼就被它碧绿澄澈的水吸引了，这么干净的水在我们江浙一带是很少见的，它在阳光的照耀下波光粼粼，江边还有不少钓鱼的老头，游泳的小孩，散步的情侣。这一切构成了一副很安静闲适的画面，我当即拍下了这张照片。</p><p><img src="https://c4-q.mafengwo.net/s10/M00/4B/F1/wKgBZ1iW2qyAJbXHAAxupxS_7Ec88.jpeg?imageView2/2/w/680/q/90" alt="南宁·邕江"></p><hr><h2 id="嘉林——体验了国际列车"><a href="#嘉林——体验了国际列车" class="headerlink" title="嘉林——体验了国际列车"></a>嘉林——体验了国际列车</h2><p>在邕江逛到下午4点，就打车回火车站，坐上了去河内嘉林的火车。这趟国际列车和国内的绿皮火车一样，不过都是软卧，有隔开的包厢，还可以关门，睡着挺舒服，不过半夜要起来两次去过境边检，所以只能过了同登边检才能安心睡觉。</p><p><img src="https://a1-q.mafengwo.net/s10/M00/4E/19/wKgBZ1iW3R2ARuBWAADEfDnL5PI03.jpeg?imageView2/2/w/680/q/90" alt="越南的同登边检站"></p><p>到同登边检站是十分激动的，毕竟千里迢迢的终于到越南了，为了到嘉林不至于没钱打车，我在这个入境边检的地方换了100元，汇率是3150，比河内市里ATM机取的汇率要低。火车凌晨5点多到嘉林，嘉林火车站很小很破，出来之后有卖手机卡和换钱的小店，我们好多人在这里买手机卡又被坑了，包括我，花了150k买的Viettel卡以为是无限流量，结果只有200m流量，用完之后又要花钱充值的。所以大家千万别急着买手机卡和换钱，如果不是很急的话还是建议到河内市里去买，另外手机卡先问清楚流量再买，我后来又花100k买了张3GB流量的卡，2号回来的时候还有2个G多出来。换越盾可以网上先查一下不收手续费的本地银行，华夏银行每月有一笔境外取现是免费的，就算有手续费也不会很多，不论何时何地，ATM机里取钱汇率都是最划算的。河内街上到处都是带着银联标志的ATM机，只要带着银行卡，不用担心没地方取越盾。</p><hr><h2 id="河内——值得品味的老街"><a href="#河内——值得品味的老街" class="headerlink" title="河内——值得品味的老街"></a>河内——值得品味的老街</h2><p>到河内是1月29号凌晨5点多，之后我们打车去了圣约瑟夫大教堂，从大教堂一路在巷子中绕来绕去，先在路边摊吃了碗米粉，那个米粉的味道真的超级好，第一口汤汁我就爱上它了，之后在岘港我也吃了好几碗米粉，但味道都没有河内的好。越南的店铺都有小的青柠檬和朝天椒作为调味料，在米粉中挤点柠檬汁，再放点辣椒酱，味道比国内任何面啊粉啊都要好吃。吃完后我们走到还剑湖边，我在ATM机取了921人民币，300万越盾，那一刻确实有一种变身百万富翁的错觉哈哈。算了一下汇率有3257，比任何地方换都要高了。</p><p><img src="https://c2-q.mafengwo.net/s10/M00/58/89/wKgBZ1iW6N2Ac-wmACjdycIr2tw34.jpeg?imageView2/2/w/680/q/90" alt="圣约瑟夫大教堂"><br><img src="https://a3-q.mafengwo.net/s10/M00/58/BD/wKgBZ1iW6SKAD2w6AAtG6K1I6U081.jpeg?imageView2/2/w/680/q/90" alt="取了300万越盾"><br><img src="https://b2-q.mafengwo.net/s10/M00/58/8A/wKgBZ1iW6N2Aa2_bAAHETHlPzHE68.jpeg?imageView2/2/w/680/q/90"><br><img src="https://n1-q.mafengwo.net/s10/M00/58/8B/wKgBZ1iW6N-ATOdJAAF43uhSluU64.jpeg?imageView2/2/w/680/q/90"></p><p>换好钱我们在还剑湖周边的大街小巷乱逛了一通，体验了一下越南的风土人情。越南的建筑都很有特色，毕竟曾是法国的殖民地，所以大到大教堂，小到小酒馆，都很有法式风情。越南的贫富差距严重，大多数人都骑摩托车，街上还停着不少限量豪车。其他我感触最深的一点就是，街上太乱了！！连河内这个首都也很少有红绿灯，放眼望去，基本都是摩托车，在大街上走你千万不能玩手机或者左顾右盼，要快速地小跑而过。街边乱停乱放的现象也十分普遍，除非有撞伤人了，不然根本没有交警会来管。有些撞人事故也是自己处理的，我在路上就正好遇到一个被撞的妇女，本来以为会有交警来处理，结果那女的和司机都拍拍屁股就走了，好像什么事情都没发生过一样。</p><p><img src="https://p1-q.mafengwo.net/s10/M00/59/20/wKgBZ1iW6X2AZVGpAAHzR3F-svk23.jpeg?imageView2/2/w/680/q/90"><br><img src="https://p1-q.mafengwo.net/s10/M00/59/21/wKgBZ1iW6X6AWXRXAAKeZ8G7Oqs80.jpeg?imageView2/2/w/680/q/90"><br><img src="https://a4-q.mafengwo.net/s10/M00/59/23/wKgBZ1iW6X6AE5VgAAJVPwZB_YY44.jpeg?imageView2/2/w/680/q/90"><br><img src="https://c1-q.mafengwo.net/s10/M00/59/24/wKgBZ1iW6X-AOGbCAAJ0TdZSsPY36.jpeg?imageView2/2/w/680/q/90"></p><p>因为正好是春节，所以还剑湖周边都很有节日气氛，不同国籍的人坐在咖啡馆晒着太阳听着歌闲聊，街上吆喝的小贩，湖边摩肩接踵的人流，这些都比国内要热闹不少。</p><p><img src="https://c4-q.mafengwo.net/s10/M00/5A/FD/wKgBZ1iW65qAJl0sAA0B0cSXsfo35.jpeg?imageView2/2/w/680/q/90"><br><img src="https://b3-q.mafengwo.net/s10/M00/5B/00/wKgBZ1iW65-ABvbcACR3CtgCRTg92.jpeg?imageView2/2/w/680/q/90"><br><img src="https://a4-q.mafengwo.net/s10/M00/5B/AF/wKgBZ1iW7EuAL6LzACZ4gt7X6As85.jpeg?imageView2/2/w/680/q/90"></p><p>我们在还剑湖边上的一个旅行社买了晚上去岘港的sleeping bus汽车票，后来才知道260元人民币的价格买贵了，网上查的新咖啡也只要100多就行了。所以最好是去open bus的官网预定好。越南的open bus有好几家，我们坐的是camel bus，设施还算干净，只是旁边过道上也有人睡，味道难闻。</p><p><img src="https://a3-q.mafengwo.net/s10/M00/C9/A5/wKgBZ1iX2giALQ4fAAoAt49H0jg81.jpeg?imageView2/2/w/680/q/90"></p><p>晚上6点我们就坐上这个bus，第二天凌晨5点到了顺化，我们决定提前下车了，一是因为实在呆不下去，二是因为想看看顺化到岘港那段火车沿途的美景。这个sleeping bus根本无法sleep，不同国籍的人脱了鞋子挤在一个车厢里，味道真是酸爽，巴士开得还摇摇晃晃的，晚上我是一刻都没睡着。</p><p>凌晨我们在下车的旅行社遇到了几个也打算坐火车去岘港的中国小伙伴，跟着他们走到火车站买了票，因为网上都说顺化没啥好看的，所以我们没在顺化停留。</p><hr><h2 id="岘港——惊艳于海云之间"><a href="#岘港——惊艳于海云之间" class="headerlink" title="岘港——惊艳于海云之间"></a>岘港——惊艳于海云之间</h2><p>火车去岘港的途中一路美景，灵姑湾到海云岭的这一段山路被National Geographic票选为人生必去的50景之一。我们去的那天正好阳光明媚，一路的海边公路上骑摩托的人，海水在阳光照耀下波光粼粼，简直是美cry！</p><p><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/184997183.html"><img src="https://b2-q.mafengwo.net/s10/M00/CC/41/wKgBZ1iX3daASfWOAAimiGs_hvw90.jpeg?imageView2/2/w/680/q/90"></a><br><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/184997184.html"><img src="https://c1-q.mafengwo.net/s10/M00/CC/42/wKgBZ1iX3diAZl3gAAePlb4Dds416.jpeg?imageView2/2/w/680/q/90"></a><br><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/184997185.html"><img src="https://c2-q.mafengwo.net/s10/M00/CC/43/wKgBZ1iX3dmALjoWAAZk2ErMMvw09.jpeg?imageView2/2/w/680/q/90"></a><br><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/184997186.html"><img src="https://n4-q.mafengwo.net/s10/M00/CC/44/wKgBZ1iX3dqAOTFeAAeF-OppZ0c49.jpeg?imageView2/2/w/680/q/90"></a><br><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/184997187.html"><img src="https://b3-q.mafengwo.net/s10/M00/CC/44/wKgBZ1iX3duATxlVAAWF8R9O2gE54.jpeg?imageView2/2/w/680/q/90"></a></p><p>这段路真的是这段旅行中最最让我觉得惊艳的，当时完全不顾手机容量够不够，只管一直按拍照键，回到宾馆一看，每一张都是美景。</p><p>到了岘港后，我们就找了个sea view的宾馆先放行李，450k，其实只看得到一点点海，因为没有visa的卡，所以无法在booking上预定，只能一家家走过去问价格，真正的海景房一般都要800k+，很多还没房间了。</p><p><img src="https://c3-q.mafengwo.net/s10/M00/D2/8E/wKgBZ1iX5pCARx3xAAigLdtkjvY23.jpeg?imageView2/2/w/680/q/90"></p><p>因为在sleeping bus上根本没睡着过，我到了宾馆洗了个澡倒头就睡，小伙伴自己去玩了，醒来是傍晚6点了，下楼花150k租了一辆motorbike，很多好看的摩托已经被租掉了，只能选了辆外观一般的。摩托店的老板不错，还手把手教我怎么打火熄火，发着后要一点点给油才不至于熄火，还告诉我哪些按钮对应哪些灯。自动挡的摩托车还是挺简单的，唯一的难点是打火，打着后就和电瓶车差不多，而且越南的摩托开起来很爽，不断给油可以跑得比汽车还快，加速也很快，超车啥的最爽，减油后停得也很快，所以开习惯之后还是挺安全的。</p><p>我适应了一会儿马上就掌握了要领，问了路边的一个小哥加油站的位置，花了60k加满油，这还是挺划算的，折合人民币20元，能开一天。我晚上从美溪沙滩开到乐天超市一个来回，第二天又去海云关一个来回，回来油箱还有的剩下。</p><p>加完油我按着地图的指示去了乐天超市买了一双人字拖，买了点酸奶喝，还买了几盒咖啡打算带回去。在这里提一下越南的物价吧，越南的物价比国内普遍要便宜30%左右，酸奶很正宗，而且比国内便宜一半都不止，咖啡也很正宗，很多咖啡都停止出口到中国了，但在这里的超市都买得到。</p><p><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/185017920.html"><img src="https://a1-q.mafengwo.net/s10/M00/DA/79/wKgBZ1iX70uAUwAfAAlgigScCmE00.jpeg?imageView2/2/w/680/q/90"></a></p><p>超市的停车场都是摩托，却鲜有汽车，进去门卫会给你个号码，出来后再把号码还给他，在越南停车都是免费的。<br><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/185017921.html"><img src="https://b2-q.mafengwo.net/s10/M00/DA/7B/wKgBZ1iX70yAU-RcAAmdDtqnyOg65.jpeg?imageView2/2/w/680/q/90"></a><br><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/185017922.html"><img src="https://p4-q.mafengwo.net/s10/M00/DA/7C/wKgBZ1iX702APYdkAAO0Tw0EWGw57.jpeg?imageView2/2/w/680/q/90"></a></p><p>在超市买完东西，我又骑着摩托沿着美溪海岸开了一圈，美溪沙滩人很少，海水还算干净，浪有点大，适合冲浪，不过我没敢下水，海风吹着脸庞，听浪潮拍打的声音，感觉超级relax。</p><p><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/185019577.html"><img src="https://a1-q.mafengwo.net/s10/M00/DB/98/wKgBZ1iX8MSAOJSbAAqU4qXFPIs14.jpeg?imageView2/2/w/680/q/90"></a><br><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/185019578.html"><img src="https://n2-q.mafengwo.net/s10/M00/DB/9C/wKgBZ1iX8MmAPl_yACFh-RELFmw33.jpeg?imageView2/2/w/680/q/90"></a></p><p>回宾馆又是倒头就睡，之前听朋友说去海云关骑摩托很爽，所以第二天开着摩托沿着岘港的海岸公路，去海云关和灵姑湾溜达了一圈，大晴天的在海岸线上开摩托车真是超级爽，可惜后来到海云关就下毛毛雨了，山上很冷，想去的朋友一定要提前带件外套，我在回来之后头都被冻得很晕，要不是及时洗个热水澡吃了点辣椒驱寒，肯定会发烧。海云关是我在岘港玩得最high的一个地方，沿着盘山公路开上去，可以开得比汽车还快，旁边就是一望无际的大海。一下子就感觉好自由，所有烦恼都没有，心胸也一下子开阔了。</p><p><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/185024127.html"><img src="https://p3-q.mafengwo.net/s10/M00/DE/A6/wKgBZ1iX9LmAYeQsAAp08TAF1Qg47.jpeg?imageView2/2/w/680/q/90"></a><br>早晨来到美溪沙滩拍了张全景照<br><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/185024128.html"><img src="https://b3-q.mafengwo.net/s10/M00/DE/B0/wKgBZ1iX9MqAbqPPAApGGJTrFfo41.jpeg?imageView2/2/w/680/q/90"></a><br>岘港的dragon bridge<br><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/185024129.html"><img src="https://a3-q.mafengwo.net/s10/M00/DE/B2/wKgBZ1iX9MuAAsqCAAlqVX6e8Po61.jpeg?imageView2/2/w/680/q/90"></a><br><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/185024130.html"><img src="https://n4-q.mafengwo.net/s10/M00/DE/B4/wKgBZ1iX9M2ARSf9AAkjcJmSQIs35.jpeg?imageView2/2/w/680/q/90"></a><br>海云关上还是有不少中国人的，在此一个河南大哥帮我拍了一张。<br><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/185024131.html"><img src="https://a2-q.mafengwo.net/s10/M00/DE/B6/wKgBZ1iX9M-ASnxgAApYyaYClnc47.jpeg?imageView2/2/w/680/q/90"></a><br><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/185024132.html"><img src="https://n2-q.mafengwo.net/s10/M00/DE/B6/wKgBZ1iX9NCAQ91CAAcXnUb6k_U71.jpeg?imageView2/2/w/680/q/90"></a><br><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/185024133.html"><img src="https://c2-q.mafengwo.net/s10/M00/DE/B8/wKgBZ1iX9NGARO4GAAhjCoHTLx400.jpeg?imageView2/2/w/680/q/90"></a><br><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/185024134.html"><img src="https://c4-q.mafengwo.net/s10/M00/DE/B8/wKgBZ1iX9NKABs3RAAdjtb56m8g17.jpeg?imageView2/2/w/680/q/90"></a><br><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/185024135.html"><img src="https://n2-q.mafengwo.net/s10/M00/DE/BA/wKgBZ1iX9NSAUDtdAAhjsfdEQ7k80.jpeg?imageView2/2/w/680/q/90"></a></p><hr><h2 id="会安——灯火阑珊的古镇"><a href="#会安——灯火阑珊的古镇" class="headerlink" title="会安——灯火阑珊的古镇"></a>会安——灯火阑珊的古镇</h2><p>在岘港玩了一天，傍晚我被朋友拉着去了会安，在印象里，会安古镇只有晚上几盏灯笼比较好看，除此之外还有一个占婆岛值得一玩。但这次去，我感到遗憾的是，到会安的那天正好下雨，所以只能在会安古镇的小餐馆喝喝咖啡吃点米粉，去占婆岛潜水的计划完全泡汤了。不过会安古镇热闹繁华的夜晚还是给我留下了深刻的印象，路边有很多各种好吃的小吃，抬头一望总能看到五颜六色的灯笼，旁边还时而走过几个美女，视觉和味觉都能得到很好的满足。会安的很多hotel都有小泳池，可以惬意的游一圈，但天气有点冷，再加上那天受凉了，所以没下水。价格比岘港只多了50k，却是3星级的，设施环境啥的都比较好。</p><p><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/185041518.html"><img src="https://c2-q.mafengwo.net/s10/M00/EA/2A/wKgBZ1iYBYyASDa4AAkPoKEePmE02.jpeg?imageView2/2/w/680/q/90"></a><br><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/185041519.html"><img src="https://b4-q.mafengwo.net/s10/M00/EA/2C/wKgBZ1iYBY2AVEa1AAhxlrPQwrs36.jpeg?imageView2/2/w/680/q/90"></a><br><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/185041520.html"><img src="https://a4-q.mafengwo.net/s10/M00/EA/2D/wKgBZ1iYBY-AT0hmAAmBZUKRxSM81.jpeg?imageView2/2/w/680/q/90"></a><br><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/185041521.html"><img src="https://n2-q.mafengwo.net/s10/M00/EA/32/wKgBZ1iYBZSAbdY2ACpC77g4x2Q72.jpeg?imageView2/2/w/680/q/90"></a><br><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/185041522.html"><img src="https://a1-q.mafengwo.net/s10/M00/EA/35/wKgBZ1iYBZmAFNH_AB4P44TMjGI14.jpeg?imageView2/2/w/680/q/90"></a><br><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/185041523.html"><img src="https://n1-q.mafengwo.net/s10/M00/EA/36/wKgBZ1iYBZyAVoMiAB9Vd-jmWDE82.jpeg?imageView2/2/w/680/q/90"></a><br><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/185041524.html"><img src="https://n4-q.mafengwo.net/s10/M00/EA/3A/wKgBZ1iYBaGAYdFCACVFLc6_RY898.jpeg?imageView2/2/w/680/q/90"></a></p><p>逛完会安古镇，回到宾馆洗个热水澡，出了一身汗，第二天就没受凉头晕的感觉了，本来想去占婆岛，不过天公不作美，只能在古镇到处走走。找了个小咖啡馆喝滴壶咖啡喝到下午，打算回岘港，不过出租车都要100人民币的样子，网上查了一下有巴士直接到岘港的，是黄色车身的大巴，具体是在下面地图的黄色标注位置。</p><p><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/185043864.html"><img src="https://b1-q.mafengwo.net/s10/M00/EB/B2/wKgBZ1iYB72ARXtDAAEb9YzA23045.jpeg?imageView2/2/w/680/q/90"></a><br>下面是一些雨天在会安街上闲逛时拍的风景。<br><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/185045047.html"><img src="https://a1-q.mafengwo.net/s10/M00/EC/84/wKgBZ1iYCMKAbU0KABF_a_6TfIw03.jpeg?imageView2/2/w/680/q/90"></a><br>这好像是一所大学，具体叫什么名字我不认识，大门开着我就进去了，后来又被里面的员工赶出来了。里面风景还是不错的，教学楼一律是古黄色，凳子，不知名的植物，在下雨天中别有一番味道。<br><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/185045048.html"><img src="https://n3-q.mafengwo.net/s10/M00/EC/86/wKgBZ1iYCMWAZ9C4AA0mmLM-Hfw64.jpeg?imageView2/2/w/680/q/90"></a><br><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/185045049.html"><img src="https://b1-q.mafengwo.net/s10/M00/EC/89/wKgBZ1iYCMiAHDJBAAs1NL-4YSg76.jpeg?imageView2/2/w/680/q/90"></a><br><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/185045050.html"><img src="https://a1-q.mafengwo.net/s10/M00/EC/8B/wKgBZ1iYCMqAJsWIAAs-uHEZGbE81.jpeg?imageView2/2/w/680/q/90"></a><br><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/185045051.html"><img src="https://p2-q.mafengwo.net/s10/M00/EC/8B/wKgBZ1iYCMyATL_QAAk--L0zFrE95.jpeg?imageView2/2/w/680/q/90"></a><br><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/185045052.html"><img src="https://c4-q.mafengwo.net/s10/M00/EC/8D/wKgBZ1iYCM-AKPlnAAclnnZdiOY64.jpeg?imageView2/2/w/680/q/90"></a></p><p>从会安回岘港的巴士上又是一段值得回忆的经历。我首先向旁边一个老外打了招呼，问他这辆车到岘港的哪里，然后我俩就聊起来了，后来得知他是从澳大利亚移民到越南的，再然后，我们互相吐槽中国和澳大利亚的房价和物价高，赞越南的物价和女人，他说在澳大利亚他有big house和nice car，但是not happy，从刚到越南至现在的6年里，他找回了自己，他每天都过得开心。在得知我要找个靠近机场的旅馆后，还热心的打算帮我安排住处，到岘港后，我跟着他来到他妻子的家里，把我介绍给了他的越南家人，让他的Vietnamese Lady帮我找了个靠近机场的旅馆。</p><p>晚上出去逛了一圈，还交了几个当地的朋友，我的感觉是，越南年轻人对国人还是挺友好的，他们对我们就像是我们对日本人，有敬畏也有崇拜，或许也有一点敌视吧，但我这次旅行接触的当地人对我都挺友好，他们请我一起喝啤酒，虽然我们语言不通，但翻译软件的帮助下还是可以勉强交流的，最后还互相加了facebook。</p><p><img src="https://c3-q.mafengwo.net/s10/M00/F7/2A/wKgBZ1iYFjuACZkdABholsWqTjY97.jpeg?imageView2/2/w/680/q/90"></p><hr><h2 id="爱上岘港，爱上越南"><a href="#爱上岘港，爱上越南" class="headerlink" title="爱上岘港，爱上越南"></a>爱上岘港，爱上越南</h2><p>在岘港和会安玩了2天，越南之旅也算是到尾声了，离开前的一早我还在街边吃了本趟越南之行的最后一碗米粉，出奇的好吃，比河内的还要好吃，折成人民币才5元，搞得我更加舍不得岘港这座城市了。</p><p><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/185070222.html"><img src="https://a3-q.mafengwo.net/s10/M00/F8/B5/wKgBZ1iYF-qAerrEAAfmafIhVeE78.jpeg?imageView2/2/w/680/q/90"></a><br><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/185070223.html"><img src="https://a3-q.mafengwo.net/s10/M00/F8/BA/wKgBZ1iYF-2ALAaBAAc_UDQzs6g78.jpeg?imageView2/2/w/680/q/90"></a><br><a href="http://www.mafengwo.cn/photo/10180/scenery_6631157/185070224.html"><img src="https://n1-q.mafengwo.net/s10/M00/F8/BC/wKgBZ1iYF-6ARlXCAAVw4Xok3BY34.jpeg?imageView2/2/w/680/q/90"></a></p><p>从岘港回河内说什么也不能再坐sleeping bus了，飞机虽然花了我560元，加上托运费360k，加起来将近700（这也是没提前做好安排的代价），但飞机的好处是快，不会那么累。</p><p>回到河内才下午3点，离晚上嘉林回南宁火车的发车时间还有好几个小时，就趁机场大巴在乐天停下的时候提早下车了，买了不少路上吃的零食，买了些干米粉带给家人，河内的乐天超市物价比岘港还要便宜，小包的咖啡才20k都不到，小瓶的可乐折算成人民币才1块多。购物完毕我们就打车去了嘉林火车站，在此提醒大家，绿色的taxi跳表是最快的，也是最贵的，我们从长钱商场到嘉林火车站就要90k越盾，原先我们以为越盾会多出来，还打算换成人民币，最后发现不够打的，正好在嘉林火车站门口的小店里碰到几个要换越盾的妹子，就又换了100k越盾，剩下的越盾回家留着做纪念。</p><p>我感到奇怪的是，河内回南宁的火车上并没什么人，但淘宝上问了好几家都说没票了，估计是被黄牛搞的。第二天回杭州的火车是11点在南宁站发车，之前还担心河内到南宁的火车会晚点，但后来问了列车上的工作人员，事实也证明，这趟国际列车很少会发生晚点。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;我的所爱，在海云之间。&quot;&gt;&lt;a href=&quot;#我的所爱，在海云之间。&quot; class=&quot;headerlink&quot; title=&quot;我的所爱，在海云之间。&quot;&gt;&lt;/a&gt;我的所爱，在海云之间。&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;最喜欢骑着摩托在海云岭上拉到最大马力的感觉~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;刚开始想去越南只是听朋友说物价便宜，人美景也美，尤其是有海滩，决定下来之后就开始查很多网友的攻略，后来发现看攻略根本记不住啥，说来说去都是这么几个注意点。上班的时候就没啥心思了，很期待这场旅行，本来假期就不多，春节正好可以躲避寒冬，于是约了个好友一起去，人均花费在4000左右吧，要是平时去估计能便宜一半。我选择了在年三十就出发，即使是这样，我们真正玩的时间也只有三天，有大半时间都浪费在了路上，不过这一路上的经历回想起来也挺有意思的。在此还是强烈推荐平时淡季去，春节机票贵，火车票又一票难求，如果是淡季去的话直飞是最爽快的了。&lt;/p&gt;</summary>
    
    
    
    <category term="生活 - 旅游" scheme="https://www.memestarter.top/categories/%E7%94%9F%E6%B4%BB-%E6%97%85%E6%B8%B8/"/>
    
    
    <category term="生活" scheme="https://www.memestarter.top/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="旅游" scheme="https://www.memestarter.top/tags/%E6%97%85%E6%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>关于我</title>
    <link href="https://www.memestarter.top/2021/11/11/about/"/>
    <id>https://www.memestarter.top/2021/11/11/about/</id>
    <published>2021-11-11T07:26:21.000Z</published>
    <updated>2022-02-18T07:35:18.114Z</updated>
    
    <content type="html"><![CDATA[<h1 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h1><blockquote><p>一个刚跌倒的孩子，大彻大悟之后，决定重新来一回。这里会说一些废话，发一些牢骚，记录一些成长经历。期待和每一位有趣的人成为朋友。</p></blockquote><h1 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h1><p>工作多载，未有惊天动地之成就;愧。主要从事编程行业。曾经在几千人的公司呆过，也在几十个人的小团队做技术总监。努力过，奋斗过，也摸过鱼。项目经验有APP 研发，电商，java 后端，探针技术，游戏，区块链等。编程语言java  go  php  JavaScript dart</p><h1 id="以后"><a href="#以后" class="headerlink" title="以后"></a>以后</h1><p>看过网上的一篇文章，大概讲的是杠杆的原理。其实人生无非就是人力杠杆，经济杠杆，学历杠杆。合理利用好这些杠杆，能让自己活的更轻松。后边，技术上继续专研，会更加重视一些短平快项目的实践；生活上，会多走走，乐游和体验生活，多和家人亲戚沟通。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;状态&quot;&gt;&lt;a href=&quot;#状态&quot; class=&quot;headerlink&quot; title=&quot;状态&quot;&gt;&lt;/a&gt;状态&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;一个刚跌倒的孩子，大彻大悟之后，决定重新来一回。这里会说一些废话，发一些牢骚，记录一些成长经历。期待和每一位有趣的</summary>
      
    
    
    
    <category term="其他" scheme="https://www.memestarter.top/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="aobut" scheme="https://www.memestarter.top/tags/aobut/"/>
    
  </entry>
  
</feed>
